// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.etcd.io/etcd/client/v3

package clientv3

import pb "go.etcd.io/etcd/api/v3/etcdserverpb"

#LeaseRevokeResponse: pb.#LeaseRevokeResponse

#LeaseID: int64 // #enumLeaseID

#enumLeaseID:
	#NoLease

#values_LeaseID: NoLease: #NoLease

// LeaseGrantResponse wraps the protobuf message LeaseGrantResponse.
#LeaseGrantResponse: {
	ResponseHeader?: null | pb.#ResponseHeader @go(,*pb.ResponseHeader)
	ID:              #LeaseID
	TTL:             int64
	Error:           string
}

// LeaseKeepAliveResponse wraps the protobuf message LeaseKeepAliveResponse.
#LeaseKeepAliveResponse: {
	ResponseHeader?: null | pb.#ResponseHeader @go(,*pb.ResponseHeader)
	ID:              #LeaseID
	TTL:             int64
}

// LeaseTimeToLiveResponse wraps the protobuf message LeaseTimeToLiveResponse.
#LeaseTimeToLiveResponse: {
	ResponseHeader?: null | pb.#ResponseHeader @go(,*pb.ResponseHeader)
	id:              #LeaseID                  @go(ID)

	// TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds. Expired lease will return -1.
	ttl: int64 @go(TTL)

	// GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
	"granted-ttl": int64 @go(GrantedTTL)

	// Keys is the list of keys attached to this lease.
	keys: [...bytes] @go(Keys,[][]byte)
}

// LeaseStatus represents a lease status.
#LeaseStatus: {
	id: #LeaseID @go(ID)
}

// LeaseLeasesResponse wraps the protobuf message LeaseLeasesResponse.
#LeaseLeasesResponse: {
	ResponseHeader?: null | pb.#ResponseHeader @go(,*pb.ResponseHeader)
	leases: [...#LeaseStatus] @go(Leases,[]LeaseStatus)
}

// defaultTTL is the assumed lease TTL used for the first keepalive
// deadline before the actual TTL is known to the client.
_#defaultTTL: int & 5000000000

// NoLease is a lease ID for the absence of a lease.
#NoLease: #LeaseID & 0

// retryConnWait is how long to wait before retrying request due to an error
_#retryConnWait: int & 500000000

// ErrKeepAliveHalted is returned if client keep alive loop halts with an unexpected error.
//
// This usually means that automatic lease renewal via KeepAlive is broken, but KeepAliveOnce will still work as expected.
#ErrKeepAliveHalted: {
	Reason: _ @go(,error)
}

#Lease: _

// To identify the context passed to `KeepAlive`, a key/value pair is
// attached to the context. The key is a `keepAliveCtxKey` object, and
// the value is the pointer to the context object itself, ensuring
// uniqueness as each context has a unique memory address.
_#keepAliveCtxKey: {}
