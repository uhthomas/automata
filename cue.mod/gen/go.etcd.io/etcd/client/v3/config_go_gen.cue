// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.etcd.io/etcd/client/v3

package clientv3

import (
	"google.golang.org/grpc"
	"go.uber.org/zap"
)

#Config: {
	// Endpoints is a list of URLs.
	endpoints: [...string] @go(Endpoints,[]string)

	// AutoSyncInterval is the interval to update endpoints with its latest members.
	// 0 disables auto-sync. By default auto-sync is disabled.
	"auto-sync-interval": int @go(AutoSyncInterval,time.Duration)

	// DialTimeout is the timeout for failing to establish a connection.
	"dial-timeout": int @go(DialTimeout,time.Duration)

	// DialKeepAliveTime is the time after which client pings the server to see if
	// transport is alive.
	"dial-keep-alive-time": int @go(DialKeepAliveTime,time.Duration)

	// DialKeepAliveTimeout is the time that the client waits for a response for the
	// keep-alive probe. If the response is not received in this time, the connection is closed.
	"dial-keep-alive-timeout": int @go(DialKeepAliveTimeout,time.Duration)

	// MaxCallSendMsgSize is the client-side request send limit in bytes.
	// If 0, it defaults to 2.0 MiB (2 * 1024 * 1024).
	// Make sure that "MaxCallSendMsgSize" < server-side default send/recv limit.
	// ("--max-request-bytes" flag to etcd or "embed.Config.MaxRequestBytes").
	MaxCallSendMsgSize: int

	// MaxCallRecvMsgSize is the client-side response receive limit.
	// If 0, it defaults to "math.MaxInt32", because range response can
	// easily exceed request send limits.
	// Make sure that "MaxCallRecvMsgSize" >= server-side default send/recv limit.
	// ("--max-recv-bytes" flag to etcd).
	MaxCallRecvMsgSize: int

	// TLS holds the client secure credentials, if any.
	TLS?: null | _ @go(,*tls.Config)

	// Username is a user name for authentication.
	username: string @go(Username)

	// Password is a password for authentication.
	password: string @go(Password)

	// RejectOldCluster when set will refuse to create a client against an outdated cluster.
	"reject-old-cluster": bool @go(RejectOldCluster)

	// DialOptions is a list of dial options for the grpc client (e.g., for interceptors).
	// For example, pass "grpc.WithBlock()" to block until the underlying connection is up.
	// Without this, Dial returns immediately and connecting the server happens in background.
	DialOptions: [...grpc.#DialOption] @go(,[]grpc.DialOption)

	// Context is the default client context; it can be used to cancel grpc dial out and
	// other operations that do not have an explicit context.
	Context: _ @go(,context.Context)

	// LogConfig configures client-side logger.
	// If nil, use the default logger.
	// TODO: configure gRPC logger
	LogConfig?: null | zap.#Config @go(,*zap.Config)

	// PermitWithoutStream when set will allow client to send keepalive pings to server without any active streams(RPCs).
	"permit-without-stream": bool @go(PermitWithoutStream)

	// MaxUnaryRetries is the maximum number of retries for unary RPCs.
	"max-unary-retries": uint @go(MaxUnaryRetries)

	// BackoffWaitBetween is the wait time before retrying an RPC.
	"backoff-wait-between": int @go(BackoffWaitBetween,time.Duration)

	// BackoffJitterFraction is the jitter fraction to randomize backoff wait time.
	"backoff-jitter-fraction": float64 @go(BackoffJitterFraction)
}

// ConfigSpec is the configuration from users, which comes from command-line flags,
// environment variables or config file. It is a fully declarative configuration,
// and can be serialized & deserialized to/from JSON.
#ConfigSpec: {
	endpoints: [...string] @go(Endpoints,[]string)
	"request-timeout":   int                  @go(RequestTimeout,time.Duration)
	"dial-timeout":      int                  @go(DialTimeout,time.Duration)
	"keepalive-time":    int                  @go(KeepAliveTime,time.Duration)
	"keepalive-timeout": int                  @go(KeepAliveTimeout,time.Duration)
	"max-request-bytes": int                  @go(MaxCallSendMsgSize)
	"max-recv-bytes":    int                  @go(MaxCallRecvMsgSize)
	secure?:             null | #SecureConfig @go(Secure,*SecureConfig)
	auth?:               null | #AuthConfig   @go(Auth,*AuthConfig)
}

#SecureConfig: {
	cert:                       string @go(Cert)
	key:                        string @go(Key)
	cacert:                     string @go(Cacert)
	"server-name":              string @go(ServerName)
	"insecure-transport":       bool   @go(InsecureTransport)
	"insecure-skip-tls-verify": bool   @go(InsecureSkipVerify)
}

#AuthConfig: {
	username: string @go(Username)
	password: string @go(Password)
}
