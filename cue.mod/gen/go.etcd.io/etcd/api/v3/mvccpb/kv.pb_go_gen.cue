// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.etcd.io/etcd/api/v3/mvccpb

package mvccpb

#Event_EventType: int32 // #enumEvent_EventType

#enumEvent_EventType:
	#PUT |
	#DELETE

#values_Event_EventType: {
	PUT:    #PUT
	DELETE: #DELETE
}

#PUT:    #Event_EventType & 0
#DELETE: #Event_EventType & 1

#KeyValue: {
	// key is the key in bytes. An empty key is not allowed.
	key?: bytes @go(Key,[]byte) @protobuf(1,bytes,opt,proto3)

	// create_revision is the revision of last creation on this key.
	create_revision?: int64 @go(CreateRevision) @protobuf(2,varint,opt,json=createRevision,proto3)

	// mod_revision is the revision of last modification on this key.
	mod_revision?: int64 @go(ModRevision) @protobuf(3,varint,opt,json=modRevision,proto3)

	// version is the version of the key. A deletion resets
	// the version to zero and any modification of the key
	// increases its version.
	version?: int64 @go(Version) @protobuf(4,varint,opt,proto3)

	// value is the value held by the key, in bytes.
	value?: bytes @go(Value,[]byte) @protobuf(5,bytes,opt,proto3)

	// lease is the ID of the lease that attached to key.
	// When the attached lease expires, the key will be deleted.
	// If lease is 0, then no lease is attached to the key.
	lease?: int64 @go(Lease) @protobuf(6,varint,opt,proto3)
}

#Event: {
	// type is the kind of event. If type is a PUT, it indicates
	// new data has been stored to the key. If type is a DELETE,
	// it indicates the key was deleted.
	type?: #Event_EventType @go(Type) @protobuf(1,varint,opt,proto3,enum=mvccpb.Event_EventType)

	// kv holds the KeyValue for the event.
	// A PUT event contains current kv pair.
	// A PUT event with kv.Version=1 indicates the creation of a key.
	// A DELETE/EXPIRE event contains the deleted key with
	// its modification revision set to the revision of deletion.
	kv?: null | #KeyValue @go(Kv,*KeyValue) @protobuf(2,bytes,opt,proto3)

	// prev_kv holds the key-value pair before the event happens.
	prev_kv?: null | #KeyValue @go(PrevKv,*KeyValue) @protobuf(3,bytes,opt,json=prevKv,proto3)
}
