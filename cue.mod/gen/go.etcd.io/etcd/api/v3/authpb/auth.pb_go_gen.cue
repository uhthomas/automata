// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.etcd.io/etcd/api/v3/authpb

package authpb

#Permission_Type: int32 // #enumPermission_Type

#enumPermission_Type:
	#READ |
	#WRITE |
	#READWRITE

#values_Permission_Type: {
	READ:      #READ
	WRITE:     #WRITE
	READWRITE: #READWRITE
}

#READ:      #Permission_Type & 0
#WRITE:     #Permission_Type & 1
#READWRITE: #Permission_Type & 2

#UserAddOptions: {
	no_password?: bool @go(NoPassword) @protobuf(1,varint,opt,json=noPassword,proto3)
}

// User is a single entry in the bucket authUsers
#User: {
	name?:     bytes @go(Name,[]byte) @protobuf(1,bytes,opt,proto3)
	password?: bytes @go(Password,[]byte) @protobuf(2,bytes,opt,proto3)
	roles?: [...string] @go(Roles,[]string) @protobuf(3,bytes,rep,proto3)
	options?: null | #UserAddOptions @go(Options,*UserAddOptions) @protobuf(4,bytes,opt,proto3)
}

// Permission is a single entity
#Permission: {
	permType?:  #Permission_Type @go(PermType) @protobuf(1,varint,opt,proto3,enum=authpb.Permission_Type)
	key?:       bytes            @go(Key,[]byte) @protobuf(2,bytes,opt,proto3)
	range_end?: bytes            @go(RangeEnd,[]byte) @protobuf(3,bytes,opt,json=rangeEnd,proto3)
}

// Role is a single entry in the bucket authRoles
#Role: {
	name?: bytes @go(Name,[]byte) @protobuf(1,bytes,opt,proto3)
	keyPermission?: [...null | #Permission] @go(KeyPermission,[]*Permission) @protobuf(2,bytes,rep,proto3)
}
