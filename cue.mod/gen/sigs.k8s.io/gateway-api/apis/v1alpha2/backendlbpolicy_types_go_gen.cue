// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/gateway-api/apis/v1alpha2

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/gateway-api/apis/v1"
)

// BackendLBPolicy provides a way to define load balancing rules
// for a backend.
#BackendLBPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec defines the desired state of BackendLBPolicy.
	spec: #BackendLBPolicySpec @go(Spec)

	// Status defines the current state of BackendLBPolicy.
	status?: #PolicyStatus @go(Status)
}

// +kubebuilder:object:root=true
// BackendLBPolicyList contains a list of BackendLBPolicies
#BackendLBPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#BackendLBPolicy] @go(Items,[]BackendLBPolicy)
}

// BackendLBPolicySpec defines the desired state of
// BackendLBPolicy.
// Note: there is no Override or Default policy configuration.
#BackendLBPolicySpec: {
	// TargetRef identifies an API object to apply policy to.
	// Currently, Backends (i.e. Service, ServiceImport, or any
	// implementation-specific backendRef) are the only valid API
	// target references.
	// +listType=map
	// +listMapKey=group
	// +listMapKey=kind
	// +listMapKey=name
	// +kubebuilder:validation:MinItems=1
	// +kubebuilder:validation:MaxItems=16
	targetRefs: [...#LocalPolicyTargetReference] @go(TargetRefs,[]LocalPolicyTargetReference)

	// SessionPersistence defines and configures session persistence
	// for the backend.
	//
	// Support: Extended
	//
	// +optional
	sessionPersistence?: null | v1.#SessionPersistence @go(SessionPersistence,*sigs.k8s.io/gateway-api/apis/v1.SessionPersistence)
}
