// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/controller-runtime/pkg/config

package config

// Controller contains configuration options for a controller.
#Controller: {
	// SkipNameValidation allows skipping the name validation that ensures that every controller name is unique.
	// Unique controller names are important to get unique metrics and logs for a controller.
	// Can be overwritten for a controller via the SkipNameValidation setting on the controller.
	// Defaults to false if SkipNameValidation setting on controller and Manager are unset.
	SkipNameValidation?: null | bool @go(,*bool)

	// GroupKindConcurrency is a map from a Kind to the number of concurrent reconciliation
	// allowed for that controller.
	//
	// When a controller is registered within this manager using the builder utilities,
	// users have to specify the type the controller reconciles in the For(...) call.
	// If the object's kind passed matches one of the keys in this map, the concurrency
	// for that controller is set to the number specified.
	//
	// The key is expected to be consistent in form with GroupKind.String(),
	// e.g. ReplicaSet in apps group (regardless of version) would be `ReplicaSet.apps`.
	GroupKindConcurrency: {[string]: int} @go(,map[string]int)

	// MaxConcurrentReconciles is the maximum number of concurrent Reconciles which can be run. Defaults to 1.
	MaxConcurrentReconciles: int

	// CacheSyncTimeout refers to the time limit set to wait for syncing caches.
	// Defaults to 2 minutes if not set.
	CacheSyncTimeout: int @go(,time.Duration)

	// RecoverPanic indicates whether the panic caused by reconcile should be recovered.
	// Can be overwritten for a controller via the RecoverPanic setting on the controller.
	// Defaults to true if RecoverPanic setting on controller and Manager are unset.
	RecoverPanic?: null | bool @go(,*bool)

	// NeedLeaderElection indicates whether the controller needs to use leader election.
	// Defaults to true, which means the controller will use leader election.
	NeedLeaderElection?: null | bool @go(,*bool)

	// UsePriorityQueue configures the controllers queue to use the controller-runtime provided
	// priority queue.
	//
	// Note: This flag is disabled by default until a future version. It's currently in beta.
	UsePriorityQueue?: null | bool @go(,*bool)
}
