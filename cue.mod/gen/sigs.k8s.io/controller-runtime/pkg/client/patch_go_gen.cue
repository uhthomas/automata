// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/controller-runtime/pkg/client

package client

// MergeFromWithOptimisticLock can be used if clients want to make sure a patch
// is being applied to the latest resource version of an object.
//
// The behavior is similar to what an Update would do, without the need to send the
// whole object. Usually this method is useful if you might have multiple clients
// acting on the same object and the same API version, but with different versions of the Go structs.
//
// For example, an "older" copy of a Widget that has fields A and B, and a "newer" copy with A, B, and C.
// Sending an update using the older struct definition results in C being dropped, whereas using a patch does not.
#MergeFromWithOptimisticLock: {}

// MergeFromOption is some configuration that modifies options for a merge-from patch data.
#MergeFromOption: _

// MergeFromOptions contains options to generate a merge-from patch data.
#MergeFromOptions: {
	// OptimisticLock, when true, includes `metadata.resourceVersion` into the final
	// patch data. If the `resourceVersion` field doesn't match what's stored,
	// the operation results in a conflict and clients will need to try again.
	OptimisticLock: bool
}

// mergePatch uses a raw merge strategy to patch the object.
_#mergePatch: {}

// applyPatch uses server-side apply to patch the object.
_#applyPatch: {}
