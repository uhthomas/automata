// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/controller-runtime/pkg/client

package client

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/fields"
)

// CreateOption is some configuration that modifies options for a create request.
#CreateOption: _

// DeleteOption is some configuration that modifies options for a delete request.
#DeleteOption: _

// GetOption is some configuration that modifies options for a get request.
#GetOption: _

// ListOption is some configuration that modifies options for a list request.
#ListOption: _

// UpdateOption is some configuration that modifies options for a update request.
#UpdateOption: _

// PatchOption is some configuration that modifies options for a patch request.
#PatchOption: _

// DeleteAllOfOption is some configuration that modifies options for a delete request.
#DeleteAllOfOption: _

// SubResourceGetOption modifies options for a SubResource Get request.
#SubResourceGetOption: _

// SubResourceUpdateOption is some configuration that modifies options for a update request.
#SubResourceUpdateOption: _

// SubResourceCreateOption is some configuration that modifies options for a create request.
#SubResourceCreateOption: _

// SubResourcePatchOption configures a subresource patch request.
#SubResourcePatchOption: _

_#dryRunAll: {}

// FieldOwner set the field manager name for the given server-side apply patch.
#FieldOwner: string

// FieldValidation configures field validation for the given requests.
#FieldValidation: string

// CreateOptions contains options for create requests. It's generally a subset
// of metav1.CreateOptions.
#CreateOptions: {
	// When present, indicates that modifications should not be
	// persisted. An invalid or unrecognized dryRun directive will
	// result in an error response and no further processing of the
	// request. Valid values are:
	// - All: all dry run stages will be processed
	DryRun: [...string] @go(,[]string)

	// FieldManager is the name of the user or component submitting
	// this request.  It must be set with server-side apply.
	FieldManager: string

	// fieldValidation instructs the server on how to handle
	// objects in the request (POST/PUT/PATCH) containing unknown
	// or duplicate fields. Valid values are:
	// - Ignore: This will ignore any unknown fields that are silently
	// dropped from the object, and will ignore all but the last duplicate
	// field that the decoder encounters. This is the default behavior
	// prior to v1.23.
	// - Warn: This will send a warning via the standard warning response
	// header for each unknown field that is dropped from the object, and
	// for each duplicate field that is encountered. The request will
	// still succeed if there are no other errors, and will only persist
	// the last of any duplicate fields. This is the default in v1.23+
	// - Strict: This will fail the request with a BadRequest error if
	// any unknown fields would be dropped from the object, or if any
	// duplicate fields are present. The error returned from the server
	// will contain all unknown and duplicate fields encountered.
	FieldValidation: string

	// Raw represents raw CreateOptions, as passed to the API server.
	Raw?: null | metav1.#CreateOptions @go(,*metav1.CreateOptions)
}

// DeleteOptions contains options for delete requests. It's generally a subset
// of metav1.DeleteOptions.
#DeleteOptions: {
	// GracePeriodSeconds is the duration in seconds before the object should be
	// deleted. Value must be non-negative integer. The value zero indicates
	// delete immediately. If this value is nil, the default grace period for the
	// specified type will be used.
	GracePeriodSeconds?: null | int64 @go(,*int64)

	// Preconditions must be fulfilled before a deletion is carried out. If not
	// possible, a 409 Conflict status will be returned.
	Preconditions?: null | metav1.#Preconditions @go(,*metav1.Preconditions)

	// PropagationPolicy determined whether and how garbage collection will be
	// performed. Either this field or OrphanDependents may be set, but not both.
	// The default policy is decided by the existing finalizer set in the
	// metadata.finalizers and the resource-specific default policy.
	// Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
	// allow the garbage collector to delete the dependents in the background;
	// 'Foreground' - a cascading policy that deletes all dependents in the
	// foreground.
	PropagationPolicy?: null | metav1.#DeletionPropagation @go(,*metav1.DeletionPropagation)

	// Raw represents raw DeleteOptions, as passed to the API server.
	Raw?: null | metav1.#DeleteOptions @go(,*metav1.DeleteOptions)

	// When present, indicates that modifications should not be
	// persisted. An invalid or unrecognized dryRun directive will
	// result in an error response and no further processing of the
	// request. Valid values are:
	// - All: all dry run stages will be processed
	DryRun: [...string] @go(,[]string)
}

// GracePeriodSeconds sets the grace period for the deletion
// to the given number of seconds.
#GracePeriodSeconds: int64

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
#Preconditions: metav1.#Preconditions

// PropagationPolicy determined whether and how garbage collection will be
// performed. Either this field or OrphanDependents may be set, but not both.
// The default policy is decided by the existing finalizer set in the
// metadata.finalizers and the resource-specific default policy.
// Acceptable values are: 'Orphan' - orphan the dependents; 'Background' -
// allow the garbage collector to delete the dependents in the background;
// 'Foreground' - a cascading policy that deletes all dependents in the
// foreground.
#PropagationPolicy: metav1.#DeletionPropagation

// GetOptions contains options for get operation.
// Now it only has a Raw field, with support for specific resourceVersion.
#GetOptions: {
	// Raw represents raw GetOptions, as passed to the API server.  Note
	// that these may not be respected by all implementations of interface.
	Raw?: null | metav1.#GetOptions @go(,*metav1.GetOptions)
}

// ListOptions contains options for limiting or filtering results.
// It's generally a subset of metav1.ListOptions, with support for
// pre-parsed selectors (since generally, selectors will be executed
// against the cache).
#ListOptions: {
	// LabelSelector filters results by label. Use labels.Parse() to
	// set from raw string form.
	LabelSelector: labels.#Selector

	// FieldSelector filters results by a particular field.  In order
	// to use this with cache-based implementations, restrict usage to
	// exact match field-value pair that's been added to the indexers.
	FieldSelector: fields.#Selector

	// Namespace represents the namespace to list for, or empty for
	// non-namespaced objects, or to list across all namespaces.
	Namespace: string

	// Limit specifies the maximum number of results to return from the server. The server may
	// not support this field on all resource types, but if it does and more results remain it
	// will set the continue field on the returned list object. This field is not supported if watch
	// is true in the Raw ListOptions.
	Limit: int64

	// Continue is a token returned by the server that lets a client retrieve chunks of results
	// from the server by specifying limit. The server may reject requests for continuation tokens
	// it does not recognize and will return a 410 error if the token can no longer be used because
	// it has expired. This field is not supported if watch is true in the Raw ListOptions.
	Continue: string

	// UnsafeDisableDeepCopy indicates not to deep copy objects during list objects.
	// Be very careful with this, when enabled you must DeepCopy any object before mutating it,
	// otherwise you will mutate the object in the cache.
	// +optional
	UnsafeDisableDeepCopy?: null | bool @go(,*bool)

	// Raw represents raw ListOptions, as passed to the API server.  Note
	// that these may not be respected by all implementations of interface,
	// and the LabelSelector, FieldSelector, Limit and Continue fields are ignored.
	Raw?: null | metav1.#ListOptions @go(,*metav1.ListOptions)
}

// MatchingLabels filters the list/delete operation on the given set of labels.
#MatchingLabels: {[string]: string}

// HasLabels filters the list/delete operation checking if the set of labels exists
// without checking their values.
#HasLabels: [...string]

// MatchingLabelsSelector filters the list/delete operation on the given label
// selector (or index in the case of cached lists). A struct is used because
// labels.Selector is an interface, which cannot be aliased.
#MatchingLabelsSelector: {
	Selector: labels.#Selector
}

// MatchingFields filters the list/delete operation on the given field Set
// (or index in the case of cached lists).
#MatchingFields: fields.#Set

// MatchingFieldsSelector filters the list/delete operation on the given field
// selector (or index in the case of cached lists). A struct is used because
// fields.Selector is an interface, which cannot be aliased.
#MatchingFieldsSelector: {
	Selector: fields.#Selector
}

// InNamespace restricts the list/delete operation to the given namespace.
#InNamespace: string

// Limit specifies the maximum number of results to return from the server.
// Limit does not implement DeleteAllOfOption interface because the server
// does not support setting it for deletecollection operations.
#Limit: int64

// UnsafeDisableDeepCopyOption indicates not to deep copy objects during list objects.
// Be very careful with this, when enabled you must DeepCopy any object before mutating it,
// otherwise you will mutate the object in the cache.
#UnsafeDisableDeepCopyOption: bool // #enumUnsafeDisableDeepCopyOption

#enumUnsafeDisableDeepCopyOption:
	#UnsafeDisableDeepCopy

#values_UnsafeDisableDeepCopyOption: UnsafeDisableDeepCopy: #UnsafeDisableDeepCopy

#UnsafeDisableDeepCopy: #UnsafeDisableDeepCopyOption & true

// Continue sets a continuation token to retrieve chunks of results when using limit.
// Continue does not implement DeleteAllOfOption interface because the server
// does not support setting it for deletecollection operations.
#Continue: string

// UpdateOptions contains options for create requests. It's generally a subset
// of metav1.UpdateOptions.
#UpdateOptions: {
	// When present, indicates that modifications should not be
	// persisted. An invalid or unrecognized dryRun directive will
	// result in an error response and no further processing of the
	// request. Valid values are:
	// - All: all dry run stages will be processed
	DryRun: [...string] @go(,[]string)

	// FieldManager is the name of the user or component submitting
	// this request.  It must be set with server-side apply.
	FieldManager: string

	// fieldValidation instructs the server on how to handle
	// objects in the request (POST/PUT/PATCH) containing unknown
	// or duplicate fields. Valid values are:
	// - Ignore: This will ignore any unknown fields that are silently
	// dropped from the object, and will ignore all but the last duplicate
	// field that the decoder encounters. This is the default behavior
	// prior to v1.23.
	// - Warn: This will send a warning via the standard warning response
	// header for each unknown field that is dropped from the object, and
	// for each duplicate field that is encountered. The request will
	// still succeed if there are no other errors, and will only persist
	// the last of any duplicate fields. This is the default in v1.23+
	// - Strict: This will fail the request with a BadRequest error if
	// any unknown fields would be dropped from the object, or if any
	// duplicate fields are present. The error returned from the server
	// will contain all unknown and duplicate fields encountered.
	FieldValidation: string

	// Raw represents raw UpdateOptions, as passed to the API server.
	Raw?: null | metav1.#UpdateOptions @go(,*metav1.UpdateOptions)
}

// PatchOptions contains options for patch requests.
#PatchOptions: {
	// When present, indicates that modifications should not be
	// persisted. An invalid or unrecognized dryRun directive will
	// result in an error response and no further processing of the
	// request. Valid values are:
	// - All: all dry run stages will be processed
	DryRun: [...string] @go(,[]string)

	// Force is going to "force" Apply requests. It means user will
	// re-acquire conflicting fields owned by other people. Force
	// flag must be unset for non-apply patch requests.
	// +optional
	Force?: null | bool @go(,*bool)

	// FieldManager is the name of the user or component submitting
	// this request.  It must be set with server-side apply.
	FieldManager: string

	// fieldValidation instructs the server on how to handle
	// objects in the request (POST/PUT/PATCH) containing unknown
	// or duplicate fields. Valid values are:
	// - Ignore: This will ignore any unknown fields that are silently
	// dropped from the object, and will ignore all but the last duplicate
	// field that the decoder encounters. This is the default behavior
	// prior to v1.23.
	// - Warn: This will send a warning via the standard warning response
	// header for each unknown field that is dropped from the object, and
	// for each duplicate field that is encountered. The request will
	// still succeed if there are no other errors, and will only persist
	// the last of any duplicate fields. This is the default in v1.23+
	// - Strict: This will fail the request with a BadRequest error if
	// any unknown fields would be dropped from the object, or if any
	// duplicate fields are present. The error returned from the server
	// will contain all unknown and duplicate fields encountered.
	FieldValidation: string

	// Raw represents raw PatchOptions, as passed to the API server.
	Raw?: null | metav1.#PatchOptions @go(,*metav1.PatchOptions)
}

_#forceOwnership: {}

// DeleteAllOfOptions contains options for deletecollection (deleteallof) requests.
// It's just list and delete options smooshed together.
#DeleteAllOfOptions: {
	ListOptions:   #ListOptions
	DeleteOptions: #DeleteOptions
}
