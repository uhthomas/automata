// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go google.golang.org/grpc

package grpc

_#defaultServerMaxReceiveMessageSize: 4194304
_#defaultServerMaxSendMessageSize:    2147483647

// Server transports are tracked in a map which is keyed on listener
// address. For regular gRPC traffic, connections are accepted in Serve()
// through a call to Accept(), and we use the actual listener address as key
// when we add it to the map. But for connections received through
// ServeHTTP(), we do not have a listener and hence use this dummy value.
_#listenerAddressForServeHTTP: "listenerAddressForServeHTTP"

// MethodDesc represents an RPC service's method specification.
#MethodDesc: {
	MethodName: string
}

// ServiceDesc represents an RPC service's specification.
#ServiceDesc: {
	ServiceName: string

	// The pointer to the service interface. Used to check whether the user
	// provided implementation satisfies the interface requirements.
	HandlerType: _ @go(,any)
	Methods: [...#MethodDesc] @go(,[]MethodDesc)
	Streams: [...#StreamDesc] @go(,[]StreamDesc)
	Metadata: _ @go(,any)
}

// A ServerOption sets options such as credentials, codec and keepalive parameters, etc.
#ServerOption: _

// EmptyServerOption does not alter the server configuration. It can be embedded
// in another structure to build custom server options.
//
// # Experimental
//
// Notice: This type is EXPERIMENTAL and may be changed or removed in a
// later release.
#EmptyServerOption: {}

// MaxHeaderListSizeServerOption is a ServerOption that sets the max
// (uncompressed) size of header list that the server is prepared to accept.
#MaxHeaderListSizeServerOption: {
	MaxHeaderListSize: uint32
}

_#serverWorkerResetThreshold: 65536

// ServiceRegistrar wraps a single method that supports service registration. It
// enables users to pass concrete types other than grpc.Server to the service
// registration methods exported by the IDL generated code.
#ServiceRegistrar: _

// MethodInfo contains the information of an RPC including its method name and type.
#MethodInfo: {
	// Name is the method name only, without the service name or package name.
	Name: string

	// IsClientStream indicates whether the RPC is a client streaming RPC.
	IsClientStream: bool

	// IsServerStream indicates whether the RPC is a server streaming RPC.
	IsServerStream: bool
}

// ServiceInfo contains unary RPC method info, streaming RPC method info and metadata for a service.
#ServiceInfo: {
	Methods: [...#MethodInfo] @go(,[]MethodInfo)

	// Metadata is the metadata specified in ServiceDesc when registering service.
	Metadata: _ @go(,any)
}

_#listenSocket: {
	Listener: _ @go(,net.Listener)
}

// The key to save ServerTransportStream in the context.
_#streamKey: {}

// ServerTransportStream is a minimal interface that a transport stream must
// implement. This can be used to mock an actual transport stream for tests of
// handler code that use, for example, grpc.SetHeader (which requires some
// stream to be in context).
//
// See also NewContextWithServerTransportStream.
//
// # Experimental
//
// Notice: This type is EXPERIMENTAL and may be changed or removed in a
// later release.
#ServerTransportStream: _

_#serverKey: {}
