// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go google.golang.org/grpc/health/grpc_health_v1

package grpc_health_v1

import "google.golang.org/grpc"

#Health_Check_FullMethodName: "/grpc.health.v1.Health/Check"
#Health_List_FullMethodName:  "/grpc.health.v1.Health/List"
#Health_Watch_FullMethodName: "/grpc.health.v1.Health/Watch"

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Health is gRPC's mechanism for checking whether a server is able to handle
// RPCs. Its semantics are documented in
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
#HealthClient: _

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
#Health_WatchClient: grpc.#ServerStreamingClient

// HealthServer is the server API for Health service.
// All implementations should embed UnimplementedHealthServer
// for forward compatibility.
//
// Health is gRPC's mechanism for checking whether a server is able to handle
// RPCs. Its semantics are documented in
// https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
#HealthServer: _

// UnimplementedHealthServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
#UnimplementedHealthServer: {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
#UnsafeHealthServer: _

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
#Health_WatchServer: grpc.#ServerStreamingServer
