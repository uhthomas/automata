// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go google.golang.org/grpc/credentials

// Package credentials implements various credentials supported by gRPC library,
// which encapsulate all the state needed by a client to authenticate with a
// server and make various assertions, e.g., about the client's identity, role,
// or whether it is authorized to make a particular call.
package credentials

import "google.golang.org/protobuf/reflect/protoreflect"

// PerRPCCredentials defines the common interface for the credentials which need to
// attach security information to every RPC (e.g., oauth2).
#PerRPCCredentials: _

// SecurityLevel defines the protection level on an established connection.
//
// This API is experimental.
#SecurityLevel: int // #enumSecurityLevel

#enumSecurityLevel:
	#InvalidSecurityLevel |
	#NoSecurity |
	#IntegrityOnly |
	#PrivacyAndIntegrity

#values_SecurityLevel: {
	InvalidSecurityLevel: #InvalidSecurityLevel
	NoSecurity:           #NoSecurity
	IntegrityOnly:        #IntegrityOnly
	PrivacyAndIntegrity:  #PrivacyAndIntegrity
}

// InvalidSecurityLevel indicates an invalid security level.
// The zero SecurityLevel value is invalid for backward compatibility.
#InvalidSecurityLevel: #SecurityLevel & 0

// NoSecurity indicates a connection is insecure.
#NoSecurity: #SecurityLevel & 1

// IntegrityOnly indicates a connection only provides integrity protection.
#IntegrityOnly: #SecurityLevel & 2

// PrivacyAndIntegrity indicates a connection provides both privacy and integrity protection.
#PrivacyAndIntegrity: #SecurityLevel & 3

// CommonAuthInfo contains authenticated information common to AuthInfo implementations.
// It should be embedded in a struct implementing AuthInfo to provide additional information
// about the credentials.
//
// This API is experimental.
#CommonAuthInfo: {
	SecurityLevel: #SecurityLevel
}

// ProtocolInfo provides information regarding the gRPC wire protocol version,
// security protocol, security protocol version in use, server name, etc.
#ProtocolInfo: {
	// ProtocolVersion is the gRPC wire protocol version.
	ProtocolVersion: string

	// SecurityProtocol is the security protocol in use.
	SecurityProtocol: string

	// SecurityVersion is the security protocol version.  It is a static version string from the
	// credentials, not a value that reflects per-connection protocol negotiation.  To retrieve
	// details about the credentials used for a connection, use the Peer's AuthInfo field instead.
	//
	// Deprecated: please use Peer.AuthInfo.
	SecurityVersion: string

	// ServerName is the user-configured server name.
	ServerName: string
}

// AuthInfo defines the common interface for the auth information the users are interested in.
// A struct that implements AuthInfo should embed CommonAuthInfo by including additional
// information about the credentials in it.
#AuthInfo: _

// AuthorityValidator validates the authority used to override the `:authority`
// header. This is an optional interface that implementations of AuthInfo can
// implement if they support per-RPC authority overrides. It is invoked when the
// application attempts to override the HTTP/2 `:authority` header using the
// CallAuthority call option.
#AuthorityValidator: _

// TransportCredentials defines the common interface for all the live gRPC wire
// protocols and supported transport security protocols (e.g., TLS, SSL).
#TransportCredentials: _

// Bundle is a combination of TransportCredentials and PerRPCCredentials.
//
// It also contains a mode switching method, so it can be used as a combination
// of different credential policies.
//
// Bundle cannot be used together with individual TransportCredentials.
// PerRPCCredentials from Bundle will be appended to other PerRPCCredentials.
//
// This API is experimental.
#Bundle: _

// RequestInfo contains request data attached to the context passed to GetRequestMetadata calls.
//
// This API is experimental.
#RequestInfo: {
	// The method passed to Invoke or NewStream for this RPC. (For proto methods, this has the format "/some.Service/Method")
	Method: string

	// AuthInfo contains the information from a security handshake (TransportCredentials.ClientHandshake, TransportCredentials.ServerHandshake)
	AuthInfo: #AuthInfo
}

// requestInfoKey is a struct to be used as the key to store RequestInfo in a
// context.
_#requestInfoKey: {}

// ChannelzSecurityInfo defines the interface that security protocols should implement
// in order to provide security info to channelz.
//
// This API is experimental.
#ChannelzSecurityInfo: _

// ChannelzSecurityValue defines the interface that GetSecurityValue() return value
// should satisfy. This interface should only be satisfied by *TLSChannelzSecurityValue
// and *OtherChannelzSecurityValue.
//
// This API is experimental.
#ChannelzSecurityValue: _

// OtherChannelzSecurityValue defines the struct that non-TLS protocol should return
// from GetSecurityValue(), which contains protocol specific security info. Note
// the Value field will be sent to users of channelz requesting channel info, and
// thus sensitive info should better be avoided.
//
// This API is experimental.
#OtherChannelzSecurityValue: {
	ChannelzSecurityValue: #ChannelzSecurityValue
	Name:                  string
	Value:                 protoreflect.#ProtoMessage @go(,proto.Message)
}
