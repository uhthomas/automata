// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.uber.org/zap/zapcore

package zapcore

import "time"

// EntryCaller represents the caller of a logging function.
#EntryCaller: {
	Defined:  bool
	PC:       uint64 @go(,uintptr)
	File:     string
	Line:     int
	Function: string
}

// An Entry represents a complete log message. The entry's structured context
// is already serialized, but the log level, time, message, and call site
// information are available for inspection and modification. Any fields left
// empty will be omitted when encoding.
//
// Entries are pooled, so any functions that accept them MUST be careful not to
// retain references to them.
#Entry: {
	Level:      #Level
	Time:       time.Time
	LoggerName: string
	Message:    string
	Caller:     #EntryCaller
	Stack:      string
}

// CheckWriteHook is a custom action that may be executed after an entry is
// written.
//
// Register one on a CheckedEntry with the After method.
//
//	if ce := logger.Check(...); ce != nil {
//	  ce = ce.After(hook)
//	  ce.Write(...)
//	}
//
// You can configure the hook for Fatal log statements at the logger level with
// the zap.WithFatalHook option.
#CheckWriteHook: _

// CheckWriteAction indicates what action to take after a log entry is
// processed. Actions are ordered in increasing severity.
#CheckWriteAction: uint8 // #enumCheckWriteAction

#enumCheckWriteAction:
	#WriteThenNoop |
	#WriteThenGoexit |
	#WriteThenPanic |
	#WriteThenFatal

#values_CheckWriteAction: {
	WriteThenNoop:   #WriteThenNoop
	WriteThenGoexit: #WriteThenGoexit
	WriteThenPanic:  #WriteThenPanic
	WriteThenFatal:  #WriteThenFatal
}

// WriteThenNoop indicates that nothing special needs to be done. It's the
// default behavior.
#WriteThenNoop: #CheckWriteAction & 0

// WriteThenGoexit runs runtime.Goexit after Write.
#WriteThenGoexit: #CheckWriteAction & 1

// WriteThenPanic causes a panic after Write.
#WriteThenPanic: #CheckWriteAction & 2

// WriteThenFatal causes an os.Exit(1) after Write.
#WriteThenFatal: #CheckWriteAction & 3

// CheckedEntry is an Entry together with a collection of Cores that have
// already agreed to log it.
//
// CheckedEntry references should be created by calling AddCore or After on a
// nil *CheckedEntry. References are returned to a pool after Write, and MUST
// NOT be retained after calling their Write method.
#CheckedEntry: {
	Entry:       #Entry
	ErrorOutput: #WriteSyncer
}
