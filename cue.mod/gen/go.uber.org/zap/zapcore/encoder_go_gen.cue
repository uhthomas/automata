// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.uber.org/zap/zapcore

package zapcore

#DefaultLineEnding: "\n"

#OmitKey: ""

// A LevelEncoder serializes a Level to a primitive type.
//
// This function must make exactly one call
// to a PrimitiveArrayEncoder's Append* method.
#LevelEncoder: string

// A TimeEncoder serializes a time.Time to a primitive type.
//
// This function must make exactly one call
// to a PrimitiveArrayEncoder's Append* method.
#TimeEncoder: _

// A DurationEncoder serializes a time.Duration to a primitive type.
//
// This function must make exactly one call
// to a PrimitiveArrayEncoder's Append* method.
#DurationEncoder: string

// A CallerEncoder serializes an EntryCaller to a primitive type.
//
// This function must make exactly one call
// to a PrimitiveArrayEncoder's Append* method.
#CallerEncoder: string

// A NameEncoder serializes a period-separated logger name to a primitive
// type.
//
// This function must make exactly one call
// to a PrimitiveArrayEncoder's Append* method.
#NameEncoder: string

// An EncoderConfig allows users to configure the concrete encoders supplied by
// zapcore.
#EncoderConfig: {
	// Set the keys used for each log entry. If any key is empty, that portion
	// of the entry is omitted.
	messageKey:     string @go(MessageKey)
	levelKey:       string @go(LevelKey)
	timeKey:        string @go(TimeKey)
	nameKey:        string @go(NameKey)
	callerKey:      string @go(CallerKey)
	functionKey:    string @go(FunctionKey)
	stacktraceKey:  string @go(StacktraceKey)
	skipLineEnding: bool   @go(SkipLineEnding)
	lineEnding:     string @go(LineEnding)

	// Configures the field separator used by the console encoder. Defaults
	// to tab.
	consoleSeparator: string @go(ConsoleSeparator)
}

// ObjectEncoder is a strongly-typed, encoding-agnostic interface for adding a
// map- or struct-like object to the logging context. Like maps, ObjectEncoders
// aren't safe for concurrent use (though typical use shouldn't require locks).
#ObjectEncoder: _

// ArrayEncoder is a strongly-typed, encoding-agnostic interface for adding
// array-like objects to the logging context. Of note, it supports mixed-type
// arrays even though they aren't typical in Go. Like slices, ArrayEncoders
// aren't safe for concurrent use (though typical use shouldn't require locks).
#ArrayEncoder: _

// PrimitiveArrayEncoder is the subset of the ArrayEncoder interface that deals
// only in Go's built-in types. It's included only so that Duration- and
// TimeEncoders cannot trigger infinite recursion.
#PrimitiveArrayEncoder: _

// Encoder is a format-agnostic interface for all log entry marshalers. Since
// log encoders don't need to support the same wide range of use cases as
// general-purpose marshalers, it's possible to make them faster and
// lower-allocation.
//
// Implementations of the ObjectEncoder interface's methods can, of course,
// freely modify the receiver. However, the Clone and EncodeEntry methods will
// be called concurrently and shouldn't modify the receiver.
#Encoder: _
