// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.uber.org/zap/zapcore

package zapcore

// A Level is a logging priority. Higher levels are more important.
#Level: string // #enumLevel

#enumLevel:
	#DebugLevel |
	#InfoLevel |
	#WarnLevel |
	#ErrorLevel |
	#DPanicLevel |
	#PanicLevel |
	#FatalLevel |
	_#_minLevel |
	_#_maxLevel |
	#InvalidLevel |
	_#_numLevels

#values_Level: {
	DebugLevel:   #DebugLevel
	InfoLevel:    #InfoLevel
	WarnLevel:    #WarnLevel
	ErrorLevel:   #ErrorLevel
	DPanicLevel:  #DPanicLevel
	PanicLevel:   #PanicLevel
	FatalLevel:   #FatalLevel, "_minLevel":    _#_minLevel, "_maxLevel": _#_maxLevel
	InvalidLevel: #InvalidLevel, "_numLevels": _#_numLevels
}

// DebugLevel logs are typically voluminous, and are usually disabled in
// production.
#DebugLevel: #Level & -1

// InfoLevel is the default logging priority.
#InfoLevel: #Level & 0

// WarnLevel logs are more important than Info, but don't need individual
// human review.
#WarnLevel: #Level & 1

// ErrorLevel logs are high-priority. If an application is running smoothly,
// it shouldn't generate any error-level logs.
#ErrorLevel: #Level & 2

// DPanicLevel logs are particularly important errors. In development the
// logger panics after writing the message.
#DPanicLevel: #Level & 3

// PanicLevel logs a message, then panics.
#PanicLevel: #Level & 4

// FatalLevel logs a message, then calls os.Exit(1).
#FatalLevel: #Level & 5
_#_minLevel: #Level & -1
_#_maxLevel: #Level & 5

// InvalidLevel is an invalid value for Level.
//
// Core implementations may panic if they see messages of this level.
#InvalidLevel: #Level & 6

_#leveledEnabler: _

// LevelEnabler decides whether a given logging level is enabled when logging a
// message.
//
// Enablers are intended to be used to implement deterministic filters;
// concerns like sampling are better implemented as a Core.
//
// Each concrete Level value implements a static LevelEnabler which returns
// true for itself and all higher logging levels. For example WarnLevel.Enabled()
// will return true for WarnLevel, ErrorLevel, DPanicLevel, PanicLevel, and
// FatalLevel, but return false for InfoLevel and DebugLevel.
#LevelEnabler: _
