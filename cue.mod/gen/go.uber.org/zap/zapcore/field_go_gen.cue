// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.uber.org/zap/zapcore

package zapcore

// A FieldType indicates which member of the Field union struct should be used
// and how it should be serialized.
#FieldType: uint8 // #enumFieldType

#enumFieldType:
	#UnknownType |
	#ArrayMarshalerType |
	#ObjectMarshalerType |
	#BinaryType |
	#BoolType |
	#ByteStringType |
	#Complex128Type |
	#Complex64Type |
	#DurationType |
	#Float64Type |
	#Float32Type |
	#Int64Type |
	#Int32Type |
	#Int16Type |
	#Int8Type |
	#StringType |
	#TimeType |
	#TimeFullType |
	#Uint64Type |
	#Uint32Type |
	#Uint16Type |
	#Uint8Type |
	#UintptrType |
	#ReflectType |
	#NamespaceType |
	#StringerType |
	#ErrorType |
	#SkipType |
	#InlineMarshalerType

#values_FieldType: {
	UnknownType:         #UnknownType
	ArrayMarshalerType:  #ArrayMarshalerType
	ObjectMarshalerType: #ObjectMarshalerType
	BinaryType:          #BinaryType
	BoolType:            #BoolType
	ByteStringType:      #ByteStringType
	Complex128Type:      #Complex128Type
	Complex64Type:       #Complex64Type
	DurationType:        #DurationType
	Float64Type:         #Float64Type
	Float32Type:         #Float32Type
	Int64Type:           #Int64Type
	Int32Type:           #Int32Type
	Int16Type:           #Int16Type
	Int8Type:            #Int8Type
	StringType:          #StringType
	TimeType:            #TimeType
	TimeFullType:        #TimeFullType
	Uint64Type:          #Uint64Type
	Uint32Type:          #Uint32Type
	Uint16Type:          #Uint16Type
	Uint8Type:           #Uint8Type
	UintptrType:         #UintptrType
	ReflectType:         #ReflectType
	NamespaceType:       #NamespaceType
	StringerType:        #StringerType
	ErrorType:           #ErrorType
	SkipType:            #SkipType
	InlineMarshalerType: #InlineMarshalerType
}

// UnknownType is the default field type. Attempting to add it to an encoder will panic.
#UnknownType: #FieldType & 0

// ArrayMarshalerType indicates that the field carries an ArrayMarshaler.
#ArrayMarshalerType: #FieldType & 1

// ObjectMarshalerType indicates that the field carries an ObjectMarshaler.
#ObjectMarshalerType: #FieldType & 2

// BinaryType indicates that the field carries an opaque binary blob.
#BinaryType: #FieldType & 3

// BoolType indicates that the field carries a bool.
#BoolType: #FieldType & 4

// ByteStringType indicates that the field carries UTF-8 encoded bytes.
#ByteStringType: #FieldType & 5

// Complex128Type indicates that the field carries a complex128.
#Complex128Type: #FieldType & 6

// Complex64Type indicates that the field carries a complex64.
#Complex64Type: #FieldType & 7

// DurationType indicates that the field carries a time.Duration.
#DurationType: #FieldType & 8

// Float64Type indicates that the field carries a float64.
#Float64Type: #FieldType & 9

// Float32Type indicates that the field carries a float32.
#Float32Type: #FieldType & 10

// Int64Type indicates that the field carries an int64.
#Int64Type: #FieldType & 11

// Int32Type indicates that the field carries an int32.
#Int32Type: #FieldType & 12

// Int16Type indicates that the field carries an int16.
#Int16Type: #FieldType & 13

// Int8Type indicates that the field carries an int8.
#Int8Type: #FieldType & 14

// StringType indicates that the field carries a string.
#StringType: #FieldType & 15

// TimeType indicates that the field carries a time.Time that is
// representable by a UnixNano() stored as an int64.
#TimeType: #FieldType & 16

// TimeFullType indicates that the field carries a time.Time stored as-is.
#TimeFullType: #FieldType & 17

// Uint64Type indicates that the field carries a uint64.
#Uint64Type: #FieldType & 18

// Uint32Type indicates that the field carries a uint32.
#Uint32Type: #FieldType & 19

// Uint16Type indicates that the field carries a uint16.
#Uint16Type: #FieldType & 20

// Uint8Type indicates that the field carries a uint8.
#Uint8Type: #FieldType & 21

// UintptrType indicates that the field carries a uintptr.
#UintptrType: #FieldType & 22

// ReflectType indicates that the field carries an interface{}, which should
// be serialized using reflection.
#ReflectType: #FieldType & 23

// NamespaceType signals the beginning of an isolated namespace. All
// subsequent fields should be added to the new namespace.
#NamespaceType: #FieldType & 24

// StringerType indicates that the field carries a fmt.Stringer.
#StringerType: #FieldType & 25

// ErrorType indicates that the field carries an error.
#ErrorType: #FieldType & 26

// SkipType indicates that the field is a no-op.
#SkipType: #FieldType & 27

// InlineMarshalerType indicates that the field carries an ObjectMarshaler
// that should be inlined.
#InlineMarshalerType: #FieldType & 28

// A Field is a marshaling operation used to add a key-value pair to a logger's
// context. Most fields are lazily marshaled, so it's inexpensive to add fields
// to disabled debug-level log statements.
#Field: {
	Key:       string
	Type:      #FieldType
	Integer:   int64
	String:    string
	Interface: _ @go(,interface{})
}
