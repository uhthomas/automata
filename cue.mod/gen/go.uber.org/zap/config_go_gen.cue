// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.uber.org/zap

package zap

import "go.uber.org/zap/zapcore"

// SamplingConfig sets a sampling strategy for the logger. Sampling caps the
// global CPU and I/O load that logging puts on your process while attempting
// to preserve a representative subset of your logs.
//
// If specified, the Sampler will invoke the Hook after each decision.
//
// Values configured here are per-second. See zapcore.NewSamplerWithOptions for
// details.
#SamplingConfig: {
	initial:    int @go(Initial)
	thereafter: int @go(Thereafter)
}

// Config offers a declarative way to construct a logger. It doesn't do
// anything that can't be done with New, Options, and the various
// zapcore.WriteSyncer and zapcore.Core wrappers, but it's a simpler way to
// toggle common options.
//
// Note that Config intentionally supports only the most common options. More
// unusual logging setups (logging to network connections or message queues,
// splitting output between multiple files, etc.) are possible, but require
// direct use of the zapcore package. For sample code, see the package-level
// BasicConfiguration and AdvancedConfiguration examples.
//
// For an example showing runtime log level changes, see the documentation for
// AtomicLevel.
#Config: {
	// Development puts the logger in development mode, which changes the
	// behavior of DPanicLevel and takes stacktraces more liberally.
	development: bool @go(Development)

	// DisableCaller stops annotating logs with the calling function's file
	// name and line number. By default, all logs are annotated.
	disableCaller: bool @go(DisableCaller)

	// DisableStacktrace completely disables automatic stacktrace capturing. By
	// default, stacktraces are captured for WarnLevel and above logs in
	// development and ErrorLevel and above in production.
	disableStacktrace: bool @go(DisableStacktrace)

	// Sampling sets a sampling policy. A nil SamplingConfig disables sampling.
	sampling?: null | #SamplingConfig @go(Sampling,*SamplingConfig)

	// Encoding sets the logger's encoding. Valid values are "json" and
	// "console", as well as any third-party encodings registered via
	// RegisterEncoder.
	encoding: string @go(Encoding)

	// EncoderConfig sets options for the chosen encoder. See
	// zapcore.EncoderConfig for details.
	encoderConfig: zapcore.#EncoderConfig @go(EncoderConfig)

	// OutputPaths is a list of URLs or file paths to write logging output to.
	// See Open for details.
	outputPaths: [...string] @go(OutputPaths,[]string)

	// ErrorOutputPaths is a list of URLs to write internal logger errors to.
	// The default is standard error.
	//
	// Note that this setting only affects internal errors; for sample code that
	// sends error-level logs to a different location from info- and debug-level
	// logs, see the package-level AdvancedConfiguration example.
	errorOutputPaths: [...string] @go(ErrorOutputPaths,[]string)

	// InitialFields is a collection of fields to add to the root logger.
	initialFields: {...} @go(InitialFields,map[string]interface{})
}
