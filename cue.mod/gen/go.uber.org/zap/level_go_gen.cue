// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go go.uber.org/zap

package zap

import "go.uber.org/zap/zapcore"

// DebugLevel logs are typically voluminous, and are usually disabled in
// production.
#DebugLevel: zapcore.#Level & -1

// InfoLevel is the default logging priority.
#InfoLevel: zapcore.#Level & 0

// WarnLevel logs are more important than Info, but don't need individual
// human review.
#WarnLevel: zapcore.#Level & 1

// ErrorLevel logs are high-priority. If an application is running smoothly,
// it shouldn't generate any error-level logs.
#ErrorLevel: zapcore.#Level & 2

// DPanicLevel logs are particularly important errors. In development the
// logger panics after writing the message.
#DPanicLevel: zapcore.#Level & 3

// PanicLevel logs a message, then panics.
#PanicLevel: zapcore.#Level & 4

// FatalLevel logs a message, then calls os.Exit(1).
#FatalLevel: zapcore.#Level & 5

// An AtomicLevel is an atomically changeable, dynamic logging level. It lets
// you safely change the log level of a tree of loggers (the root logger and
// any children created by adding context) at runtime.
//
// The AtomicLevel itself is an http.Handler that serves a JSON endpoint to
// alter its level.
//
// AtomicLevels must be created with the NewAtomicLevel constructor to allocate
// their internal atomic pointer.
#AtomicLevel: string
