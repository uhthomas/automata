// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/prometheus/client_golang/prometheus

package prometheus

// Labels represents a collection of label name -> value mappings. This type is
// commonly used with the With(Labels) and GetMetricWith(Labels) methods of
// metric vector Collectors, e.g.:
//
//	myVec.With(Labels{"code": "404", "method": "GET"}).Add(42)
//
// The other use-case is the specification of constant label pairs in Opts or to
// create a Desc.
#Labels: {[string]: string}

// ConstrainedLabels represents a label name and its constrain function
// to normalize label values. This type is commonly used when constructing
// metric vector Collectors.
#ConstrainedLabel: {
	Name: string
}

// ConstrainableLabels is an interface that allows creating of labels that can
// be optionally constrained.
//
//	prometheus.V2().NewCounterVec(CounterVecOpts{
//	  CounterOpts: {...}, // Usual CounterOpts fields
//	  VariableLabels: []ConstrainedLabels{
//	    {Name: "A"},
//	    {Name: "B", Constraint: func(v string) string { ... }},
//	  },
//	})
#ConstrainableLabels: _

// ConstrainedLabels represents a collection of label name -> constrain function
// to normalize label values. This type is commonly used when constructing
// metric vector Collectors.
#ConstrainedLabels: [...#ConstrainedLabel]

// UnconstrainedLabels represents collection of label without any constraint on
// their value. Thus, it is simply a collection of label names.
//
//	UnconstrainedLabels([]string{ "A", "B" })
//
// is equivalent to
//
//	ConstrainedLabels {
//	  { Name: "A" },
//	  { Name: "B" },
//	}
#UnconstrainedLabels: [...string]

_#reservedLabelPrefix: "__"
