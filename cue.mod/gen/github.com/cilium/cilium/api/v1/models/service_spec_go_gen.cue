// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/api/v1/models

package models

// ServiceSpec Configuration of a service
//
// swagger:model ServiceSpec
#ServiceSpec: {
	// List of backend addresses
	"backend-addresses": [...null | #BackendAddress] @go(BackendAddresses,[]*BackendAddress)

	// flags
	flags?: null | #ServiceSpecFlags @go(Flags,*ServiceSpecFlags)

	// Frontend address
	// Required: true
	"frontend-address"?: null | #FrontendAddress @go(FrontendAddress,*FrontendAddress)

	// Unique identification
	id?: int64 @go(ID)

	// Update all services selecting the backends with their given states
	// (id and frontend are ignored)
	//
	updateServices?: bool @go(UpdateServices)
}

// ServiceSpecFlags Optional service configuration flags
//
// swagger:model ServiceSpecFlags
#ServiceSpecFlags: {
	// Service cluster
	cluster?: string @go(Cluster)

	// Service external traffic policy
	// Enum: ["Cluster","Local"]
	extTrafficPolicy?: string @go(ExtTrafficPolicy)

	// Service health check node port
	healthCheckNodePort?: uint16 @go(HealthCheckNodePort)

	// Service internal traffic policy
	// Enum: ["Cluster","Local"]
	intTrafficPolicy?: string @go(IntTrafficPolicy)

	// Service name  (e.g. Kubernetes service name)
	name?: string @go(Name)

	// Service namespace  (e.g. Kubernetes namespace)
	namespace?: string @go(Namespace)

	// Service protocol NAT policy
	// Enum: ["None","Nat46","Nat64"]
	natPolicy?: string @go(NatPolicy)

	// Service external traffic policy (deprecated in favor of extTrafficPolicy)
	// Enum: ["Cluster","Local"]
	trafficPolicy?: string @go(TrafficPolicy)

	// Service type
	// Enum: ["ClusterIP","NodePort","ExternalIPs","HostPort","LoadBalancer","LocalRedirect"]
	type?: string @go(Type)
}

// ServiceSpecFlagsExtTrafficPolicyCluster captures enum value "Cluster"
#ServiceSpecFlagsExtTrafficPolicyCluster: "Cluster"

// ServiceSpecFlagsExtTrafficPolicyLocal captures enum value "Local"
#ServiceSpecFlagsExtTrafficPolicyLocal: "Local"

// ServiceSpecFlagsIntTrafficPolicyCluster captures enum value "Cluster"
#ServiceSpecFlagsIntTrafficPolicyCluster: "Cluster"

// ServiceSpecFlagsIntTrafficPolicyLocal captures enum value "Local"
#ServiceSpecFlagsIntTrafficPolicyLocal: "Local"

// ServiceSpecFlagsNatPolicyNone captures enum value "None"
#ServiceSpecFlagsNatPolicyNone: "None"

// ServiceSpecFlagsNatPolicyNat46 captures enum value "Nat46"
#ServiceSpecFlagsNatPolicyNat46: "Nat46"

// ServiceSpecFlagsNatPolicyNat64 captures enum value "Nat64"
#ServiceSpecFlagsNatPolicyNat64: "Nat64"

// ServiceSpecFlagsTrafficPolicyCluster captures enum value "Cluster"
#ServiceSpecFlagsTrafficPolicyCluster: "Cluster"

// ServiceSpecFlagsTrafficPolicyLocal captures enum value "Local"
#ServiceSpecFlagsTrafficPolicyLocal: "Local"

// ServiceSpecFlagsTypeClusterIP captures enum value "ClusterIP"
#ServiceSpecFlagsTypeClusterIP: "ClusterIP"

// ServiceSpecFlagsTypeNodePort captures enum value "NodePort"
#ServiceSpecFlagsTypeNodePort: "NodePort"

// ServiceSpecFlagsTypeExternalIPs captures enum value "ExternalIPs"
#ServiceSpecFlagsTypeExternalIPs: "ExternalIPs"

// ServiceSpecFlagsTypeHostPort captures enum value "HostPort"
#ServiceSpecFlagsTypeHostPort: "HostPort"

// ServiceSpecFlagsTypeLoadBalancer captures enum value "LoadBalancer"
#ServiceSpecFlagsTypeLoadBalancer: "LoadBalancer"

// ServiceSpecFlagsTypeLocalRedirect captures enum value "LocalRedirect"
#ServiceSpecFlagsTypeLocalRedirect: "LocalRedirect"
