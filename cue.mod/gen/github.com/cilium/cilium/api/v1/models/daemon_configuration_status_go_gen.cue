// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/api/v1/models

package models

// DaemonConfigurationStatus Response to a daemon configuration request. Contains the addressing
// information, k8s, node monitor and immutable and mutable configuration
// settings.
//
// swagger:model DaemonConfigurationStatus
#DaemonConfigurationStatus: {
	// Maximum IPv4 GRO size on workload facing devices
	GROIPv4MaxSize?: int64 @go(GROIPV4MaxSize)

	// Maximum IPv6 GRO size on workload facing devices
	GROMaxSize?: int64

	// Maximum IPv4 GSO size on workload facing devices
	GSOIPv4MaxSize?: int64 @go(GSOIPV4MaxSize)

	// Maximum IPv6 GSO size on workload facing devices
	GSOMaxSize?: int64

	// addressing
	addressing?: null | #NodeAddressing @go(Addressing,*NodeAddressing)

	// Config map which contains all the active daemon configurations
	daemonConfigurationMap?: {...} @go(DaemonConfigurationMap,map[string]interface{})

	// datapath mode
	datapathMode?: #DatapathMode @go(DatapathMode)

	// MTU on workload facing devices
	deviceMTU?: int64 @go(DeviceMTU)

	// Configured compatibility mode for --egress-multi-home-ip-rule-compat
	"egress-multi-home-ip-rule-compat"?: bool @go(EgressMultiHomeIPRuleCompat)

	// True if BBR is enabled only in the host network namespace
	enableBBRHostNamespaceOnly?: bool @go(EnableBBRHostNamespaceOnly)

	// Enable route MTU for pod netns when CNI chaining is used
	enableRouteMTUForCNIChaining?: bool @go(EnableRouteMTUForCNIChaining)

	// Immutable configuration (read-only)
	immutable?: #ConfigurationMap @go(Immutable)

	// Install ingress/egress routes through uplink on host for Pods when working with
	// delegated IPAM plugin.
	//
	installUplinkRoutesForDelegatedIPAM?: bool @go(InstallUplinkRoutesForDelegatedIPAM)

	// Comma-separated list of IP ports should be reserved in the workload network namespace
	ipLocalReservedPorts?: string @go(IPLocalReservedPorts)

	// Configured IPAM mode
	"ipam-mode"?: string @go(IpamMode)

	// k8s configuration
	"k8s-configuration"?: string @go(K8sConfiguration)

	// k8s endpoint
	"k8s-endpoint"?: string @go(K8sEndpoint)

	// kvstore configuration
	kvstoreConfiguration?: null | #KVstoreConfiguration @go(KvstoreConfiguration,*KVstoreConfiguration)

	// masquerade
	masquerade?: bool @go(Masquerade)

	// masquerade protocols
	masqueradeProtocols?: null | #DaemonConfigurationStatusMasqueradeProtocols @go(MasqueradeProtocols,*DaemonConfigurationStatusMasqueradeProtocols)

	// Status of the node monitor
	nodeMonitor?: null | #MonitorStatus @go(NodeMonitor,*MonitorStatus)

	// Currently applied configuration
	realized?: null | #DaemonConfigurationSpec @go(Realized,*DaemonConfigurationSpec)

	// MTU for network facing routes
	routeMTU?: int64 @go(RouteMTU)
}

// DaemonConfigurationStatusMasqueradeProtocols Status of masquerading feature
//
// swagger:model DaemonConfigurationStatusMasqueradeProtocols
#DaemonConfigurationStatusMasqueradeProtocols: {
	// Status of masquerading for IPv4 traffic
	ipv4?: bool @go(IPV4)

	// Status of masquerading for IPv6 traffic
	ipv6?: bool @go(IPV6)
}
