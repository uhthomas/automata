// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2

package v2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	slimv1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

#CiliumEgressGatewayPolicy: {
	metav1.#TypeMeta

	// +k8s:openapi-gen=false
	// +deepequal-gen=false
	metadata: metav1.#ObjectMeta             @go(ObjectMeta)
	spec?:    #CiliumEgressGatewayPolicySpec @go(Spec)
}

// CiliumEgressGatewayPolicyList is a list of CiliumEgressGatewayPolicy objects.
#CiliumEgressGatewayPolicyList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is a list of CiliumEgressGatewayPolicy.
	items: [...#CiliumEgressGatewayPolicy] @go(Items,[]CiliumEgressGatewayPolicy)
}

// +kubebuilder:validation:Pattern=`^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/(12[0-8]|1[0-1][0-9]|[1-9][0-9]|[0-9]))$`
// + The regex for the IPv6 CIDR range (second part of the OR) was taken from
// + https://blog.markhatton.co.uk/2011/03/15/regular-expressions-for-ip-addresses-cidr-ranges-and-hostnames/`
#CIDR: string

#CiliumEgressGatewayPolicySpec: {
	// Egress represents a list of rules by which egress traffic is
	// filtered from the source pods.
	selectors: [...#EgressRule] @go(Selectors,[]EgressRule)

	// DestinationCIDRs is a list of destination CIDRs for destination IP addresses.
	// If a destination IP matches any one CIDR, it will be selected.
	destinationCIDRs: [...#CIDR] @go(DestinationCIDRs,[]CIDR)

	// ExcludedCIDRs is a list of destination CIDRs that will be excluded
	// from the egress gateway redirection and SNAT logic.
	// Should be a subset of destinationCIDRs otherwise it will not have any
	// effect.
	//
	// +kubebuilder:validation:Optional
	excludedCIDRs: [...#CIDR] @go(ExcludedCIDRs,[]CIDR)

	// EgressGateway is the gateway node responsible for SNATing traffic.
	// In case multiple nodes are a match for the given set of labels, the first node
	// in lexical ordering based on their name will be selected.
	egressGateway?: null | #EgressGateway @go(EgressGateway,*EgressGateway)

	// Optional list of gateway nodes responsible for SNATing traffic.
	// If this field has any entries the contents of the egressGateway field will be ignored.
	// In case multiple nodes are a match for the given set of labels in each entry,
	// the first node in lexical ordering based on their name will be selected for each entry.
	//
	// +kubebuilder:validation:Optional
	// +kubebuilder:default={}
	egressGateways?: [...#EgressGateway] @go(EgressGateways,[]EgressGateway)
}

// EgressGateway identifies the node that should act as egress gateway for a
// given egress Gateway policy. In addition to that it also specifies the
// configuration of said node (which egress IP or network interface should be
// used to SNAT traffic).
#EgressGateway: {
	// This is a label selector which selects the node that should act as
	// egress gateway for the given policy.
	// In case multiple nodes are selected, only the first one in the
	// lexical ordering over the node names will be used.
	// This field follows standard label selector semantics.
	//
	// +kubebuilder:validation:Required
	nodeSelector?: null | slimv1.#LabelSelector @go(NodeSelector,*slimv1.LabelSelector)

	// Interface is the network interface to which the egress IP address
	// that the traffic is SNATed with is assigned.
	//
	// Example:
	// When set to "eth1", matching egress traffic will be redirected to the
	// node matching the NodeSelector field and SNATed with the first IPv4
	// address assigned to the eth1 interface.
	//
	// When none of the Interface or EgressIP fields is specified, the
	// policy will use the first IPv4 assigned to the interface with the
	// default route.
	interface?: string @go(Interface)

	// EgressIP is the source IP address that the egress traffic is SNATed
	// with.
	//
	// Example:
	// When set to "192.168.1.100", matching egress traffic will be
	// redirected to the node matching the NodeSelector field and SNATed
	// with IP address 192.168.1.100.
	//
	// When none of the Interface or EgressIP fields is specified, the
	// policy will use the first IPv4 assigned to the interface with the
	// default route.
	//
	// +kubebuilder:validation:Format=ipv4
	egressIP?: string @go(EgressIP)
}

#EgressRule: {
	// Selects Namespaces using cluster-scoped labels. This field follows standard label
	// selector semantics; if present but empty, it selects all namespaces.
	namespaceSelector?: null | slimv1.#LabelSelector @go(NamespaceSelector,*slimv1.LabelSelector)

	// This is a label selector which selects Pods. This field follows standard label
	// selector semantics; if present but empty, it selects all pods.
	podSelector?: null | slimv1.#LabelSelector @go(PodSelector,*slimv1.LabelSelector)

	// This is a label selector which selects Pods by Node. This field follows standard label
	// selector semantics; if present but empty, it selects all nodes.
	nodeSelector?: null | slimv1.#LabelSelector @go(NodeSelector,*slimv1.LabelSelector)
}
