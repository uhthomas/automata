// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2

package v2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	slimv1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumLoadBalancerIPPool is a Kubernetes third-party resource which
// is used to defined pools of IPs which the operator can use to to allocate
// and advertise IPs for Services of type LoadBalancer.
#CiliumLoadBalancerIPPool: {
	metav1.#TypeMeta

	// +deepequal-gen=false
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec is a human readable description for a BGP load balancer
	// ip pool.
	//
	// +kubebuilder:validation:Required
	spec?: #CiliumLoadBalancerIPPoolSpec @go(Spec)

	// Status is the status of the IP Pool.
	//
	// It might be possible for users to define overlapping IP Pools, we can't validate or enforce non-overlapping pools
	// during object creation. The Cilium operator will do this validation and update the status to reflect the ability
	// to allocate IPs from this pool.
	//
	// +deepequal-gen=false
	// +kubebuilder:validation:Optional
	status: #CiliumLoadBalancerIPPoolStatus @go(Status)
}

// CiliumLoadBalancerIPPoolList is a list of
// CiliumLoadBalancerIPPool objects.
#CiliumLoadBalancerIPPoolList: {
	metav1.#TypeMeta
	metadata: metav1.#ListMeta @go(ListMeta)

	// Items is a list of CiliumBGPLoadBalancerIPPools.
	items: [...#CiliumLoadBalancerIPPool] @go(Items,[]CiliumLoadBalancerIPPool)
}

// CiliumLoadBalancerIPPoolSpec is a human readable description for
// a load balancer IP pool.
#CiliumLoadBalancerIPPoolSpec: {
	// ServiceSelector selects a set of services which are eligible to receive IPs from this
	//
	// +kubebuilder:validation:Optional
	serviceSelector?: null | slimv1.#LabelSelector @go(ServiceSelector,*slimv1.LabelSelector)

	// AllowFirstLastIPs, if set to `Yes` or undefined means that the first and last IPs of each CIDR will be allocatable.
	// If `No`, these IPs will be reserved. This field is ignored for /{31,32} and /{127,128} CIDRs since
	// reserving the first and last IPs would make the CIDRs unusable.
	//
	// +kubebuilder:validation:Optional
	allowFirstLastIPs?: #AllowFirstLastIPType @go(AllowFirstLastIPs)

	// Blocks is a list of CIDRs comprising this IP Pool
	//
	// +kubebuilder:validation:Optional
	blocks?: [...#CiliumLoadBalancerIPPoolIPBlock] @go(Blocks,[]CiliumLoadBalancerIPPoolIPBlock)

	// Disabled, if set to true means that no new IPs will be allocated from this pool.
	// Existing allocations will not be removed from services.
	//
	// +kubebuilder:validation:Optional
	// +kubebuilder:default=false
	disabled: bool @go(Disabled)
}

// +kubebuilder:validation:Enum=Yes;No
#AllowFirstLastIPType: string // #enumAllowFirstLastIPType

#enumAllowFirstLastIPType:
	#AllowFirstLastIPNo |
	#AllowFirstLastIPYes

#AllowFirstLastIPNo:  #AllowFirstLastIPType & "No"
#AllowFirstLastIPYes: #AllowFirstLastIPType & "Yes"

// CiliumLoadBalancerIPPoolIPBlock describes a single IP block.
#CiliumLoadBalancerIPPoolIPBlock: {
	// +kubebuilder:validation:Format=cidr
	// +kubebuilder:validation:Optional
	cidr: #IPv4orIPv6CIDR @go(Cidr)

	// +kubebuilder:validation:Optional
	start?: string @go(Start)

	// +kubebuilder:validation:Optional
	stop?: string @go(Stop)
}

// CiliumLoadBalancerIPPoolStatus contains the status of a CiliumLoadBalancerIPPool.
#CiliumLoadBalancerIPPoolStatus: {
	// Current service state
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=type
	conditions?: [...metav1.#Condition] @go(Conditions,[]metav1.Condition)
}
