// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/operator/v1beta1

package v1beta1

import (
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VMUserSpec defines the desired state of VMUser
#VMUserSpec: {
	// Name of the VMUser object.
	// +optional
	name?: null | string @go(Name,*string)

	// UserName basic auth user name for accessing protected endpoint,
	// will be replaced with metadata.name of VMUser if omitted.
	// +optional
	username?: null | string @go(UserName,*string)

	// Password basic auth password for accessing protected endpoint.
	// +optional
	password?: null | string @go(Password,*string)

	// PasswordRef allows fetching password from user-create secret by its name and key.
	// +optional
	passwordRef?: null | v1.#SecretKeySelector @go(PasswordRef,*v1.SecretKeySelector)

	// TokenRef allows fetching token from user-created secrets by its name and key.
	// +optional
	tokenRef?: null | v1.#SecretKeySelector @go(TokenRef,*v1.SecretKeySelector)

	// GeneratePassword instructs operator to generate password for user
	// if spec.password if empty.
	// +optional
	generatePassword?: bool @go(GeneratePassword)

	// BearerToken Authorization header value for accessing protected endpoint.
	// +optional
	bearerToken?: null | string @go(BearerToken,*string)

	// TargetRefs - reference to endpoints, which user may access.
	targetRefs: [...#TargetRef] @go(TargetRefs,[]TargetRef)

	#VMUserConfigOptions

	// MetricLabels - additional labels for metrics exported by vmauth for given user.
	// +optional
	metric_labels?: {[string]: string} @go(MetricLabels,map[string]string)

	// DisableSecretCreation skips related secret creation for vmuser
	disable_secret_creation?: bool @go(DisableSecretCreation)
}

// TargetRef describes target for user traffic forwarding.
// one of target types can be chosen:
// crd or static per targetRef.
// user can define multiple targetRefs with different ref Types.
#TargetRef: {
	// CRD describes exist operator's CRD object,
	// operator generates access url based on CRD params.
	// +optional
	crd?: null | #CRDRef @go(CRD,*CRDRef)

	// Static - user defined url for traffic forward,
	// for instance http://vmsingle:8429
	// +optional
	static?: null | #StaticRef @go(Static,*StaticRef)

	// Paths - matched path to route.
	// +optional
	paths?: [...string] @go(Paths,[]string)
	hosts?: [...string] @go(Hosts,[]string)
	URLMapCommon?: #URLMapCommon

	// TargetPathSuffix allows to add some suffix to the target path
	// It allows to hide tenant configuration from user with crd as ref.
	// it also may contain any url encoded params.
	// +optional
	target_path_suffix?: string @go(TargetPathSuffix)

	// TargetRefBasicAuth allow an target endpoint to authenticate over basic authentication
	// +optional
	targetRefBasicAuth?: null | #TargetRefBasicAuth @go(TargetRefBasicAuth,*TargetRefBasicAuth)
}

// VMUserIPFilters defines filters for IP addresses
// supported only with enterprise version of [vmauth](https://docs.victoriametrics.com/vmauth#ip-filters)
#VMUserIPFilters: {
	deny_list?: [...string] @go(DenyList,[]string)
	allow_list?: [...string] @go(AllowList,[]string)
}

// CRDRef describe CRD target reference.
#CRDRef: {
	// Kind one of:
	// VMAgent,VMAlert, VMSingle, VMCluster/vmselect, VMCluster/vmstorage,VMCluster/vminsert  or VMAlertManager
	// +kubebuilder:validation:Enum=VMAgent;VMAlert;VMSingle;VMAlertManager;VMAlertmanager;VMCluster/vmselect;VMCluster/vmstorage;VMCluster/vminsert
	kind: string @go(Kind)

	// Name target CRD object name
	name: string @go(Name)

	// Namespace target CRD object namespace.
	namespace: string @go(Namespace)
}

// StaticRef - user-defined routing host address.
#StaticRef: {
	// URL http url for given staticRef.
	url?: string @go(URL)

	// URLs allows setting multiple urls for load-balancing at vmauth-side.
	// +optional
	urls?: [...string] @go(URLs,[]string)
}

// TargetRefBasicAuth target basic authentication
#TargetRefBasicAuth: {
	// The secret in the service scrape namespace that contains the username
	// for authentication.
	// It must be at them same namespace as CRD
	username: v1.#SecretKeySelector @go(Username)

	// The secret in the service scrape namespace that contains the password
	// for authentication.
	// It must be at them same namespace as CRD
	password: v1.#SecretKeySelector @go(Password)
}

// VMUserStatus defines the observed state of VMUser
#VMUserStatus: {
	#StatusMetadata
}

// VMUser is the Schema for the vmusers API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.updateStatus"
// +kubebuilder:printcolumn:name="Sync Error",type="string",JSONPath=".status.reason"
// +genclient
#VMUser: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #VMUserSpec        @go(Spec)
	status?:   #VMUserStatus      @go(Status)
}

// VMUserList contains a list of VMUser
#VMUserList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMUser] @go(Items,[]VMUser)
}
