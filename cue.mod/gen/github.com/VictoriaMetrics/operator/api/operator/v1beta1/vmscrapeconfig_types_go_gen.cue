// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/operator/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
)

// VMScrapeConfig specifies a set of targets and parameters describing how to scrape them.
// +operator-sdk:gen-csv:customresourcedefinitions.displayName="VMScrapeConfig"
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=vmscrapeconfigs,scope=Namespaced
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.updateStatus"
// +kubebuilder:printcolumn:name="Sync Error",type="string",JSONPath=".status.reason"
// +genclient
#VMScrapeConfig: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta  @go(ObjectMeta)
	spec?:     #VMScrapeConfigSpec @go(Spec)
	status?:   #ScrapeObjectStatus @go(Status)
}

// VMScrapeConfigSpec defines the desired state of VMScrapeConfig
#VMScrapeConfigSpec: {
	// StaticConfigs defines a list of static targets with a common label set.
	// +optional
	staticConfigs?: [...#StaticConfig] @go(StaticConfigs,[]StaticConfig)

	// FileSDConfigs defines a list of file service discovery configurations.
	// +optional
	fileSDConfigs?: [...#FileSDConfig] @go(FileSDConfigs,[]FileSDConfig)

	// HTTPSDConfigs defines a list of HTTP service discovery configurations.
	// +optional
	httpSDConfigs?: [...#HTTPSDConfig] @go(HTTPSDConfigs,[]HTTPSDConfig)

	// KubernetesSDConfigs defines a list of Kubernetes service discovery configurations.
	// +optional
	kubernetesSDConfigs?: [...#KubernetesSDConfig] @go(KubernetesSDConfigs,[]KubernetesSDConfig)

	// ConsulSDConfigs defines a list of Consul service discovery configurations.
	// +optional
	consulSDConfigs?: [...#ConsulSDConfig] @go(ConsulSDConfigs,[]ConsulSDConfig)

	// DNSSDConfigs defines a list of DNS service discovery configurations.
	// +optional
	dnsSDConfigs?: [...#DNSSDConfig] @go(DNSSDConfigs,[]DNSSDConfig)

	// EC2SDConfigs defines a list of EC2 service discovery configurations.
	// +optional
	ec2SDConfigs?: [...#EC2SDConfig] @go(EC2SDConfigs,[]EC2SDConfig)

	// AzureSDConfigs defines a list of Azure service discovery configurations.
	// +optional
	azureSDConfigs?: [...#AzureSDConfig] @go(AzureSDConfigs,[]AzureSDConfig)

	// GCESDConfigs defines a list of GCE service discovery configurations.
	// +optional
	gceSDConfigs?: [...#GCESDConfig] @go(GCESDConfigs,[]GCESDConfig)

	// OpenStackSDConfigs defines a list of OpenStack service discovery configurations.
	// +optional
	openstackSDConfigs?: [...#OpenStackSDConfig] @go(OpenStackSDConfigs,[]OpenStackSDConfig)

	// DigitalOceanSDConfigs defines a list of DigitalOcean service discovery configurations.
	// +optional
	digitalOceanSDConfigs?: [...#DigitalOceanSDConfig] @go(DigitalOceanSDConfigs,[]DigitalOceanSDConfig)

	#EndpointScrapeParams

	#EndpointRelabelings

	#EndpointAuth
}

// StaticConfig defines a static configuration.
// See [here](https://docs.victoriametrics.com/sd_configs#static_configs)
#StaticConfig: {
	// List of targets for this static configuration.
	// +optional
	targets?: [...string] @go(Targets,[]string)

	// Labels assigned to all metrics scraped from the targets.
	// +mapType:=atomic
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)
}

// FileSDConfig defines a file service discovery configuration.
// See [here](https://docs.victoriametrics.com/sd_configs#file_sd_configs)
#FileSDConfig: {
	// List of files to be used for file discovery.
	// +kubebuilder:validation:MinItems:=1
	files: [...string] @go(Files,[]string)
}

// HTTPSDConfig defines a HTTP service discovery configuration.
// See [here](https://docs.victoriametrics.com/sd_configs#http_sd_configs)
#HTTPSDConfig: {
	// URL from which the targets are fetched.
	// +kubebuilder:validation:MinLength:=1
	// +kubebuilder:validation:Pattern:="^http(s)?://.+$"
	url: string @go(URL)

	// BasicAuth information to use on every scrape request.
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Authorization header to use on every scrape request.
	// +optional
	authorization?: null | #Authorization @go(Authorization,*Authorization)

	// TLS configuration to use on every scrape request
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	// +optional
	proxyURL?: null | string @go(ProxyURL,*string)

	// ProxyClientConfig configures proxy auth settings for scraping
	// See [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)
	// +optional
	proxy_client_config?: null | #ProxyAuth @go(ProxyClientConfig,*ProxyAuth)
}

// KubernetesSDConfig allows retrieving scrape targets from Kubernetes' REST API.
// See [here](https://docs.victoriametrics.com/sd_configs#kubernetes_sd_configs)
// +k8s:openapi-gen=true
#KubernetesSDConfig: {
	// The API server address consisting of a hostname or IP address followed
	// by an optional port number.
	// If left empty, assuming process is running inside
	// of the cluster. It will discover API servers automatically and use the pod's
	// CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
	// +optional
	apiServer?: null | string @go(APIServer,*string)

	// Role of the Kubernetes entities that should be discovered.
	// +required
	role: string @go(Role)

	// BasicAuth information to use on every scrape request.
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Authorization header to use on every scrape request.
	// +optional
	authorization?: null | #Authorization @go(Authorization,*Authorization)

	// TLS configuration to use on every scrape request
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// OAuth2 defines auth configuration
	// +optional
	oauth2?: null | #OAuth2 @go(OAuth2,*OAuth2)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	// +optional
	proxyURL?: null | string @go(ProxyURL,*string)

	// ProxyClientConfig configures proxy auth settings for scraping
	// See [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)
	// +optional
	proxy_client_config?: null | #ProxyAuth @go(ProxyClientConfig,*ProxyAuth)

	// Configure whether HTTP requests follow HTTP 3xx redirects.
	// +optional
	followRedirects?: null | bool @go(FollowRedirects,*bool)

	// Optional namespace discovery. If omitted, discover targets across all namespaces.
	// +optional
	namespaces?: null | #NamespaceDiscovery @go(Namespaces,*NamespaceDiscovery)

	// AttachMetadata configures metadata attaching from service discovery
	// +optional
	attach_metadata?: #AttachMetadata @go(AttachMetadata)

	// Selector to select objects.
	// +optional
	// +listType=map
	// +listMapKey=role
	selectors?: [...#K8SSelectorConfig] @go(Selectors,[]K8SSelectorConfig)
}

// K8SSelectorConfig is Kubernetes Selector Config
#K8SSelectorConfig: {
	// +kubebuilder:validation:Required
	role:   string @go(Role)
	label?: string @go(Label)
	field?: string @go(Field)
}

// NamespaceDiscovery is the configuration for discovering
// Kubernetes namespaces.
#NamespaceDiscovery: {
	// Includes the namespace in which the pod exists to the list of watched namespaces.
	// +optional
	ownNamespace?: null | bool @go(IncludeOwnNamespace,*bool)

	// List of namespaces where to watch for resources.
	// If empty and `ownNamespace` isn't true, watch for resources in all namespaces.
	// +optional
	names?: [...string] @go(Names,[]string)
}

// ConsulSDConfig defines a Consul service discovery configuration.
// See [here](https://docs.victoriametrics.com/sd_configs/#consul_sd_configs)
// +k8s:openapi-gen=true
#ConsulSDConfig: {
	// A valid string consisting of a hostname or IP followed by an optional port number.
	// +kubebuilder:validation:MinLength=1
	// +required
	server: string @go(Server)

	// Consul ACL TokenRef, if not provided it will use the ACL from the local Consul Agent.
	// +optional
	tokenRef?: null | corev1.#SecretKeySelector @go(TokenRef,*corev1.SecretKeySelector)

	// Consul Datacenter name, if not provided it will use the local Consul Agent Datacenter.
	// +optional
	datacenter?: null | string @go(Datacenter,*string)

	// Namespaces are only supported in Consul Enterprise.
	// +optional
	namespace?: null | string @go(Namespace,*string)

	// Admin Partitions are only supported in Consul Enterprise.
	// +optional
	partition?: null | string @go(Partition,*string)

	// HTTP Scheme default "http"
	// +kubebuilder:validation:Enum=HTTP;HTTPS
	// +optional
	scheme?: null | string @go(Scheme,*string)

	// A list of services for which targets are retrieved. If omitted, all services are scraped.
	// +listType:=atomic
	// +optional
	services?: [...string] @go(Services,[]string)

	// An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list.
	//+listType:=atomic
	// +optional
	tags?: [...string] @go(Tags,[]string)

	// The string by which Consul tags are joined into the tag label.
	// If unset, use its default value.
	// +optional
	tagSeparator?: null | string @go(TagSeparator,*string)

	// Node metadata key/value pairs to filter nodes for a given service.
	// +mapType:=atomic
	// +optional
	nodeMeta?: {[string]: string} @go(NodeMeta,map[string]string)

	// Allow stale Consul results (see https://developer.hashicorp.com/consul/api-docs/features/consistency). Will reduce load on Consul.
	// If unset, use its default value.
	// +optional
	allowStale?: null | bool @go(AllowStale,*bool)

	// Filter defines filter for /v1/catalog/services requests
	// See https://developer.hashicorp.com/consul/api-docs/features/filtering
	// +optional
	filter?: string @go(Filter)

	// BasicAuth information to use on every scrape request.
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Authorization header to use on every scrape request.
	// +optional
	authorization?: null | #Authorization @go(Authorization,*Authorization)

	// OAuth2 defines auth configuration
	// +optional
	oauth2?: null | #OAuth2 @go(OAuth2,*OAuth2)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	// +optional
	proxyURL?: null | string @go(ProxyURL,*string)

	// ProxyClientConfig configures proxy auth settings for scraping
	// See [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)
	// +optional
	proxy_client_config?: null | #ProxyAuth @go(ProxyClientConfig,*ProxyAuth)

	// Configure whether HTTP requests follow HTTP 3xx redirects.
	// If unset, use its default value.
	// +optional
	followRedirects?: null | bool @go(FollowRedirects,*bool)

	// TLS configuration to use on every scrape request
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)
}

// DNSSDConfig allows specifying a set of DNS domain names which are periodically queried to discover a list of targets.
// The DNS servers to be contacted are read from /etc/resolv.conf.
// See [here](https://docs.victoriametrics.com/sd_configs#dns_sd_configs)
// +k8s:openapi-gen=true
#DNSSDConfig: {
	// A list of DNS domain names to be queried.
	// +kubebuilder:validation:MinItems:=1
	names: [...string] @go(Names,[]string)
	type?: null | string @go(Type,*string)

	// The port number used if the query type is not SRV
	// Ignored for SRV records
	// +optional
	port?: null | int @go(Port,*int)
}

// EC2SDConfig allow retrieving scrape targets from AWS EC2 instances.
// The private IP address is used by default, but may be changed to the public IP address with relabeling.
// The IAM credentials used must have the ec2:DescribeInstances permission to discover scrape targets.
// See [here](https://docs.victoriametrics.com/sd_configs#ec2_sd_configs)
// +k8s:openapi-gen=true
#EC2SDConfig: {
	// The AWS region
	// +optional
	region?: null | string @go(Region,*string)

	// AccessKey is the AWS API key.
	// +optional
	accessKey?: null | corev1.#SecretKeySelector @go(AccessKey,*corev1.SecretKeySelector)

	// SecretKey is the AWS API secret.
	// +optional
	secretKey?: null | corev1.#SecretKeySelector @go(SecretKey,*corev1.SecretKeySelector)

	// AWS Role ARN, an alternative to using AWS API keys.
	// +optional
	roleARN?: null | string @go(RoleARN,*string)

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	// +optional
	port?: null | int @go(Port,*int)

	// Filters can be used optionally to filter the instance list by other criteria.
	// Available filter criteria can be found here:
	// https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html
	// Filter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html
	// +optional
	filters?: [...null | #EC2Filter] @go(Filters,[]*EC2Filter)
}

// EC2Filter is the configuration for filtering EC2 instances.
#EC2Filter: {
	name: string @go(Name)
	values: [...string] @go(Values,[]string)
}

// AzureSDConfig allow retrieving scrape targets from Azure VMs.
// See [here](https://docs.victoriametrics.com/sd_configs#azure_sd_configs)
// +k8s:openapi-gen=true
#AzureSDConfig: {
	// The Azure environment.
	// +optional
	environment?: null | string @go(Environment,*string)

	// # The authentication method, either OAuth or ManagedIdentity.
	// See https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview
	// +kubebuilder:validation:Enum=OAuth;ManagedIdentity
	// +optional
	authenticationMethod?: null | string @go(AuthenticationMethod,*string)

	// The subscription ID. Always required.
	// +kubebuilder:validation:MinLength=1
	// +required
	subscriptionID: string @go(SubscriptionID)

	// Optional tenant ID. Only required with the OAuth authentication method.
	// +optional
	tenantID?: null | string @go(TenantID,*string)

	// Optional client ID. Only required with the OAuth authentication method.
	// +optional
	clientID?: null | string @go(ClientID,*string)

	// Optional client secret. Only required with the OAuth authentication method.
	// +optional
	clientSecret?: null | corev1.#SecretKeySelector @go(ClientSecret,*corev1.SecretKeySelector)

	// Optional resource group name. Limits discovery to this resource group.
	// +optional
	resourceGroup?: null | string @go(ResourceGroup,*string)

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	// +optional
	port?: null | int @go(Port,*int)
}

// GCESDConfig configures scrape targets from GCP GCE instances.
// The private IP address is used by default, but may be changed to
// the public IP address with relabeling.
// See [here](https://docs.victoriametrics.com/sd_configs#gce_sd_configs)
//
// The GCE service discovery will load the Google Cloud credentials
// from the file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable.
// See https://cloud.google.com/kubernetes-engine/docs/tutorials/authenticating-to-cloud-platform
// +k8s:openapi-gen=true
#GCESDConfig: {
	// The Google Cloud Project ID
	// +kubebuilder:validation:MinLength:=1
	// +required
	project: string @go(Project)

	// The zone of the scrape targets. If you need multiple zones use multiple GCESDConfigs.
	// +kubebuilder:validation:MinLength:=1
	// +required
	zone: string @go(Zone)

	// Filter can be used optionally to filter the instance list by other criteria
	// Syntax of this filter is described in the filter query parameter section:
	// https://cloud.google.com/compute/docs/reference/latest/instances/list
	// +optional
	filter?: null | string @go(Filter,*string)

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	// +optional
	port?: null | int @go(Port,*int)

	// The tag separator is used to separate the tags on concatenation
	// +optional
	tagSeparator?: null | string @go(TagSeparator,*string)
}

// OpenStackSDConfig allow retrieving scrape targets from OpenStack Nova instances.
// See [here](https://docs.victoriametrics.com/sd_configs#openstack_sd_configs)
// +k8s:openapi-gen=true
#OpenStackSDConfig: {
	// The OpenStack role of entities that should be discovered.
	// +kubebuilder:validation:Enum=Instance;instance;Hypervisor;hypervisor
	// +required
	role: string @go(Role)

	// The OpenStack Region.
	// +kubebuilder:validation:MinLength:=1
	// +required
	region: string @go(Region)

	// IdentityEndpoint specifies the HTTP endpoint that is required to work with
	// the Identity API of the appropriate version.
	// +optional
	identityEndpoint?: null | string @go(IdentityEndpoint,*string)

	// Username is required if using Identity V2 API. Consult with your provider's
	// control panel to discover your account's username.
	// In Identity V3, either userid or a combination of username
	// and domainId or domainName are needed
	// +optional
	username?: null | string @go(Username,*string)

	// UserID
	// +optional
	userid?: null | string @go(UserID,*string)

	// Password for the Identity V2 and V3 APIs. Consult with your provider's
	// control panel to discover your account's preferred method of authentication.
	// +optional
	password?: null | corev1.#SecretKeySelector @go(Password,*corev1.SecretKeySelector)

	// At most one of domainId and domainName must be provided if using username
	// with Identity V3. Otherwise, either are optional.
	// +optional
	domainName?: null | string @go(DomainName,*string)

	// DomainID
	// +optional
	domainID?: null | string @go(DomainID,*string)

	// The ProjectId and ProjectName fields are optional for the Identity V2 API.
	// Some providers allow you to specify a ProjectName instead of the ProjectId.
	// Some require both. Your provider's authentication policies will determine
	// how these fields influence authentication.
	// +optional
	projectName?: null | string @go(ProjectName,*string)

	//  ProjectID
	// +optional
	projectID?: null | string @go(ProjectID,*string)

	// The ApplicationCredentialID or ApplicationCredentialName fields are
	// required if using an application credential to authenticate. Some providers
	// allow you to create an application credential to authenticate rather than a
	// password.
	// +optional
	applicationCredentialName?: null | string @go(ApplicationCredentialName,*string)

	// ApplicationCredentialID
	// +optional
	applicationCredentialId?: null | string @go(ApplicationCredentialID,*string)

	// The applicationCredentialSecret field is required if using an application
	// credential to authenticate.
	// +optional
	applicationCredentialSecret?: null | corev1.#SecretKeySelector @go(ApplicationCredentialSecret,*corev1.SecretKeySelector)

	// Whether the service discovery should list all instances for all projects.
	// It is only relevant for the 'instance' role and usually requires admin permissions.
	// +optional
	allTenants?: null | bool @go(AllTenants,*bool)

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	// +optional
	port?: null | int @go(Port,*int)

	// Availability of the endpoint to connect to.
	// +kubebuilder:validation:Enum=Public;public;Admin;admin;Internal;internal
	// +optional
	availability?: null | string @go(Availability,*string)

	// TLS configuration to use on every scrape request
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)
}

// DigitalOceanSDConfig allow retrieving scrape targets from DigitalOcean's Droplets API.
// This service discovery uses the public IPv4 address by default, by that can be changed with relabeling.
// See [here](https://docs.victoriametrics.com/sd_configs#digitalocean_sd_configs)
// +k8s:openapi-gen=true
#DigitalOceanSDConfig: {
	// Authorization header to use on every scrape request.
	// +optional
	authorization?: null | #Authorization @go(Authorization,*Authorization)

	// OAuth2 defines auth configuration
	// +optional
	oauth2?: null | #OAuth2 @go(OAuth2,*OAuth2)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	// +optional
	proxyURL?: null | string @go(ProxyURL,*string)

	// ProxyClientConfig configures proxy auth settings for scraping
	// See [feature description](https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy)
	// +optional
	proxy_client_config?: null | #ProxyAuth @go(ProxyClientConfig,*ProxyAuth)

	// Configure whether HTTP requests follow HTTP 3xx redirects.
	// +optional
	followRedirects?: null | bool @go(FollowRedirects,*bool)

	// TLS configuration to use on every scrape request
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// The port to scrape metrics from.
	// +optional
	port?: null | int @go(Port,*int)
}

// VMScrapeConfigList contains a list of VMScrapeConfig
#VMScrapeConfigList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMScrapeConfig] @go(Items,[]VMScrapeConfig)
}
