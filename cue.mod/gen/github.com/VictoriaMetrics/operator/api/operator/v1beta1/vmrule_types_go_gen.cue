// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/operator/v1beta1

package v1beta1

import (
	"pkg.go.dev/net/url"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VMRuleSpec defines the desired state of VMRule
#VMRuleSpec: {
	// Groups list of group rules
	groups: [...#RuleGroup] @go(Groups,[]RuleGroup)
}

// RuleGroup is a list of sequentially evaluated recording and alerting rules.
// +k8s:openapi-gen=true
#RuleGroup: {
	// Name of group
	name: string @go(Name)

	// evaluation interval for group
	// +optional
	interval?: string @go(Interval)

	// Rules list of alert rules
	rules: [...#Rule] @go(Rules,[]Rule)

	// Limit the number of alerts an alerting rule and series a recording
	// rule can produce
	// +optional
	limit?: int @go(Limit)

	// Optional
	// Group will be evaluated at the exact offset in the range of [0...interval].
	eval_offset?: string @go(EvalOffset)

	// Optional
	// Adjust the `time` parameter of group evaluation requests to compensate intentional query delay from the datasource.
	eval_delay?: string @go(EvalDelay)

	// Optional
	// The evaluation timestamp will be aligned with group's interval,
	// instead of using the actual timestamp that evaluation happens at.
	// It is enabled by default to get more predictable results
	// and to visually align with graphs plotted via Grafana or vmui.
	eval_alignment?: null | bool @go(EvalAlignment,*bool)

	// Concurrency defines how many rules execute at once.
	// +optional
	concurrency?: int @go(Concurrency)

	// Labels optional list of labels added to every rule within a group.
	// It has priority over the external labels.
	// Labels are commonly used for adding environment
	// or tenant-specific tag.
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// ExtraFilterLabels optional list of label filters applied to every rule's
	// request within a group. Is compatible only with VM datasource.
	// See more details [here](https://docs.victoriametrics.com/#prometheus-querying-api-enhancements)
	// Deprecated, use params instead
	// +optional
	extra_filter_labels?: {[string]: string} @go(ExtraFilterLabels,map[string]string)

	// Tenant id for group, can be used only with enterprise version of vmalert.
	// See more details [here](https://docs.victoriametrics.com/vmalert#multitenancy).
	// +optional
	tenant?: string @go(Tenant)

	// Params optional HTTP URL parameters added to each rule request
	// +optional
	params?: url.#Values @go(Params)

	// Type defines datasource type for enterprise version of vmalert
	// possible values - prometheus,graphite,vlogs
	// +optional
	type?: string @go(Type)

	// Headers contains optional HTTP headers added to each rule request
	// Must be in form `header-name: value`
	// For example:
	//  headers:
	//    - "CustomHeader: foo"
	//    - "CustomHeader2: bar"
	// +optional
	headers?: [...string] @go(Headers,[]string)

	// NotifierHeaders contains optional HTTP headers added to each alert request which will send to notifier
	// Must be in form `header-name: value`
	// For example:
	//  headers:
	//    - "CustomHeader: foo"
	//    - "CustomHeader2: bar"
	// +optional
	notifier_headers?: [...string] @go(NotifierHeaders,[]string)
}

// Rule describes an alerting or recording rule.
// +k8s:openapi-gen=true
#Rule: {
	// Record represents a query, that will be recorded to dataSource
	// +optional
	record?: string @go(Record)

	// Alert is a name for alert
	// +optional
	alert?: string @go(Alert)

	// Expr is query, that will be evaluated at dataSource
	// +optional
	expr?: string @go(Expr)

	// Debug enables logging for rule
	// it useful for tracking
	// +optional
	debug?: null | bool @go(Debug,*bool)

	// For evaluation interval in time.Duration format
	// 30s, 1m, 1h  or nanoseconds
	// +optional
	for?: string @go(For)

	// KeepFiringFor will make alert continue firing for this long
	// even when the alerting expression no longer has results.
	// Use time.Duration format, 30s, 1m, 1h  or nanoseconds
	// +optional
	keep_firing_for?: string @go(KeepFiringFor)

	// Labels will be added to rule configuration
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Annotations will be added to rule configuration
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// UpdateEntriesLimit defines max number of rule's state updates stored in memory.
	// Overrides `-rule.updateEntriesLimit` in vmalert.
	// +optional
	update_entries_limit?: null | int @go(UpdateEntriesLimit,*int)
}

// VMRuleStatus defines the observed state of VMRule
#VMRuleStatus: {
	#StatusMetadata
}

// VMRule defines rule records for vmalert application
// +operator-sdk:gen-csv:customresourcedefinitions.displayName="VMRule"
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=vmrules,scope=Namespaced
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.updateStatus"
// +kubebuilder:printcolumn:name="Sync Error",type="string",JSONPath=".status.reason"
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VMRule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #VMRuleSpec        @go(Spec)

	// +optional
	status?: #VMRuleStatus @go(Status)
}

// VMRuleList contains a list of VMRule
#VMRuleList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)

	// Items list of VMRule
	items: [...null | #VMRule] @go(Items,[]*VMRule)
}
