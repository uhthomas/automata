// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/operator/v1beta1

package v1beta1

import (
	v12 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VMAuthSpec defines the desired state of VMAuth
#VMAuthSpec: _

// VMAuthUnauthorizedUserAccessSpec defines unauthorized_user section configuration for vmauth
#VMAuthUnauthorizedUserAccessSpec: {
	// URLPrefix defines prefix prefix for destination
	// +kubebuilder:validation:Schemaless
	// +kubebuilder:pruning:PreserveUnknownFields
	url_prefix?: #StringOrArray @go(URLPrefix)
	url_map?: [...#UnauthorizedAccessConfigURLMap] @go(URLMap,[]UnauthorizedAccessConfigURLMap)

	#VMUserConfigOptions

	// MetricLabels - additional labels for metrics exported by vmauth for given user.
	// +optional
	metric_labels?: {[string]: string} @go(MetricLabels,map[string]string)
}

// UnauthorizedAccessConfigURLMap defines element of url_map routing configuration
// For UnauthorizedAccessConfig and VMAuthUnauthorizedUserAccessSpec.URLMap
#UnauthorizedAccessConfigURLMap: {
	// SrcPaths is an optional list of regular expressions, which must match the request path.
	src_paths?: [...string] @go(SrcPaths,[]string)

	// SrcHosts is an optional list of regular expressions, which must match the request hostname.
	src_hosts?: [...string] @go(SrcHosts,[]string)

	// UrlPrefix contains backend url prefixes for the proxied request url.
	// URLPrefix defines prefix prefix for destination
	// +kubebuilder:validation:Schemaless
	// +kubebuilder:pruning:PreserveUnknownFields
	url_prefix?: #StringOrArray @go(URLPrefix)

	#URLMapCommon
}

// URLMapCommon contains common fields for unauthorized user and user in vmuser
#URLMapCommon: {
	// SrcQueryArgs is an optional list of query args, which must match request URL query args.
	src_query_args?: [...string] @go(SrcQueryArgs,[]string)

	// SrcHeaders is an optional list of headers, which must match request headers.
	src_headers?: [...string] @go(SrcHeaders,[]string)

	// DiscoverBackendIPs instructs discovering URLPrefix backend IPs via DNS.
	discover_backend_ips?: null | bool @go(DiscoverBackendIPs,*bool)

	// RequestHeaders represent additional http headers, that vmauth uses
	// in form of ["header_key: header_value"]
	// multiple values for header key:
	// ["header_key: value1,value2"]
	// it's available since 1.68.0 version of vmauth
	// +optional
	headers?: [...string] @go(RequestHeaders,[]string)

	// ResponseHeaders represent additional http headers, that vmauth adds for request response
	// in form of ["header_key: header_value"]
	// multiple values for header key:
	// ["header_key: value1,value2"]
	// it's available since 1.93.0 version of vmauth
	// +optional
	response_headers?: [...string] @go(ResponseHeaders,[]string)

	// RetryStatusCodes defines http status codes in numeric format for request retries
	// Can be defined per target or at VMUser.spec level
	// e.g. [429,503]
	// +optional
	retry_status_codes?: [...int] @go(RetryStatusCodes,[]int)

	// LoadBalancingPolicy defines load balancing policy to use for backend urls.
	// Supported policies: least_loaded, first_available.
	// See [here](https://docs.victoriametrics.com/vmauth#load-balancing) for more details (default "least_loaded")
	// +optional
	// +kubebuilder:validation:Enum=least_loaded;first_available
	load_balancing_policy?: null | string @go(LoadBalancingPolicy,*string)

	// DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
	// See [here](https://docs.victoriametrics.com/vmauth#dropping-request-path-prefix) for more details.
	// +optional
	drop_src_path_prefix_parts?: null | int @go(DropSrcPathPrefixParts,*int)
}

// VMUserConfigOptions defines configuration options for VMUser object
#VMUserConfigOptions: {
	// DefaultURLs backend url for non-matching paths filter
	// usually used for default backend with error message
	default_url?: [...string] @go(DefaultURLs,[]string)

	// TLSConfig defines tls configuration for the backend connection
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// IPFilters defines per target src ip filters
	// supported only with enterprise version of [vmauth](https://docs.victoriametrics.com/vmauth/#ip-filters)
	// +optional
	ip_filters?: #VMUserIPFilters @go(IPFilters)

	// DiscoverBackendIPs instructs discovering URLPrefix backend IPs via DNS.
	discover_backend_ips?: null | bool @go(DiscoverBackendIPs,*bool)

	// Headers represent additional http headers, that vmauth uses
	// in form of ["header_key: header_value"]
	// multiple values for header key:
	// ["header_key: value1,value2"]
	// it's available since 1.68.0 version of vmauth
	// +optional
	headers?: [...string] @go(Headers,[]string)

	// ResponseHeaders represent additional http headers, that vmauth adds for request response
	// in form of ["header_key: header_value"]
	// multiple values for header key:
	// ["header_key: value1,value2"]
	// it's available since 1.93.0 version of vmauth
	// +optional
	response_headers?: [...string] @go(ResponseHeaders,[]string)

	// RetryStatusCodes defines http status codes in numeric format for request retries
	// e.g. [429,503]
	// +optional
	retry_status_codes?: [...int] @go(RetryStatusCodes,[]int)

	// MaxConcurrentRequests defines max concurrent requests per user
	// 300 is default value for vmauth
	// +optional
	max_concurrent_requests?: null | int @go(MaxConcurrentRequests,*int)

	// LoadBalancingPolicy defines load balancing policy to use for backend urls.
	// Supported policies: least_loaded, first_available.
	// See [here](https://docs.victoriametrics.com/vmauth#load-balancing) for more details (default "least_loaded")
	// +optional
	// +kubebuilder:validation:Enum=least_loaded;first_available
	load_balancing_policy?: null | string @go(LoadBalancingPolicy,*string)

	// DropSrcPathPrefixParts is the number of `/`-delimited request path prefix parts to drop before proxying the request to backend.
	// See [here](https://docs.victoriametrics.com/vmauth#dropping-request-path-prefix) for more details.
	// +optional
	drop_src_path_prefix_parts?: null | int @go(DropSrcPathPrefixParts,*int)

	// DumpRequestOnErrors instructs vmauth to return detailed request params to the client
	// if routing rules don't allow to forward request to the backends.
	// Useful for debugging `src_hosts` and `src_headers` based routing rules
	//
	// available since v1.107.0 vmauth version
	// +optional
	dump_request_on_errors?: null | bool @go(DumpRequestOnErrors,*bool)
}

// EmbeddedIngress describes ingress configuration options.
#EmbeddedIngress: {
	// ClassName defines ingress class name for VMAuth
	// +optional
	class_name?: null | string @go(ClassName,*string)

	#EmbeddedObjectMetadata

	// TlsHosts configures TLS access for ingress, tlsSecretName must be defined for it.
	tlsHosts?: [...string] @go(TlsHosts,[]string)

	// TlsSecretName defines secretname at the VMAuth namespace with cert and key
	// https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
	// +optional
	tlsSecretName?: string @go(TlsSecretName)

	// ExtraRules - additional rules for ingress,
	// must be checked for correctness by user.
	// +optional
	extraRules?: [...v12.#IngressRule] @go(ExtraRules,[]v12.IngressRule)

	// ExtraTLS - additional TLS configuration for ingress
	// must be checked for correctness by user.
	// +optional
	extraTls?: [...v12.#IngressTLS] @go(ExtraTLS,[]v12.IngressTLS)

	// Host defines ingress host parameter for default rule
	// It will be used, only if TlsHosts is empty
	// +optional
	host?: string @go(Host)
}

// VMAuthStatus defines the observed state of VMAuth
#VMAuthStatus: {
	#StatusMetadata
}

// VMAuth is the Schema for the vmauths API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.updateStatus",description="Current status of update rollout"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="ReplicaCount",type="integer",JSONPath=".spec.replicaCount",description="The desired replicas number of Alertmanagers"
#VMAuth: _

// VMAuthList contains a list of VMAuth
#VMAuthList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMAuth] @go(Items,[]VMAuth)
}
