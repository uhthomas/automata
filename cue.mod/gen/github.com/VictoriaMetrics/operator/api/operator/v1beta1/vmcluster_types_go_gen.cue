// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/operator/v1beta1

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/api/core/v1"
)

// VMClusterSpec defines the desired state of VMCluster
// +k8s:openapi-gen=true
#VMClusterSpec: _

// VMCluster is fast, cost-effective and scalable time-series database.
// Cluster version with
// +operator-sdk:gen-csv:customresourcedefinitions.displayName="VMCluster App"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Deployment,apps"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Statefulset,apps"
// +operator-sdk:gen-csv:customresourcedefinitions.resources="Service,v1"
// +genclient
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vmclusters,scope=Namespaced
// +kubebuilder:printcolumn:name="Insert Count",type="string",JSONPath=".spec.vminsert.replicaCount",description="replicas of VMInsert"
// +kubebuilder:printcolumn:name="Storage Count",type="string",JSONPath=".spec.vmstorage.replicaCount",description="replicas of VMStorage"
// +kubebuilder:printcolumn:name="Select Count",type="string",JSONPath=".spec.vmselect.replicaCount",description="replicas of VMSelect"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.updateStatus",description="Current status of cluster"
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VMCluster: _

// VMClusterStatus defines the observed state of VMCluster
#VMClusterStatus: {
	// Deprecated.
	updateFailCount: int @go(UpdateFailCount)

	// Deprecated.
	lastSync?: string @go(LastSync)

	#StatusMetadata

	// LegacyStatus is deprecated and will be removed at v0.52.0 version
	clusterStatus?: #UpdateStatus @go(LegacyStatus)
}

// VMClusterList contains a list of VMCluster
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#VMClusterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#VMCluster] @go(Items,[]VMCluster)
}

// VMSelect defines configuration section for vmselect components of the victoria-metrics cluster
#VMSelect: {
	// PodMetadata configures Labels and Annotations which are propagated to the VMSelect pods.
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// LogFormat for VMSelect to be configured with.
	// default or json
	// +optional
	// +kubebuilder:validation:Enum=default;json
	logFormat?: string @go(LogFormat)

	// LogLevel for VMSelect to be configured with.
	// +optional
	// +kubebuilder:validation:Enum=INFO;WARN;ERROR;FATAL;PANIC
	logLevel?: string @go(LogLevel)

	// CacheMountPath allows to add cache persistent for VMSelect,
	// will use "/cache" as default if not specified.
	// +optional
	cacheMountPath?: string @go(CacheMountPath)

	// Storage - add persistent volume for cacheMountPath
	// its useful for persistent cache
	// use storage instead of persistentVolume.
	// +deprecated
	// +optional
	persistentVolume?: null | #StorageSpec @go(Storage,*StorageSpec)

	// StorageSpec - add persistent volume claim for cacheMountPath
	// its needed for persistent cache
	// +optional
	storage?: null | #StorageSpec @go(StorageSpec,*StorageSpec)

	// ClusterNativePort for multi-level cluster setup.
	// More [details](https://docs.victoriametrics.com/Cluster-VictoriaMetrics#multi-level-cluster-setup)
	// +optional
	clusterNativeListenPort?: string @go(ClusterNativePort)

	// ServiceSpec that will be added to vmselect service spec
	// +optional
	serviceSpec?: null | #AdditionalServiceSpec @go(ServiceSpec,*AdditionalServiceSpec)

	// ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec
	// +optional
	serviceScrapeSpec?: null | #VMServiceScrapeSpec @go(ServiceScrapeSpec,*VMServiceScrapeSpec)

	// PodDisruptionBudget created by operator
	// +optional
	podDisruptionBudget?: null | #EmbeddedPodDisruptionBudgetSpec @go(PodDisruptionBudget,*EmbeddedPodDisruptionBudgetSpec)

	#EmbeddedProbes

	// Configures horizontal pod autoscaling.
	// Note, enabling this option disables vmselect to vmselect communication. In most cases it's not an issue.
	// +optional
	hpa?: null | #EmbeddedHPA @go(HPA,*EmbeddedHPA)

	// RollingUpdateStrategy defines strategy for application updates
	// Default is OnDelete, in this case operator handles update process
	// Can be changed for RollingUpdate
	// +optional
	rollingUpdateStrategy?: appsv1.#StatefulSetUpdateStrategyType @go(RollingUpdateStrategy)

	// ClaimTemplates allows adding additional VolumeClaimTemplates for StatefulSet
	claimTemplates?: [...v1.#PersistentVolumeClaim] @go(ClaimTemplates,[]v1.PersistentVolumeClaim)

	#CommonDefaultableParams

	#CommonApplicationDeploymentParams
}

#InsertPorts: {
	// GraphitePort listen port
	// +optional
	graphitePort?: string @go(GraphitePort)

	// InfluxPort listen port
	// +optional
	influxPort?: string @go(InfluxPort)

	// OpenTSDBHTTPPort for http connections.
	// +optional
	openTSDBHTTPPort?: string @go(OpenTSDBHTTPPort)

	// OpenTSDBPort for tcp and udp listen
	// +optional
	openTSDBPort?: string @go(OpenTSDBPort)
}

#VMInsert: {
	// PodMetadata configures Labels and Annotations which are propagated to the VMInsert pods.
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// LogFormat for VMInsert to be configured with.
	// default or json
	// +optional
	// +kubebuilder:validation:Enum=default;json
	logFormat?: string @go(LogFormat)

	// LogLevel for VMInsert to be configured with.
	// +optional
	// +kubebuilder:validation:Enum=INFO;WARN;ERROR;FATAL;PANIC
	logLevel?: string @go(LogLevel)

	// InsertPorts - additional listen ports for data ingestion.
	insertPorts?: null | #InsertPorts @go(InsertPorts,*InsertPorts)

	// ClusterNativePort for multi-level cluster setup.
	// More [details](https://docs.victoriametrics.com/Cluster-VictoriaMetrics#multi-level-cluster-setup)
	// +optional
	clusterNativeListenPort?: string @go(ClusterNativePort)

	// ServiceSpec that will be added to vminsert service spec
	// +optional
	serviceSpec?: null | #AdditionalServiceSpec @go(ServiceSpec,*AdditionalServiceSpec)

	// ServiceScrapeSpec that will be added to vminsert VMServiceScrape spec
	// +optional
	serviceScrapeSpec?: null | #VMServiceScrapeSpec @go(ServiceScrapeSpec,*VMServiceScrapeSpec)

	// UpdateStrategy - overrides default update strategy.
	// +kubebuilder:validation:Enum=Recreate;RollingUpdate
	// +optional
	updateStrategy?: null | appsv1.#DeploymentStrategyType @go(UpdateStrategy,*appsv1.DeploymentStrategyType)

	// RollingUpdate - overrides deployment update params.
	// +optional
	rollingUpdate?: null | appsv1.#RollingUpdateDeployment @go(RollingUpdate,*appsv1.RollingUpdateDeployment)

	// PodDisruptionBudget created by operator
	// +optional
	podDisruptionBudget?: null | #EmbeddedPodDisruptionBudgetSpec @go(PodDisruptionBudget,*EmbeddedPodDisruptionBudgetSpec)

	#EmbeddedProbes

	// HPA defines kubernetes PodAutoScaling configuration version 2.
	hpa?: null | #EmbeddedHPA @go(HPA,*EmbeddedHPA)

	#CommonDefaultableParams

	#CommonApplicationDeploymentParams
}

#VMStorage: {
	// PodMetadata configures Labels and Annotations which are propagated to the VMStorage pods.
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// LogFormat for VMStorage to be configured with.
	// default or json
	// +optional
	// +kubebuilder:validation:Enum=default;json
	logFormat?: string @go(LogFormat)

	// LogLevel for VMStorage to be configured with.
	// +optional
	// +kubebuilder:validation:Enum=INFO;WARN;ERROR;FATAL;PANIC
	logLevel?: string @go(LogLevel)

	// StorageDataPath - path to storage data
	// +optional
	storageDataPath?: string @go(StorageDataPath)

	// Storage - add persistent volume for StorageDataPath
	// its useful for persistent cache
	// +optional
	storage?: null | #StorageSpec @go(Storage,*StorageSpec)

	// VMInsertPort for VMInsert connections
	// +optional
	vmInsertPort?: string @go(VMInsertPort)

	// VMSelectPort for VMSelect connections
	// +optional
	vmSelectPort?: string @go(VMSelectPort)

	// VMBackup configuration for backup
	// +optional
	vmBackup?: null | #VMBackup @go(VMBackup,*VMBackup)

	// ServiceSpec that will be create additional service for vmstorage
	// +optional
	serviceSpec?: null | #AdditionalServiceSpec @go(ServiceSpec,*AdditionalServiceSpec)

	// ServiceScrapeSpec that will be added to vmstorage VMServiceScrape spec
	// +optional
	serviceScrapeSpec?: null | #VMServiceScrapeSpec @go(ServiceScrapeSpec,*VMServiceScrapeSpec)

	// PodDisruptionBudget created by operator
	// +optional
	podDisruptionBudget?: null | #EmbeddedPodDisruptionBudgetSpec @go(PodDisruptionBudget,*EmbeddedPodDisruptionBudgetSpec)

	#EmbeddedProbes

	// MaintenanceInsertNodeIDs - excludes given node ids from insert requests routing, must contain pod suffixes - for pod-0, id will be 0 and etc.
	// lets say, you have pod-0, pod-1, pod-2, pod-3. to exclude pod-0 and pod-3 from insert routing, define nodeIDs: [0,3].
	// Useful at storage expanding, when you want to rebalance some data at cluster.
	// +optional
	maintenanceInsertNodeIDs?: [...int32] @go(MaintenanceInsertNodeIDs,[]int32)

	// MaintenanceInsertNodeIDs - excludes given node ids from select requests routing, must contain pod suffixes - for pod-0, id will be 0 and etc.
	maintenanceSelectNodeIDs?: [...int32] @go(MaintenanceSelectNodeIDs,[]int32)

	// RollingUpdateStrategy defines strategy for application updates
	// Default is OnDelete, in this case operator handles update process
	// Can be changed for RollingUpdate
	// +optional
	rollingUpdateStrategy?: appsv1.#StatefulSetUpdateStrategyType @go(RollingUpdateStrategy)

	// ClaimTemplates allows adding additional VolumeClaimTemplates for StatefulSet
	claimTemplates?: [...v1.#PersistentVolumeClaim] @go(ClaimTemplates,[]v1.PersistentVolumeClaim)

	#CommonDefaultableParams

	#CommonApplicationDeploymentParams
}

#VMBackup: {
	// AcceptEULA accepts enterprise feature usage, must be set to true.
	// otherwise backupmanager cannot be added to single/cluster version.
	// https://victoriametrics.com/legal/esa/
	// +optional
	acceptEULA?: bool @go(AcceptEULA)

	// SnapshotCreateURL overwrites url for snapshot create
	// +optional
	snapshotCreateURL?: string @go(SnapshotCreateURL)

	// SnapShotDeleteURL overwrites url for snapshot delete
	// +optional
	snapshotDeleteURL?: string @go(SnapShotDeleteURL)

	// Defines number of concurrent workers. Higher concurrency may reduce backup duration (default 10)
	// +optional
	concurrency?: null | int32 @go(Concurrency,*int32)

	// Defines destination for backup
	destination?: string @go(Destination)

	// DestinationDisableSuffixAdd - disables suffix adding for cluster version backups
	// each vmstorage backup must have unique backup folder
	// so operator adds POD_NAME as suffix for backup destination folder.
	// +optional
	destinationDisableSuffixAdd?: bool @go(DestinationDisableSuffixAdd)

	// Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set
	// +optional
	customS3Endpoint?: null | string @go(CustomS3Endpoint,*string)

	// CredentialsSecret is secret in the same namespace for access to remote storage
	// The secret is mounted into /etc/vm/creds.
	// +optional
	credentialsSecret?: null | v1.#SecretKeySelector @go(CredentialsSecret,*v1.SecretKeySelector)

	// Defines if hourly backups disabled (default false)
	// +optional
	disableHourly?: null | bool @go(DisableHourly,*bool)

	// Defines if daily backups disabled (default false)
	// +optional
	disableDaily?: null | bool @go(DisableDaily,*bool)

	// Defines if weekly backups disabled (default false)
	// +optional
	disableWeekly?: null | bool @go(DisableWeekly,*bool)

	// Defines if monthly backups disabled (default false)
	// +optional
	disableMonthly?: null | bool @go(DisableMonthly,*bool)

	// Image - docker image settings for VMBackuper
	// +optional
	image?: #Image @go(Image)

	// Port for health check connections
	port?: string @go(Port)

	// LogFormat for VMBackup to be configured with.
	// default or json
	// +optional
	// +kubebuilder:validation:Enum=default;json
	logFormat?: null | string @go(LogFormat,*string)

	// LogLevel for VMBackup to be configured with.
	// +optional
	// +kubebuilder:validation:Enum=INFO;WARN;ERROR;FATAL;PANIC
	logLevel?: null | string @go(LogLevel,*string)

	// Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	// if not defined default resources from operator config will be used
	// +optional
	resources?: v1.#ResourceRequirements @go(Resources)

	// extra args like maxBytesPerSecond default 0
	// +optional
	extraArgs?: {[string]: string} @go(ExtraArgs,map[string]string)

	// +optional
	extraEnvs?: [...v1.#EnvVar] @go(ExtraEnvs,[]v1.EnvVar)

	// VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition.
	// VolumeMounts specified will be appended to other VolumeMounts in the vmbackupmanager container,
	// that are generated as a result of StorageSpec objects.
	// +optional
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// Restore Allows to enable restore options for pod
	// Read [more](https://docs.victoriametrics.com/vmbackupmanager#restore-commands)
	// +optional
	restore?: null | #VMRestore @go(Restore,*VMRestore)
}

// VMRestore defines config options for vmrestore start-up
#VMRestore: {
	// OnStart defines configuration for restore on pod start
	// +optional
	onStart?: null | #VMRestoreOnStartConfig @go(OnStart,*VMRestoreOnStartConfig)
}

// VMRestoreOnStartConfig controls vmrestore setting
#VMRestoreOnStartConfig: {
	// Enabled defines if restore on start enabled
	// +optional
	enabled?: bool @go(Enabled)
}

// VMAuthLoadBalancer configures vmauth as a load balancer
// for the requests
#VMAuthLoadBalancer: {
	enabled?:                bool                    @go(Enabled)
	disableInsertBalancing?: bool                    @go(DisableInsertBalancing)
	disableSelectBalancing?: bool                    @go(DisableSelectBalancing)
	spec?:                   #VMAuthLoadBalancerSpec @go(Spec)
}

// VMAuthLoadBalancerSpec defines configuration spec for VMAuth used as load-balancer
// for VMCluster component
#VMAuthLoadBalancerSpec: {
	// Common params for scheduling
	// PodMetadata configures Labels and Annotations which are propagated to the vmauth lb pods.
	podMetadata?: null | #EmbeddedObjectMetadata @go(PodMetadata,*EmbeddedObjectMetadata)

	// AdditionalServiceSpec defines service override configuration for vmauth lb deployment
	// it'll be only applied to vmclusterlb- service
	serviceSpec?: null | #AdditionalServiceSpec @go(AdditionalServiceSpec,*AdditionalServiceSpec)

	// ServiceScrapeSpec that will be added to vmauthlb VMServiceScrape spec
	// +optional
	serviceScrapeSpec?: null | #VMServiceScrapeSpec @go(ServiceScrapeSpec,*VMServiceScrapeSpec)

	// LogFormat for vmauth
	// default or json
	// +optional
	// +kubebuilder:validation:Enum=default;json
	logFormat?: string @go(LogFormat)

	// LogLevel for vmauth container.
	// +optional
	// +kubebuilder:validation:Enum=INFO;WARN;ERROR;FATAL;PANIC
	logLevel?: string @go(LogLevel)

	#CommonApplicationDeploymentParams

	#CommonDefaultableParams

	#EmbeddedProbes

	// PodDisruptionBudget created by operator
	// +optional
	podDisruptionBudget?: null | #EmbeddedPodDisruptionBudgetSpec @go(PodDisruptionBudget,*EmbeddedPodDisruptionBudgetSpec)
}
