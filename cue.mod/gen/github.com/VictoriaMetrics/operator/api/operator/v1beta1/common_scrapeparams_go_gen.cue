// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/VictoriaMetrics/operator/api/operator/v1beta1

package v1beta1

import "k8s.io/api/core/v1"

// AttachMetadata configures metadata attachment
#AttachMetadata: {
	// Node instructs vmagent to add node specific metadata from service discovery
	// Valid for roles: pod, endpoints, endpointslice.
	// +optional
	node?: null | bool @go(Node,*bool)
}

// VMScrapeParams defines scrape target configuration that compatible only with VictoriaMetrics scrapers
// VMAgent and VMSingle
#VMScrapeParams: {
	// DisableCompression
	// +optional
	disable_compression?: null | bool @go(DisableCompression,*bool)

	// disable_keepalive allows disabling HTTP keep-alive when scraping targets.
	// By default, HTTP keep-alive is enabled, so TCP connections to scrape targets
	// could be re-used.
	// See https://docs.victoriametrics.com/vmagent#scrape_config-enhancements
	// +optional
	disable_keep_alive?: null | bool @go(DisableKeepAlive,*bool)

	// +optional
	no_stale_markers?: null | bool @go(DisableStaleMarkers,*bool)

	// +optional
	stream_parse?: null | bool @go(StreamParse,*bool)

	// +optional
	scrape_align_interval?: null | string @go(ScrapeAlignInterval,*string)

	// +optional
	scrape_offset?: null | string @go(ScrapeOffset,*string)

	// ProxyClientConfig configures proxy auth settings for scraping
	// See feature description https://docs.victoriametrics.com/vmagent#scraping-targets-via-a-proxy
	// +optional
	proxy_client_config?: null | #ProxyAuth @go(ProxyClientConfig,*ProxyAuth)

	// Headers allows sending custom headers to scrape targets
	// must be in of semicolon separated header with it's value
	// eg:
	// headerName: headerValue
	// vmagent supports since 1.79.0 version
	// +optional
	headers?: [...string] @go(Headers,[]string)
}

// ProxyAuth represent proxy auth config
// Only VictoriaMetrics scrapers supports it.
// See https://github.com/VictoriaMetrics/VictoriaMetrics/commit/a6a71ef861444eb11fe8ec6d2387f0fc0c4aea87
#ProxyAuth: {
	basic_auth?:        null | #BasicAuth            @go(BasicAuth,*BasicAuth)
	bearer_token?:      null | v1.#SecretKeySelector @go(BearerToken,*v1.SecretKeySelector)
	bearer_token_file?: string                       @go(BearerTokenFile)
	tls_config?:        null | #TLSConfig            @go(TLSConfig,*TLSConfig)
}

// OAuth2 defines OAuth2 configuration
#OAuth2: {
	// The secret or configmap containing the OAuth2 client id
	// +required
	client_id?: #SecretOrConfigMap @go(ClientID)

	// The secret containing the OAuth2 client secret
	// +optional
	client_secret?: null | v1.#SecretKeySelector @go(ClientSecret,*v1.SecretKeySelector)

	// ClientSecretFile defines path for client secret file.
	// +optional
	client_secret_file?: string @go(ClientSecretFile)

	// The URL to fetch the token from
	// +kubebuilder:validation:MinLength=1
	// +required
	token_url: string @go(TokenURL)

	// OAuth2 scopes used for the token request
	// +optional
	scopes?: [...string] @go(Scopes,[]string)

	// Parameters to append to the token URL
	// +optional
	endpoint_params?: {[string]: string} @go(EndpointParams,map[string]string)
}

// Authorization configures generic authorization params
#Authorization: {
	// Type of authorization, default to bearer
	// +optional
	type?: string @go(Type)

	// Reference to the secret with value for authorization
	credentials?: null | v1.#SecretKeySelector @go(Credentials,*v1.SecretKeySelector)

	// File with value for authorization
	// +optional
	credentialsFile?: string @go(CredentialsFile)
}

// RelabelConfig allows dynamic rewriting of the label set
// More info: https://docs.victoriametrics.com/#relabeling
// +k8s:openapi-gen=true
#RelabelConfig: _

// ScrapeTargetParams defines common configuration params for all scrape endpoint targets
#EndpointScrapeParams: {
	// HTTP path to scrape for metrics.
	// +optional
	path?: string @go(Path)

	// HTTP scheme to use for scraping.
	// +optional
	// +kubebuilder:validation:Enum=http;https;HTTPS;HTTP
	scheme?: string @go(Scheme)

	// Optional HTTP URL parameters
	// +optional
	params?: {[string]: [...string]} @go(Params,map[string][]string)

	// FollowRedirects controls redirects for scraping.
	// +optional
	follow_redirects?: null | bool @go(FollowRedirects,*bool)

	// SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
	// +optional
	sampleLimit?: uint64 @go(SampleLimit)

	// SeriesLimit defines per-scrape limit on number of unique time series
	// a single target can expose during all the scrapes on the time window of 24h.
	// +optional
	seriesLimit?: uint64 @go(SeriesLimit)

	// Interval at which metrics should be scraped
	// +optional
	interval?: string @go(Interval)

	// ScrapeInterval is the same as Interval and has priority over it.
	// one of scrape_interval or interval can be used
	// +optional
	scrape_interval?: string @go(ScrapeInterval)

	// Timeout after which the scrape is ended
	// +optional
	scrapeTimeout?: string @go(ScrapeTimeout)

	// ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
	// +optional
	proxyURL?: null | string @go(ProxyURL,*string)

	// HonorLabels chooses the metric's labels on collisions with target labels.
	// +optional
	honorLabels?: bool @go(HonorLabels)

	// HonorTimestamps controls whether vmagent respects the timestamps present in scraped data.
	// +optional
	honorTimestamps?: null | bool @go(HonorTimestamps,*bool)

	// MaxScrapeSize defines a maximum size of scraped data for a job
	// +optional
	max_scrape_size?: string @go(MaxScrapeSize)

	// VMScrapeParams defines VictoriaMetrics specific scrape parameters
	// +optional
	vm_scrape_params?: null | #VMScrapeParams @go(VMScrapeParams,*VMScrapeParams)
}

// EndpointAuth defines target endpoint authorization options for scrapping
#EndpointAuth: {
	// OAuth2 defines auth configuration
	// +optional
	oauth2?: null | #OAuth2 @go(OAuth2,*OAuth2)

	// TLSConfig configuration to use when scraping the endpoint
	// +optional
	tlsConfig?: null | #TLSConfig @go(TLSConfig,*TLSConfig)

	// File to read bearer token for scraping targets.
	// +optional
	bearerTokenFile?: string @go(BearerTokenFile)

	// Secret to mount to read bearer token for scraping targets. The secret
	// needs to be in the same namespace as the scrape object and accessible by
	// the victoria-metrics operator.
	// +optional
	// +nullable
	bearerTokenSecret?: null | v1.#SecretKeySelector @go(BearerTokenSecret,*v1.SecretKeySelector)

	// BasicAuth allow an endpoint to authenticate over basic authentication
	// +optional
	basicAuth?: null | #BasicAuth @go(BasicAuth,*BasicAuth)

	// Authorization with http header Authorization
	// +optional
	authorization?: null | #Authorization @go(Authorization,*Authorization)
}

// EndpointRelabelings defines service discovery and metrics relabeling configuration for endpoints
#EndpointRelabelings: {
	// MetricRelabelConfigs to apply to samples after scrapping.
	// +optional
	metricRelabelConfigs?: [...null | #RelabelConfig] @go(MetricRelabelConfigs,[]*RelabelConfig)

	// RelabelConfigs to apply to samples during service discovery.
	// +optional
	relabelConfigs?: [...null | #RelabelConfig] @go(RelabelConfigs,[]*RelabelConfig)
}
