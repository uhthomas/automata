// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cloudnative-pg/cloudnative-pg/api/v1

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SubscriptionReclaimPolicy describes a policy for end-of-life maintenance of Subscriptions.
// +enum
#SubscriptionReclaimPolicy: string // #enumSubscriptionReclaimPolicy

#enumSubscriptionReclaimPolicy:
	#SubscriptionReclaimDelete |
	#SubscriptionReclaimRetain

// SubscriptionReclaimDelete means the subscription will be deleted from Kubernetes on release
// from its claim.
#SubscriptionReclaimDelete: #SubscriptionReclaimPolicy & "delete"

// SubscriptionReclaimRetain means the subscription will be left in its current phase for manual
// reclamation by the administrator. The default policy is Retain.
#SubscriptionReclaimRetain: #SubscriptionReclaimPolicy & "retain"

// SubscriptionSpec defines the desired state of Subscription
#SubscriptionSpec: {
	// The name of the PostgreSQL cluster that identifies the "subscriber"
	cluster: corev1.#LocalObjectReference @go(ClusterRef)

	// The name of the subscription inside PostgreSQL
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="name is immutable"
	name: string @go(Name)

	// The name of the database where the publication will be installed in
	// the "subscriber" cluster
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="dbname is immutable"
	dbname: string @go(DBName)

	// Subscription parameters part of the `WITH` clause as expected by
	// PostgreSQL `CREATE SUBSCRIPTION` command
	// +optional
	parameters?: {[string]: string} @go(Parameters,map[string]string)

	// The name of the publication inside the PostgreSQL database in the
	// "publisher"
	publicationName: string @go(PublicationName)

	// The name of the database containing the publication on the external
	// cluster. Defaults to the one in the external cluster definition.
	// +optional
	publicationDBName?: string @go(PublicationDBName)

	// The name of the external cluster with the publication ("publisher")
	externalClusterName: string @go(ExternalClusterName)

	// The policy for end-of-life maintenance of this subscription
	// +kubebuilder:validation:Enum=delete;retain
	// +kubebuilder:default:=retain
	// +optional
	subscriptionReclaimPolicy?: #SubscriptionReclaimPolicy @go(ReclaimPolicy)
}

// SubscriptionStatus defines the observed state of Subscription
#SubscriptionStatus: {
	// A sequence number representing the latest
	// desired state that was synchronized
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Applied is true if the subscription was reconciled correctly
	// +optional
	applied?: null | bool @go(Applied,*bool)

	// Message is the reconciliation output message
	// +optional
	message?: string @go(Message)
}

// Subscription is the Schema for the subscriptions API
#Subscription: {
	metav1.#TypeMeta
	metadata: metav1.#ObjectMeta  @go(ObjectMeta)
	spec:     #SubscriptionSpec   @go(Spec)
	status?:  #SubscriptionStatus @go(Status)
}

// SubscriptionList contains a list of Subscription
#SubscriptionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Subscription] @go(Items,[]Subscription)
}
