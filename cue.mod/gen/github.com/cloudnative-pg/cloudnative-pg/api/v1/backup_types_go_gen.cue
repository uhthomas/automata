// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cloudnative-pg/cloudnative-pg/api/v1

package v1

import (
	barmanApi "github.com/cloudnative-pg/barman-cloud/pkg/api"
	"github.com/cloudnative-pg/machinery/pkg/api"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// BackupPhase is the phase of the backup
#BackupPhase: string

// BackupPhasePending means that the backup is still waiting to be started
#BackupPhasePending: "pending"

// BackupPhaseStarted means that the backup is now running
#BackupPhaseStarted: "started"

// BackupPhaseRunning means that the backup is now running
#BackupPhaseRunning: "running"

// BackupPhaseFinalizing means that a consistent backup have been
// taken and the operator is waiting for it to be ready to be
// used to restore a cluster.
// This phase is used for VolumeSnapshot backups, when a
// VolumeSnapshotContent have already been provisioned, but it is
// still now waiting for the `readyToUse` flag to be true.
#BackupPhaseFinalizing: "finalizing"

// BackupPhaseCompleted means that the backup is now completed
#BackupPhaseCompleted: "completed"

// BackupPhaseFailed means that the backup is failed
#BackupPhaseFailed: "failed"

// BackupPhaseWalArchivingFailing means wal archiving isn't properly working
#BackupPhaseWalArchivingFailing: "walArchivingFailing"

// BarmanCredentials an object containing the potential credentials for each cloud provider
// +kubebuilder:object:generate:=false
#BarmanCredentials: barmanApi.#BarmanCredentials

// AzureCredentials is the type for the credentials to be used to upload
// files to Azure Blob Storage. The connection string contains every needed
// information. If the connection string is not specified, we'll need the
// storage account name and also one (and only one) of:
//
// - storageKey
// - storageSasToken
//
// - inheriting the credentials from the pod environment by setting inheritFromAzureAD to true
// +kubebuilder:object:generate:=false
#AzureCredentials: barmanApi.#AzureCredentials

// BarmanObjectStoreConfiguration contains the backup configuration
// using Barman against an S3-compatible object storage
// +kubebuilder:object:generate:=false
#BarmanObjectStoreConfiguration: barmanApi.#BarmanObjectStoreConfiguration

// DataBackupConfiguration is the configuration of the backup of
// the data directory
// +kubebuilder:object:generate:=false
#DataBackupConfiguration: barmanApi.#DataBackupConfiguration

// GoogleCredentials is the type for the Google Cloud Storage credentials.
// This needs to be specified even if we run inside a GKE environment.
// +kubebuilder:object:generate:=false
#GoogleCredentials: barmanApi.#GoogleCredentials

// S3Credentials is the type for the credentials to be used to upload
// files to S3. It can be provided in two alternative ways:
//
// - explicitly passing accessKeyId and secretAccessKey
//
// - inheriting the role from the pod environment by setting inheritFromIAMRole to true
// +kubebuilder:object:generate:=false
#S3Credentials: barmanApi.#S3Credentials

// WalBackupConfiguration is the configuration of the backup of the
// WAL stream
// +kubebuilder:object:generate:=false
#WalBackupConfiguration: barmanApi.#WalBackupConfiguration

// BackupMethod defines the way of executing the physical base backups of
// the selected PostgreSQL instance
#BackupMethod: string // #enumBackupMethod

#enumBackupMethod:
	#BackupMethodVolumeSnapshot |
	#BackupMethodBarmanObjectStore |
	#BackupMethodPlugin

// BackupMethodVolumeSnapshot means using the volume snapshot
// Kubernetes feature
#BackupMethodVolumeSnapshot: #BackupMethod & "volumeSnapshot"

// BackupMethodBarmanObjectStore means using barman to backup the
// PostgreSQL cluster
#BackupMethodBarmanObjectStore: #BackupMethod & "barmanObjectStore"

// BackupMethodPlugin means that this backup should be handled by
// a plugin
#BackupMethodPlugin: #BackupMethod & "plugin"

// BackupSpec defines the desired state of Backup
#BackupSpec: {
	// The cluster to backup
	cluster: api.#LocalObjectReference @go(Cluster,github.com/cloudnative-pg/machinery/pkg/api.LocalObjectReference)

	// The policy to decide which instance should perform this backup. If empty,
	// it defaults to `cluster.spec.backup.target`.
	// Available options are empty string, `primary` and `prefer-standby`.
	// `primary` to have backups run always on primary instances,
	// `prefer-standby` to have backups run preferably on the most updated
	// standby, if available.
	// +optional
	// +kubebuilder:validation:Enum=primary;prefer-standby
	target?: #BackupTarget @go(Target)

	// The backup method to be used, possible options are `barmanObjectStore`,
	// `volumeSnapshot` or `plugin`. Defaults to: `barmanObjectStore`.
	// +optional
	// +kubebuilder:validation:Enum=barmanObjectStore;volumeSnapshot;plugin
	// +kubebuilder:default:=barmanObjectStore
	method?: #BackupMethod @go(Method)

	// Configuration parameters passed to the plugin managing this backup
	// +optional
	pluginConfiguration?: null | #BackupPluginConfiguration @go(PluginConfiguration,*BackupPluginConfiguration)

	// Whether the default type of backup with volume snapshots is
	// online/hot (`true`, default) or offline/cold (`false`)
	// Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
	// +optional
	online?: null | bool @go(Online,*bool)

	// Configuration parameters to control the online/hot backup with volume snapshots
	// Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
	// +optional
	onlineConfiguration?: null | #OnlineConfiguration @go(OnlineConfiguration,*OnlineConfiguration)
}

// BackupPluginConfiguration contains the backup configuration used by
// the backup plugin
#BackupPluginConfiguration: {
	// Name is the name of the plugin managing this backup
	name: string @go(Name)

	// Parameters are the configuration parameters passed to the backup
	// plugin for this backup
	// +optional
	parameters?: {[string]: string} @go(Parameters,map[string]string)
}

// BackupSnapshotStatus the fields exclusive to the volumeSnapshot method backup
#BackupSnapshotStatus: {
	// The elements list, populated with the gathered volume snapshots
	// +optional
	elements?: [...#BackupSnapshotElementStatus] @go(Elements,[]BackupSnapshotElementStatus)
}

// BackupSnapshotElementStatus is a volume snapshot that is part of a volume snapshot method backup
#BackupSnapshotElementStatus: {
	// Name is the snapshot resource name
	name: string @go(Name)

	// Type is tho role of the snapshot in the cluster, such as PG_DATA, PG_WAL and PG_TABLESPACE
	type: string @go(Type)

	// TablespaceName is the name of the snapshotted tablespace. Only set
	// when type is PG_TABLESPACE
	// +optional
	tablespaceName?: string @go(TablespaceName)
}

// BackupStatus defines the observed state of Backup
#BackupStatus: {
	barmanApi.#BarmanCredentials

	// EndpointCA store the CA bundle of the barman endpoint.
	// Useful when using self-signed certificates to avoid
	// errors with certificate issuer and barman-cloud-wal-archive.
	// +optional
	endpointCA?: null | api.#SecretKeySelector @go(EndpointCA,*github.com/cloudnative-pg/machinery/pkg/api.SecretKeySelector)

	// Endpoint to be used to upload data to the cloud,
	// overriding the automatic endpoint discovery
	// +optional
	endpointURL?: string @go(EndpointURL)

	// The path where to store the backup (i.e. s3://bucket/path/to/folder)
	// this path, with different destination folders, will be used for WALs
	// and for data. This may not be populated in case of errors.
	// +optional
	destinationPath?: string @go(DestinationPath)

	// The server name on S3, the cluster name is used if this
	// parameter is omitted
	// +optional
	serverName?: string @go(ServerName)

	// Encryption method required to S3 API
	// +optional
	encryption?: string @go(Encryption)

	// The ID of the Barman backup
	// +optional
	backupId?: string @go(BackupID)

	// The Name of the Barman backup
	// +optional
	backupName?: string @go(BackupName)

	// The last backup status
	// +optional
	phase?: #BackupPhase @go(Phase)

	// When the backup was started
	// +optional
	startedAt?: null | metav1.#Time @go(StartedAt,*metav1.Time)

	// When the backup was terminated
	// +optional
	stoppedAt?: null | metav1.#Time @go(StoppedAt,*metav1.Time)

	// The starting WAL
	// +optional
	beginWal?: string @go(BeginWal)

	// The ending WAL
	// +optional
	endWal?: string @go(EndWal)

	// The starting xlog
	// +optional
	beginLSN?: string @go(BeginLSN)

	// The ending xlog
	// +optional
	endLSN?: string @go(EndLSN)

	// The detected error
	// +optional
	error?: string @go(Error)

	// Unused. Retained for compatibility with old versions.
	// +optional
	commandOutput?: string @go(CommandOutput)

	// The backup command output in case of error
	// +optional
	commandError?: string @go(CommandError)

	// Backup label file content as returned by Postgres in case of online (hot) backups
	// +optional
	backupLabelFile?: bytes @go(BackupLabelFile,[]byte)

	// Tablespace map file content as returned by Postgres in case of online (hot) backups
	// +optional
	tablespaceMapFile?: bytes @go(TablespaceMapFile,[]byte)

	// Information to identify the instance where the backup has been taken from
	// +optional
	instanceID?: null | #InstanceID @go(InstanceID,*InstanceID)

	// Status of the volumeSnapshot backup
	// +optional
	snapshotBackupStatus?: #BackupSnapshotStatus @go(BackupSnapshotStatus)

	// The backup method being used
	// +optional
	method?: #BackupMethod @go(Method)

	// Whether the backup was online/hot (`true`) or offline/cold (`false`)
	// +optional
	online?: null | bool @go(Online,*bool)

	// A map containing the plugin metadata
	// +optional
	pluginMetadata?: {[string]: string} @go(PluginMetadata,map[string]string)
}

// InstanceID contains the information to identify an instance
#InstanceID: {
	// The pod name
	// +optional
	podName?: string @go(PodName)

	// The container ID
	// +optional
	ContainerID?: string
}

// Backup is the Schema for the backups API
#Backup: {
	metav1.#TypeMeta
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the backup.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec: #BackupSpec @go(Spec)

	// Most recently observed status of the backup. This data may not be up to
	// date. Populated by the system. Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	status?: #BackupStatus @go(Status)
}

// BackupList contains a list of Backup
#BackupList: {
	metav1.#TypeMeta

	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of backups
	items: [...#Backup] @go(Items,[]Backup)
}
