// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cloudnative-pg/cloudnative-pg/api/v1

package v1

import (
	"github.com/cloudnative-pg/machinery/pkg/api"
	appsv1 "k8s.io/api/apps/v1"
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PoolerType is the type of the connection pool, meaning the service
// we are targeting. Allowed values are `rw` and `ro`.
// +kubebuilder:validation:Enum=rw;ro;r
#PoolerType: string // #enumPoolerType

#enumPoolerType:
	#PoolerTypeRW |
	#PoolerTypeRO |
	#PoolerTypeR

// PoolerTypeRW means that the pooler involves only the primary server
#PoolerTypeRW: #PoolerType & "rw"

// PoolerTypeRO means that the pooler involves only the replicas
#PoolerTypeRO: #PoolerType & "ro"

// PoolerTypeR means that the pooler involves every instance
#PoolerTypeR: #PoolerType & "r"

// DefaultPgBouncerPoolerAuthQuery is the default auth_query for PgBouncer
#DefaultPgBouncerPoolerAuthQuery: "SELECT usename, passwd FROM public.user_search($1)"

// PgBouncerPoolMode is the mode of PgBouncer
// +kubebuilder:validation:Enum=session;transaction
#PgBouncerPoolMode: string // #enumPgBouncerPoolMode

#enumPgBouncerPoolMode:
	#PgBouncerPoolModeSession |
	#PgBouncerPoolModeTransaction

// PgBouncerPoolModeSession the "session" mode
#PgBouncerPoolModeSession: #PgBouncerPoolMode & "session"

// PgBouncerPoolModeTransaction the "transaction" mode
#PgBouncerPoolModeTransaction: #PgBouncerPoolMode & "transaction"

// PoolerSpec defines the desired state of Pooler
#PoolerSpec: {
	// This is the cluster reference on which the Pooler will work.
	// Pooler name should never match with any cluster name within the same namespace.
	cluster: api.#LocalObjectReference @go(Cluster,github.com/cloudnative-pg/machinery/pkg/api.LocalObjectReference)

	// Type of service to forward traffic to. Default: `rw`.
	// +kubebuilder:default:=rw
	// +optional
	type?: #PoolerType @go(Type)

	// The number of replicas we want. Default: 1.
	// +kubebuilder:default:=1
	// +optional
	instances?: null | int32 @go(Instances,*int32)

	// The template of the Pod to be created
	// +optional
	template?: null | #PodTemplateSpec @go(Template,*PodTemplateSpec)

	// The PgBouncer configuration
	pgbouncer?: null | #PgBouncerSpec @go(PgBouncer,*PgBouncerSpec)

	// The deployment strategy to use for pgbouncer to replace existing pods with new ones
	// +optional
	deploymentStrategy?: null | appsv1.#DeploymentStrategy @go(DeploymentStrategy,*appsv1.DeploymentStrategy)

	// The configuration of the monitoring infrastructure of this pooler.
	// +optional
	monitoring?: null | #PoolerMonitoringConfiguration @go(Monitoring,*PoolerMonitoringConfiguration)

	// Template for the Service to be created
	// +optional
	serviceTemplate?: null | #ServiceTemplateSpec @go(ServiceTemplate,*ServiceTemplateSpec)
}

// PoolerMonitoringConfiguration is the type containing all the monitoring
// configuration for a certain Pooler.
//
// Mirrors the Cluster's MonitoringConfiguration but without the custom queries
// part for now.
#PoolerMonitoringConfiguration: {
	// Enable or disable the `PodMonitor`
	// +kubebuilder:default:=false
	// +optional
	enablePodMonitor?: bool @go(EnablePodMonitor)

	// The list of metric relabelings for the `PodMonitor`. Applied to samples before ingestion.
	// +optional
	podMonitorMetricRelabelings?: [...monitoringv1.#RelabelConfig] @go(PodMonitorMetricRelabelConfigs,[]monitoringv1.RelabelConfig)

	// The list of relabelings for the `PodMonitor`. Applied to samples before scraping.
	// +optional
	podMonitorRelabelings?: [...monitoringv1.#RelabelConfig] @go(PodMonitorRelabelConfigs,[]monitoringv1.RelabelConfig)
}

// PodTemplateSpec is a structure allowing the user to set
// a template for Pod generation.
//
// Unfortunately we can't use the corev1.PodTemplateSpec
// type because the generated CRD won't have the field for the
// metadata section.
//
// References:
// https://github.com/kubernetes-sigs/controller-tools/issues/385
// https://github.com/kubernetes-sigs/controller-tools/issues/448
// https://github.com/prometheus-operator/prometheus-operator/issues/3041
#PodTemplateSpec: {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	metadata?: #Metadata @go(ObjectMeta)

	// Specification of the desired behavior of the pod.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	spec?: corev1.#PodSpec @go(Spec)
}

// ServiceTemplateSpec is a structure allowing the user to set
// a template for Service generation.
#ServiceTemplateSpec: {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	metadata?: #Metadata @go(ObjectMeta)

	// Specification of the desired behavior of the service.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	spec?: corev1.#ServiceSpec @go(Spec)
}

// PgBouncerSpec defines how to configure PgBouncer
#PgBouncerSpec: {
	// The pool mode. Default: `session`.
	// +kubebuilder:default:=session
	// +optional
	poolMode?: #PgBouncerPoolMode @go(PoolMode)

	// The credentials of the user that need to be used for the authentication
	// query. In case it is specified, also an AuthQuery
	// (e.g. "SELECT usename, passwd FROM pg_catalog.pg_shadow WHERE usename=$1")
	// has to be specified and no automatic CNPG Cluster integration will be triggered.
	// +optional
	authQuerySecret?: null | api.#LocalObjectReference @go(AuthQuerySecret,*github.com/cloudnative-pg/machinery/pkg/api.LocalObjectReference)

	// The query that will be used to download the hash of the password
	// of a certain user. Default: "SELECT usename, passwd FROM public.user_search($1)".
	// In case it is specified, also an AuthQuerySecret has to be specified and
	// no automatic CNPG Cluster integration will be triggered.
	// +optional
	authQuery?: string @go(AuthQuery)

	// Additional parameters to be passed to PgBouncer - please check
	// the CNPG documentation for a list of options you can configure
	// +optional
	parameters?: {[string]: string} @go(Parameters,map[string]string)

	// PostgreSQL Host Based Authentication rules (lines to be appended
	// to the pg_hba.conf file)
	// +optional
	pg_hba?: [...string] @go(PgHBA,[]string)

	// When set to `true`, PgBouncer will disconnect from the PostgreSQL
	// server, first waiting for all queries to complete, and pause all new
	// client connections until this value is set to `false` (default). Internally,
	// the operator calls PgBouncer's `PAUSE` and `RESUME` commands.
	// +kubebuilder:default:=false
	// +optional
	paused?: null | bool @go(Paused,*bool)
}

// PoolerStatus defines the observed state of Pooler
#PoolerStatus: {
	// The resource version of the config object
	// +optional
	secrets?: null | #PoolerSecrets @go(Secrets,*PoolerSecrets)

	// The number of pods trying to be scheduled
	// +optional
	instances?: int32 @go(Instances)
}

// PoolerSecrets contains the versions of all the secrets used
#PoolerSecrets: {
	// The server TLS secret version
	// +optional
	serverTLS?: #SecretVersion @go(ServerTLS)

	// The server CA secret version
	// +optional
	serverCA?: #SecretVersion @go(ServerCA)

	// The client CA secret version
	// +optional
	clientCA?: #SecretVersion @go(ClientCA)

	// The version of the secrets used by PgBouncer
	// +optional
	pgBouncerSecrets?: null | #PgBouncerSecrets @go(PgBouncerSecrets,*PgBouncerSecrets)
}

// PgBouncerSecrets contains the versions of the secrets used
// by pgbouncer
#PgBouncerSecrets: {
	// The auth query secret version
	// +optional
	authQuery?: #SecretVersion @go(AuthQuery)
}

// SecretVersion contains a secret name and its ResourceVersion
#SecretVersion: {
	// The name of the secret
	// +optional
	name?: string @go(Name)

	// The ResourceVersion of the secret
	// +optional
	version?: string @go(Version)
}

// Pooler is the Schema for the poolers API
#Pooler: {
	metav1.#TypeMeta
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the Pooler.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec: #PoolerSpec @go(Spec)

	// Most recently observed status of the Pooler. This data may not be up to
	// date. Populated by the system. Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	status?: #PoolerStatus @go(Status)
}

// PoolerList contains a list of Pooler
#PoolerList: {
	metav1.#TypeMeta

	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Pooler] @go(Items,[]Pooler)
}
