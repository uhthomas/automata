// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cloudnative-pg/cloudnative-pg/api/v1

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PublicationReclaimPolicy defines a policy for end-of-life maintenance of Publications.
// +enum
#PublicationReclaimPolicy: string // #enumPublicationReclaimPolicy

#enumPublicationReclaimPolicy:
	#PublicationReclaimDelete |
	#PublicationReclaimRetain

// PublicationReclaimDelete means the publication will be deleted from Kubernetes on release
// from its claim.
#PublicationReclaimDelete: #PublicationReclaimPolicy & "delete"

// PublicationReclaimRetain means the publication will be left in its current phase for manual
// reclamation by the administrator. The default policy is Retain.
#PublicationReclaimRetain: #PublicationReclaimPolicy & "retain"

// PublicationSpec defines the desired state of Publication
#PublicationSpec: {
	// The name of the PostgreSQL cluster that identifies the "publisher"
	cluster: corev1.#LocalObjectReference @go(ClusterRef)

	// The name of the publication inside PostgreSQL
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="name is immutable"
	name: string @go(Name)

	// The name of the database where the publication will be installed in
	// the "publisher" cluster
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="dbname is immutable"
	dbname: string @go(DBName)

	// Publication parameters part of the `WITH` clause as expected by
	// PostgreSQL `CREATE PUBLICATION` command
	// +optional
	parameters?: {[string]: string} @go(Parameters,map[string]string)

	// Target of the publication as expected by PostgreSQL `CREATE PUBLICATION` command
	target: #PublicationTarget @go(Target)

	// The policy for end-of-life maintenance of this publication
	// +kubebuilder:validation:Enum=delete;retain
	// +kubebuilder:default:=retain
	// +optional
	publicationReclaimPolicy?: #PublicationReclaimPolicy @go(ReclaimPolicy)
}

// PublicationTarget is what this publication should publish
// +kubebuilder:validation:XValidation:rule="(has(self.allTables) && !has(self.objects)) || (!has(self.allTables) && has(self.objects))",message="allTables and objects are mutually exclusive"
#PublicationTarget: {
	// Marks the publication as one that replicates changes for all tables
	// in the database, including tables created in the future.
	// Corresponding to `FOR ALL TABLES` in PostgreSQL.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="allTables is immutable"
	// +optional
	allTables?: bool @go(AllTables)

	// Just the following schema objects
	// +kubebuilder:validation:XValidation:rule="!(self.exists(o, has(o.table) && has(o.table.columns)) && self.exists(o, has(o.tablesInSchema)))",message="specifying a column list when the publication also publishes tablesInSchema is not supported"
	// +kubebuilder:validation:MaxItems=100000
	// +optional
	objects?: [...#PublicationTargetObject] @go(Objects,[]PublicationTargetObject)
}

// PublicationTargetObject is an object to publish
// +kubebuilder:validation:XValidation:rule="(has(self.tablesInSchema) && !has(self.table)) || (!has(self.tablesInSchema) && has(self.table))",message="tablesInSchema and table are mutually exclusive"
#PublicationTargetObject: {
	// Marks the publication as one that replicates changes for all tables
	// in the specified list of schemas, including tables created in the
	// future. Corresponding to `FOR TABLES IN SCHEMA` in PostgreSQL.
	// +optional
	tablesInSchema?: string @go(TablesInSchema)

	// Specifies a list of tables to add to the publication. Corresponding
	// to `FOR TABLE` in PostgreSQL.
	// +optional
	table?: null | #PublicationTargetTable @go(Table,*PublicationTargetTable)
}

// PublicationTargetTable is a table to publish
#PublicationTargetTable: {
	// Whether to limit to the table only or include all its descendants
	// +optional
	only?: bool @go(Only)

	// The table name
	name: string @go(Name)

	// The schema name
	// +optional
	schema?: string @go(Schema)

	// The columns to publish
	// +optional
	columns?: [...string] @go(Columns,[]string)
}

// PublicationStatus defines the observed state of Publication
#PublicationStatus: {
	// A sequence number representing the latest
	// desired state that was synchronized
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Applied is true if the publication was reconciled correctly
	// +optional
	applied?: null | bool @go(Applied,*bool)

	// Message is the reconciliation output message
	// +optional
	message?: string @go(Message)
}

// Publication is the Schema for the publications API
#Publication: {
	metav1.#TypeMeta
	metadata: metav1.#ObjectMeta @go(ObjectMeta)
	spec:     #PublicationSpec   @go(Spec)
	status?:  #PublicationStatus @go(Status)
}

// PublicationList contains a list of Publication
#PublicationList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Publication] @go(Items,[]Publication)
}
