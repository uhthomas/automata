// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/cloudnative-pg/cloudnative-pg/api/v1

package v1

import (
	"github.com/cloudnative-pg/machinery/pkg/api"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ScheduledBackupSpec defines the desired state of ScheduledBackup
#ScheduledBackupSpec: {
	// If this backup is suspended or not
	// +optional
	suspend?: null | bool @go(Suspend,*bool)

	// If the first backup has to be immediately start after creation or not
	// +optional
	immediate?: null | bool @go(Immediate,*bool)

	// The schedule does not follow the same format used in Kubernetes CronJobs
	// as it includes an additional seconds specifier,
	// see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
	schedule: string @go(Schedule)

	// The cluster to backup
	cluster: api.#LocalObjectReference @go(Cluster,github.com/cloudnative-pg/machinery/pkg/api.LocalObjectReference)

	// Indicates which ownerReference should be put inside the created backup resources.<br />
	// - none: no owner reference for created backup objects (same behavior as before the field was introduced)<br />
	// - self: sets the Scheduled backup object as owner of the backup<br />
	// - cluster: set the cluster as owner of the backup<br />
	// +kubebuilder:validation:Enum=none;self;cluster
	// +kubebuilder:default:=none
	// +optional
	backupOwnerReference?: string @go(BackupOwnerReference)

	// The policy to decide which instance should perform this backup. If empty,
	// it defaults to `cluster.spec.backup.target`.
	// Available options are empty string, `primary` and `prefer-standby`.
	// `primary` to have backups run always on primary instances,
	// `prefer-standby` to have backups run preferably on the most updated
	// standby, if available.
	// +kubebuilder:validation:Enum=primary;prefer-standby
	// +optional
	target?: #BackupTarget @go(Target)

	// The backup method to be used, possible options are `barmanObjectStore`,
	// `volumeSnapshot` or `plugin`. Defaults to: `barmanObjectStore`.
	// +optional
	// +kubebuilder:validation:Enum=barmanObjectStore;volumeSnapshot;plugin
	// +kubebuilder:default:=barmanObjectStore
	method?: #BackupMethod @go(Method)

	// Configuration parameters passed to the plugin managing this backup
	// +optional
	pluginConfiguration?: null | #BackupPluginConfiguration @go(PluginConfiguration,*BackupPluginConfiguration)

	// Whether the default type of backup with volume snapshots is
	// online/hot (`true`, default) or offline/cold (`false`)
	// Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
	// +optional
	online?: null | bool @go(Online,*bool)

	// Configuration parameters to control the online/hot backup with volume snapshots
	// Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
	// +optional
	onlineConfiguration?: null | #OnlineConfiguration @go(OnlineConfiguration,*OnlineConfiguration)
}

// ScheduledBackupStatus defines the observed state of ScheduledBackup
#ScheduledBackupStatus: {
	// The latest time the schedule
	// +optional
	lastCheckTime?: null | metav1.#Time @go(LastCheckTime,*metav1.Time)

	// Information when was the last time that backup was successfully scheduled.
	// +optional
	lastScheduleTime?: null | metav1.#Time @go(LastScheduleTime,*metav1.Time)

	// Next time we will run a backup
	// +optional
	nextScheduleTime?: null | metav1.#Time @go(NextScheduleTime,*metav1.Time)
}

// ScheduledBackup is the Schema for the scheduledbackups API
#ScheduledBackup: {
	metav1.#TypeMeta
	metadata: metav1.#ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the ScheduledBackup.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec: #ScheduledBackupSpec @go(Spec)

	// Most recently observed status of the ScheduledBackup. This data may not be up
	// to date. Populated by the system. Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	status?: #ScheduledBackupStatus @go(Status)
}

// ScheduledBackupList contains a list of ScheduledBackup
#ScheduledBackupList: {
	metav1.#TypeMeta

	// Standard list metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	// +optional
	metadata?: metav1.#ListMeta @go(ListMeta)

	// List of clusters
	items: [...#ScheduledBackup] @go(Items,[]ScheduledBackup)
}
