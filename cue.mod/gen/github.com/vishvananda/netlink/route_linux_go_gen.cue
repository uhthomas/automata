// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/vishvananda/netlink

package netlink

import (
	"github.com/vishvananda/netns"
	"golang.org/x/sys/unix"
)

#SCOPE_UNIVERSE: #Scope & 0
#SCOPE_SITE:     #Scope & 200
#SCOPE_LINK:     #Scope & 253
#SCOPE_HOST:     #Scope & 254
#SCOPE_NOWHERE:  #Scope & 255

#FLAG_ONLINK:    #NextHopFlag & 4
#FLAG_PERVASIVE: #NextHopFlag & 2

#MPLSDestination: {
	Labels: [...int] @go(,[]int)
}

#MPLSEncap: {
	Labels: [...int] @go(,[]int)
}

// SEG6 definitions
#SEG6Encap: {
	Mode: int
	Segments: [...string] @go(,[]net.IP)
}

// SEG6LocalEncap definitions
#SEG6LocalEncap: {
	Flags: 10 * [bool] @go(,[10]bool)
	Action: int
	Segments: [...string] @go(,[]net.IP)
	Table:    int
	VrfTable: int
	InAddr:   string @go(,net.IP)
	In6Addr:  string @go(,net.IP)
	Iif:      int
	Oif:      int
}

// IP6tnlEncap definition
#IP6tnlEncap: {
	ID:       uint64
	Dst:      string @go(,net.IP)
	Src:      string @go(,net.IP)
	Hoplimit: uint8
	TC:       uint8
	Flags:    uint16
}

#Via: {
	AddrFamily: int
	Addr:       string @go(,net.IP)
}

// RouteGetOptions contains a set of options to use with
// RouteGetWithOptions
#RouteGetOptions: {
	Iif:      string
	IifIndex: int
	Oif:      string
	OifIndex: int
	VrfName:  string
	SrcAddr:  string        @go(,net.IP)
	UID?:     null | uint32 @go(,*uint32)
	Mark:     uint32
	FIBMatch: bool
}

// RouteSubscribeOptions contains a set of options to use with
// RouteSubscribeWithOptions.
#RouteSubscribeOptions: {
	Namespace?:             null | netns.#NsHandle @go(,*netns.NsHandle)
	ListExisting:           bool
	ReceiveBufferSize:      int
	ReceiveBufferForceSize: bool
	ReceiveTimeout?:        null | unix.#Timeval @go(,*unix.Timeval)
}
