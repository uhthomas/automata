// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/vishvananda/netlink

package netlink

#HANDLE_NONE:      0
#HANDLE_INGRESS:   0xFFFFFFF1
#HANDLE_CLSACT:    4294967281
#HANDLE_ROOT:      0xFFFFFFFF
#PRIORITY_MAP_LEN: 16

#HANDLE_MIN_INGRESS: 0xFFFFFFF2
#HANDLE_MIN_EGRESS:  0xFFFFFFF3

#HORIZON_DROP_POLICY_CAP:     0
#HORIZON_DROP_POLICY_DROP:    1
#HORIZON_DROP_POLICY_DEFAULT: 255

#Qdisc: _

#QdiscStatistics: #ClassStatistics

// QdiscAttrs represents a netlink qdisc. A qdisc is associated with a link,
// has a handle, a parent and a refcnt. The root qdisc of a device should
// have parent == HANDLE_ROOT.
#QdiscAttrs: {
	LinkIndex:     int
	Handle:        uint32
	Parent:        uint32
	Refcnt:        uint32
	IngressBlock?: null | uint32           @go(,*uint32)
	Statistics?:   null | #QdiscStatistics @go(,*QdiscStatistics)
}

// PfifoFast is the default qdisc created by the kernel if one has not
// been defined for the interface
#PfifoFast: {
	QdiscAttrs: #QdiscAttrs
	Bands:      uint8
	PriorityMap: 16 * [uint8] @go(,[16]uint8)
}

// Prio is a basic qdisc that works just like PfifoFast
#Prio: {
	QdiscAttrs: #QdiscAttrs
	Bands:      uint8
	PriorityMap: 16 * [uint8] @go(,[16]uint8)
}

// Htb is a classful qdisc that rate limits based on tokens
#Htb: {
	QdiscAttrs:   #QdiscAttrs
	Version:      uint32
	Rate2Quantum: uint32
	Defcls:       uint32
	Debug:        uint32
	DirectPkts:   uint32
	DirectQlen?:  null | uint32 @go(,*uint32)
}

#NetemQdiscAttrs: {
	Latency:       uint32
	DelayCorr:     float32
	Limit:         uint32
	Loss:          float32
	LossCorr:      float32
	Gap:           uint32
	Duplicate:     float32
	DuplicateCorr: float32
	Jitter:        uint32
	ReorderProb:   float32
	ReorderCorr:   float32
	CorruptProb:   float32
	CorruptCorr:   float32
	Rate64:        uint64
}

#Netem: {
	QdiscAttrs:    #QdiscAttrs
	Latency:       uint32
	DelayCorr:     uint32
	Limit:         uint32
	Loss:          uint32
	LossCorr:      uint32
	Gap:           uint32
	Duplicate:     uint32
	DuplicateCorr: uint32
	Jitter:        uint32
	ReorderProb:   uint32
	ReorderCorr:   uint32
	CorruptProb:   uint32
	CorruptCorr:   uint32
	Rate64:        uint64
}

// Tbf is a classless qdisc that rate limits based on tokens
#Tbf: {
	QdiscAttrs: #QdiscAttrs
	Rate:       uint64
	Limit:      uint32
	Buffer:     uint32
	Peakrate:   uint64
	Minburst:   uint32
}

// Clsact is a qdisc for adding filters
#Clsact: {
	QdiscAttrs: #QdiscAttrs
}

// Ingress is a qdisc for adding ingress filters
#Ingress: {
	QdiscAttrs: #QdiscAttrs
}

// GenericQdisc qdiscs represent types that are not currently understood
// by this netlink library.
#GenericQdisc: {
	QdiscAttrs: #QdiscAttrs
	QdiscType:  string
}

#Hfsc: {
	QdiscAttrs: #QdiscAttrs
	Defcls:     uint16
}

// Fq is a classless packet scheduler meant to be mostly used for locally generated traffic.
#Fq: {
	QdiscAttrs:      #QdiscAttrs
	PacketLimit:     uint32
	FlowPacketLimit: uint32

	// In bytes
	Quantum:        uint32
	InitialQuantum: uint32

	// called RateEnable under the hood
	Pacing:          uint32
	FlowDefaultRate: uint32
	FlowMaxRate:     uint32

	// called BucketsLog under the hood
	Buckets:           uint32
	FlowRefillDelay:   uint32
	LowRateThreshold:  uint32
	Horizon:           uint32
	HorizonDropPolicy: uint8
}

// FQ_Codel (Fair Queuing Controlled Delay) is queuing discipline that combines Fair Queuing with the CoDel AQM scheme.
#FqCodel: {
	QdiscAttrs:    #QdiscAttrs
	Target:        uint32
	Limit:         uint32
	Interval:      uint32
	ECN:           uint32
	Flows:         uint32
	Quantum:       uint32
	CEThreshold:   uint32
	DropBatchSize: uint32
	MemoryLimit:   uint32
}

#Sfq: {
	QdiscAttrs: #QdiscAttrs

	// TODO: Only the simplified options for SFQ are handled here. Support for the extended one can be added later.
	Quantum: uint32
	Perturb: int32
	Limit:   uint32
	Divisor: uint32
}
