// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/vishvananda/netlink

package netlink

// Link represents a link device from netlink. Shared link attributes
// like name may be retrieved using the Attrs() method. Unique data
// can be retrieved by casting the object to the proper type.
#Link: _

#NsPid: int

#NsFd: int

// LinkAttrs represents data shared by most link types
#LinkAttrs: {
	Index:        int
	MTU:          int
	TxQLen:       int
	Name:         string
	HardwareAddr: _ @go(,net.HardwareAddr)
	Flags:        _ @go(,net.Flags)
	RawFlags:     uint32
	ParentIndex:  int
	MasterIndex:  int
	Namespace:    _ @go(,interface{})
	Alias:        string
	AltNames: [...string] @go(,[]string)
	Statistics?:    null | #LinkStatistics @go(,*LinkStatistics)
	Promisc:        int
	Allmulti:       int
	Multi:          int
	Xdp?:           null | #LinkXdp @go(,*LinkXdp)
	EncapType:      string
	Protinfo?:      null | #Protinfo @go(,*Protinfo)
	OperState:      #LinkOperState
	PhysSwitchID:   int
	NetNsID:        int
	NumTxQueues:    int
	NumRxQueues:    int
	TSOMaxSegs:     uint32
	TSOMaxSize:     uint32
	GSOMaxSegs:     uint32
	GSOMaxSize:     uint32
	GROMaxSize:     uint32
	GSOIPv4MaxSize: uint32
	GROIPv4MaxSize: uint32
	Vfs: [...#VfInfo] @go(,[]VfInfo)
	Group:        uint32
	PermHWAddr:   _ @go(,net.HardwareAddr)
	ParentDev:    string
	ParentDevBus: string
	Slave:        #LinkSlave
}

// LinkSlave represents a slave device.
#LinkSlave: _

// VfInfo represents configuration of virtual function
#VfInfo: {
	ID:        int
	Mac:       _ @go(,net.HardwareAddr)
	Vlan:      int
	Qos:       int
	VlanProto: int
	TxRate:    int
	Spoofchk:  bool
	LinkState: uint32
	MaxTxRate: uint32
	MinTxRate: uint32
	RxPackets: uint64
	TxPackets: uint64
	RxBytes:   uint64
	TxBytes:   uint64
	Multicast: uint64
	Broadcast: uint64
	RxDropped: uint64
	TxDropped: uint64
	RssQuery:  uint32
	Trust:     uint32
}

// LinkOperState represents the values of the IFLA_OPERSTATE link
// attribute, which contains the RFC2863 state of the interface.
#LinkOperState: uint8

#OperUnknown:        0
#OperNotPresent:     1
#OperDown:           2
#OperLowerLayerDown: 3
#OperTesting:        4
#OperDormant:        5
#OperUp:             6

#LinkStatistics: #LinkStatistics64

// Ref: struct rtnl_link_stats {...}
//
#LinkStatistics32: {
	RxPackets:         uint32
	TxPackets:         uint32
	RxBytes:           uint32
	TxBytes:           uint32
	RxErrors:          uint32
	TxErrors:          uint32
	RxDropped:         uint32
	TxDropped:         uint32
	Multicast:         uint32
	Collisions:        uint32
	RxLengthErrors:    uint32
	RxOverErrors:      uint32
	RxCrcErrors:       uint32
	RxFrameErrors:     uint32
	RxFifoErrors:      uint32
	RxMissedErrors:    uint32
	TxAbortedErrors:   uint32
	TxCarrierErrors:   uint32
	TxFifoErrors:      uint32
	TxHeartbeatErrors: uint32
	TxWindowErrors:    uint32
	RxCompressed:      uint32
	TxCompressed:      uint32
}

// Ref: struct rtnl_link_stats64 {...}
//
#LinkStatistics64: {
	RxPackets:         uint64
	TxPackets:         uint64
	RxBytes:           uint64
	TxBytes:           uint64
	RxErrors:          uint64
	TxErrors:          uint64
	RxDropped:         uint64
	TxDropped:         uint64
	Multicast:         uint64
	Collisions:        uint64
	RxLengthErrors:    uint64
	RxOverErrors:      uint64
	RxCrcErrors:       uint64
	RxFrameErrors:     uint64
	RxFifoErrors:      uint64
	RxMissedErrors:    uint64
	TxAbortedErrors:   uint64
	TxCarrierErrors:   uint64
	TxFifoErrors:      uint64
	TxHeartbeatErrors: uint64
	TxWindowErrors:    uint64
	RxCompressed:      uint64
	TxCompressed:      uint64
}

#LinkXdp: {
	Fd:         int
	Attached:   bool
	AttachMode: uint32
	Flags:      uint32
	ProgId:     uint32
}

// Device links cannot be created via netlink. These links
// are links created by udev like 'lo' and 'etho0'
#Device: {
	LinkAttrs: #LinkAttrs
}

// Dummy links are dummy ethernet devices
#Dummy: {
	LinkAttrs: #LinkAttrs
}

// Ifb links are advanced dummy devices for packet filtering
#Ifb: {
	LinkAttrs: #LinkAttrs
}

// Bridge links are simple linux bridges
#Bridge: {
	LinkAttrs:          #LinkAttrs
	MulticastSnooping?: null | bool   @go(,*bool)
	AgeingTime?:        null | uint32 @go(,*uint32)
	HelloTime?:         null | uint32 @go(,*uint32)
	VlanFiltering?:     null | bool   @go(,*bool)
	VlanDefaultPVID?:   null | uint16 @go(,*uint16)
	GroupFwdMask?:      null | uint16 @go(,*uint16)
}

// Vlan links have ParentIndex set in their Attrs()
#Vlan: {
	LinkAttrs:      #LinkAttrs
	VlanId:         int
	VlanProtocol:   #VlanProtocol
	ReorderHdr?:    null | bool @go(,*bool)
	Gvrp?:          null | bool @go(,*bool)
	LooseBinding?:  null | bool @go(,*bool)
	Mvrp?:          null | bool @go(,*bool)
	BridgeBinding?: null | bool @go(,*bool)
}

#MacvlanMode: uint16 // #enumMacvlanMode

#enumMacvlanMode:
	#MACVLAN_MODE_DEFAULT |
	#MACVLAN_MODE_PRIVATE |
	#MACVLAN_MODE_VEPA |
	#MACVLAN_MODE_BRIDGE |
	#MACVLAN_MODE_PASSTHRU |
	#MACVLAN_MODE_SOURCE

#values_MacvlanMode: {
	MACVLAN_MODE_DEFAULT:  #MACVLAN_MODE_DEFAULT
	MACVLAN_MODE_PRIVATE:  #MACVLAN_MODE_PRIVATE
	MACVLAN_MODE_VEPA:     #MACVLAN_MODE_VEPA
	MACVLAN_MODE_BRIDGE:   #MACVLAN_MODE_BRIDGE
	MACVLAN_MODE_PASSTHRU: #MACVLAN_MODE_PASSTHRU
	MACVLAN_MODE_SOURCE:   #MACVLAN_MODE_SOURCE
}

#MACVLAN_MODE_DEFAULT:  #MacvlanMode & 0
#MACVLAN_MODE_PRIVATE:  #MacvlanMode & 1
#MACVLAN_MODE_VEPA:     #MacvlanMode & 2
#MACVLAN_MODE_BRIDGE:   #MacvlanMode & 3
#MACVLAN_MODE_PASSTHRU: #MacvlanMode & 4
#MACVLAN_MODE_SOURCE:   #MacvlanMode & 5

// Macvlan links have ParentIndex set in their Attrs()
#Macvlan: {
	LinkAttrs: #LinkAttrs
	Mode:      #MacvlanMode

	// MACAddrs is only populated for Macvlan SOURCE links
	MACAddrs: [...] @go(,[]net.HardwareAddr)
	BCQueueLen:     uint32
	UsedBCQueueLen: uint32
}

// Macvtap - macvtap is a virtual interfaces based on macvlan
#Macvtap: {
	Macvlan: #Macvlan
}

#TuntapMode: uint16 // #enumTuntapMode

#enumTuntapMode:
	#TUNTAP_MODE_TUN |
	#TUNTAP_MODE_TAP

#values_TuntapMode: {
	TUNTAP_MODE_TUN: #TUNTAP_MODE_TUN
	TUNTAP_MODE_TAP: #TUNTAP_MODE_TAP
}

#TuntapFlag: uint16 // #enumTuntapFlag

#enumTuntapFlag:
	#TUNTAP_DEFAULTS |
	#TUNTAP_VNET_HDR |
	#TUNTAP_TUN_EXCL |
	#TUNTAP_NO_PI |
	#TUNTAP_ONE_QUEUE |
	#TUNTAP_MULTI_QUEUE |
	#TUNTAP_MULTI_QUEUE_DEFAULTS

#values_TuntapFlag: {
	TUNTAP_DEFAULTS:             #TUNTAP_DEFAULTS
	TUNTAP_VNET_HDR:             #TUNTAP_VNET_HDR
	TUNTAP_TUN_EXCL:             #TUNTAP_TUN_EXCL
	TUNTAP_NO_PI:                #TUNTAP_NO_PI
	TUNTAP_ONE_QUEUE:            #TUNTAP_ONE_QUEUE
	TUNTAP_MULTI_QUEUE:          #TUNTAP_MULTI_QUEUE
	TUNTAP_MULTI_QUEUE_DEFAULTS: #TUNTAP_MULTI_QUEUE_DEFAULTS
}

// Tuntap links created via /dev/tun/tap, but can be destroyed via netlink
#Tuntap: {
	LinkAttrs:      #LinkAttrs
	Mode:           #TuntapMode
	Flags:          #TuntapFlag
	NonPersist:     bool
	Queues:         int
	DisabledQueues: int
	Owner:          uint32
	Group:          uint32
}

#NetkitMode: uint32 // #enumNetkitMode

#enumNetkitMode:
	#NETKIT_MODE_L2 |
	#NETKIT_MODE_L3

#values_NetkitMode: {
	NETKIT_MODE_L2: #NETKIT_MODE_L2
	NETKIT_MODE_L3: #NETKIT_MODE_L3
}

#NETKIT_MODE_L2: #NetkitMode & 0
#NETKIT_MODE_L3: #NetkitMode & 1

#NetkitPolicy: int // #enumNetkitPolicy

#enumNetkitPolicy:
	#NETKIT_POLICY_FORWARD |
	#NETKIT_POLICY_BLACKHOLE

#values_NetkitPolicy: {
	NETKIT_POLICY_FORWARD:   #NETKIT_POLICY_FORWARD
	NETKIT_POLICY_BLACKHOLE: #NETKIT_POLICY_BLACKHOLE
}

#NETKIT_POLICY_FORWARD:   #NetkitPolicy & 0
#NETKIT_POLICY_BLACKHOLE: #NetkitPolicy & 2

#NetkitScrub: int // #enumNetkitScrub

#enumNetkitScrub:
	#NETKIT_SCRUB_NONE |
	#NETKIT_SCRUB_DEFAULT

#values_NetkitScrub: {
	NETKIT_SCRUB_NONE:    #NETKIT_SCRUB_NONE
	NETKIT_SCRUB_DEFAULT: #NETKIT_SCRUB_DEFAULT
}

#NETKIT_SCRUB_NONE:    #NetkitScrub & 0
#NETKIT_SCRUB_DEFAULT: #NetkitScrub & 1

#Netkit: {
	LinkAttrs:  #LinkAttrs
	Mode:       #NetkitMode
	Policy:     #NetkitPolicy
	PeerPolicy: #NetkitPolicy
	Scrub:      #NetkitScrub
	PeerScrub:  #NetkitScrub
}

// Veth devices must specify PeerName on create
#Veth: {
	LinkAttrs:        #LinkAttrs
	PeerName:         string
	PeerHardwareAddr: _ @go(,net.HardwareAddr)
	PeerNamespace:    _ @go(,interface{})
	PeerTxQLen:       int
	PeerNumTxQueues:  uint32
	PeerNumRxQueues:  uint32
	PeerMTU:          uint32
}

// Wireguard represent links of type "wireguard", see https://www.wireguard.com/
#Wireguard: {
	LinkAttrs: #LinkAttrs
}

// GenericLink links represent types that are not currently understood
// by this netlink library.
#GenericLink: {
	LinkAttrs: #LinkAttrs
	LinkType:  string
}

#Vxlan: {
	LinkAttrs:      #LinkAttrs
	VxlanId:        int
	VtepDevIndex:   int
	SrcAddr:        string @go(,net.IP)
	Group:          string @go(,net.IP)
	TTL:            int
	TOS:            int
	Learning:       bool
	Proxy:          bool
	RSC:            bool
	L2miss:         bool
	L3miss:         bool
	UDPCSum:        bool
	UDP6ZeroCSumTx: bool
	UDP6ZeroCSumRx: bool
	NoAge:          bool
	GBP:            bool
	FlowBased:      bool
	Age:            int
	Limit:          int
	Port:           int
	PortLow:        int
	PortHigh:       int
}

#IPVlanMode: uint16 // #enumIPVlanMode

#enumIPVlanMode:
	#IPVLAN_MODE_L2 |
	#IPVLAN_MODE_L3 |
	#IPVLAN_MODE_L3S |
	#IPVLAN_MODE_MAX

#values_IPVlanMode: {
	IPVLAN_MODE_L2:  #IPVLAN_MODE_L2
	IPVLAN_MODE_L3:  #IPVLAN_MODE_L3
	IPVLAN_MODE_L3S: #IPVLAN_MODE_L3S
	IPVLAN_MODE_MAX: #IPVLAN_MODE_MAX
}

#IPVLAN_MODE_L2:  #IPVlanMode & 0
#IPVLAN_MODE_L3:  #IPVlanMode & 1
#IPVLAN_MODE_L3S: #IPVlanMode & 2
#IPVLAN_MODE_MAX: #IPVlanMode & 3

#IPVlanFlag: uint16 // #enumIPVlanFlag

#enumIPVlanFlag:
	#IPVLAN_FLAG_BRIDGE |
	#IPVLAN_FLAG_PRIVATE |
	#IPVLAN_FLAG_VEPA

#values_IPVlanFlag: {
	IPVLAN_FLAG_BRIDGE:  #IPVLAN_FLAG_BRIDGE
	IPVLAN_FLAG_PRIVATE: #IPVLAN_FLAG_PRIVATE
	IPVLAN_FLAG_VEPA:    #IPVLAN_FLAG_VEPA
}

#IPVLAN_FLAG_BRIDGE:  #IPVlanFlag & 0
#IPVLAN_FLAG_PRIVATE: #IPVlanFlag & 1
#IPVLAN_FLAG_VEPA:    #IPVlanFlag & 2

#IPVlan: {
	LinkAttrs: #LinkAttrs
	Mode:      #IPVlanMode
	Flag:      #IPVlanFlag
}

// IPVtap - IPVtap is a virtual interfaces based on ipvlan
#IPVtap: {
	IPVlan: #IPVlan
}

// VlanProtocol type
#VlanProtocol: int // #enumVlanProtocol

#enumVlanProtocol:
	#VLAN_PROTOCOL_UNKNOWN |
	#VLAN_PROTOCOL_8021Q |
	#VLAN_PROTOCOL_8021AD

#values_VlanProtocol: {
	VLAN_PROTOCOL_UNKNOWN: #VLAN_PROTOCOL_UNKNOWN
	VLAN_PROTOCOL_8021Q:   #VLAN_PROTOCOL_8021Q
	VLAN_PROTOCOL_8021AD:  #VLAN_PROTOCOL_8021AD
}

#VLAN_PROTOCOL_UNKNOWN: #VlanProtocol & 0
#VLAN_PROTOCOL_8021Q:   #VlanProtocol & 0x8100
#VLAN_PROTOCOL_8021AD:  #VlanProtocol & 0x88A8

// BondMode type
#BondMode: int // #enumBondMode

#enumBondMode:
	#BOND_MODE_BALANCE_RR |
	#BOND_MODE_ACTIVE_BACKUP |
	#BOND_MODE_BALANCE_XOR |
	#BOND_MODE_BROADCAST |
	#BOND_MODE_802_3AD |
	#BOND_MODE_BALANCE_TLB |
	#BOND_MODE_BALANCE_ALB |
	#BOND_MODE_UNKNOWN

#values_BondMode: {
	BOND_MODE_BALANCE_RR:    #BOND_MODE_BALANCE_RR
	BOND_MODE_ACTIVE_BACKUP: #BOND_MODE_ACTIVE_BACKUP
	BOND_MODE_BALANCE_XOR:   #BOND_MODE_BALANCE_XOR
	BOND_MODE_BROADCAST:     #BOND_MODE_BROADCAST
	BOND_MODE_802_3AD:       #BOND_MODE_802_3AD
	BOND_MODE_BALANCE_TLB:   #BOND_MODE_BALANCE_TLB
	BOND_MODE_BALANCE_ALB:   #BOND_MODE_BALANCE_ALB
	BOND_MODE_UNKNOWN:       #BOND_MODE_UNKNOWN
}

#BOND_MODE_BALANCE_RR:    #BondMode & 0
#BOND_MODE_ACTIVE_BACKUP: #BondMode & 1
#BOND_MODE_BALANCE_XOR:   #BondMode & 2
#BOND_MODE_BROADCAST:     #BondMode & 3
#BOND_MODE_802_3AD:       #BondMode & 4
#BOND_MODE_BALANCE_TLB:   #BondMode & 5
#BOND_MODE_BALANCE_ALB:   #BondMode & 6
#BOND_MODE_UNKNOWN:       #BondMode & 7

// BondArpValidate type
#BondArpValidate: int // #enumBondArpValidate

#enumBondArpValidate:
	#BOND_ARP_VALIDATE_NONE |
	#BOND_ARP_VALIDATE_ACTIVE |
	#BOND_ARP_VALIDATE_BACKUP |
	#BOND_ARP_VALIDATE_ALL

#values_BondArpValidate: {
	BOND_ARP_VALIDATE_NONE:   #BOND_ARP_VALIDATE_NONE
	BOND_ARP_VALIDATE_ACTIVE: #BOND_ARP_VALIDATE_ACTIVE
	BOND_ARP_VALIDATE_BACKUP: #BOND_ARP_VALIDATE_BACKUP
	BOND_ARP_VALIDATE_ALL:    #BOND_ARP_VALIDATE_ALL
}

#BOND_ARP_VALIDATE_NONE:   #BondArpValidate & 0
#BOND_ARP_VALIDATE_ACTIVE: #BondArpValidate & 1
#BOND_ARP_VALIDATE_BACKUP: #BondArpValidate & 2
#BOND_ARP_VALIDATE_ALL:    #BondArpValidate & 3

// BondPrimaryReselect type
#BondPrimaryReselect: int // #enumBondPrimaryReselect

#enumBondPrimaryReselect:
	#BOND_PRIMARY_RESELECT_ALWAYS |
	#BOND_PRIMARY_RESELECT_BETTER |
	#BOND_PRIMARY_RESELECT_FAILURE

#values_BondPrimaryReselect: {
	BOND_PRIMARY_RESELECT_ALWAYS:  #BOND_PRIMARY_RESELECT_ALWAYS
	BOND_PRIMARY_RESELECT_BETTER:  #BOND_PRIMARY_RESELECT_BETTER
	BOND_PRIMARY_RESELECT_FAILURE: #BOND_PRIMARY_RESELECT_FAILURE
}

#BOND_PRIMARY_RESELECT_ALWAYS:  #BondPrimaryReselect & 0
#BOND_PRIMARY_RESELECT_BETTER:  #BondPrimaryReselect & 1
#BOND_PRIMARY_RESELECT_FAILURE: #BondPrimaryReselect & 2

// BondArpAllTargets type
#BondArpAllTargets: int // #enumBondArpAllTargets

#enumBondArpAllTargets:
	#BOND_ARP_ALL_TARGETS_ANY |
	#BOND_ARP_ALL_TARGETS_ALL

#values_BondArpAllTargets: {
	BOND_ARP_ALL_TARGETS_ANY: #BOND_ARP_ALL_TARGETS_ANY
	BOND_ARP_ALL_TARGETS_ALL: #BOND_ARP_ALL_TARGETS_ALL
}

#BOND_ARP_ALL_TARGETS_ANY: #BondArpAllTargets & 0
#BOND_ARP_ALL_TARGETS_ALL: #BondArpAllTargets & 1

// BondFailOverMac type
#BondFailOverMac: int // #enumBondFailOverMac

#enumBondFailOverMac:
	#BOND_FAIL_OVER_MAC_NONE |
	#BOND_FAIL_OVER_MAC_ACTIVE |
	#BOND_FAIL_OVER_MAC_FOLLOW

#values_BondFailOverMac: {
	BOND_FAIL_OVER_MAC_NONE:   #BOND_FAIL_OVER_MAC_NONE
	BOND_FAIL_OVER_MAC_ACTIVE: #BOND_FAIL_OVER_MAC_ACTIVE
	BOND_FAIL_OVER_MAC_FOLLOW: #BOND_FAIL_OVER_MAC_FOLLOW
}

#BOND_FAIL_OVER_MAC_NONE:   #BondFailOverMac & 0
#BOND_FAIL_OVER_MAC_ACTIVE: #BondFailOverMac & 1
#BOND_FAIL_OVER_MAC_FOLLOW: #BondFailOverMac & 2

// BondXmitHashPolicy type
#BondXmitHashPolicy: int // #enumBondXmitHashPolicy

#enumBondXmitHashPolicy:
	#BOND_XMIT_HASH_POLICY_LAYER2 |
	#BOND_XMIT_HASH_POLICY_LAYER3_4 |
	#BOND_XMIT_HASH_POLICY_LAYER2_3 |
	#BOND_XMIT_HASH_POLICY_ENCAP2_3 |
	#BOND_XMIT_HASH_POLICY_ENCAP3_4 |
	#BOND_XMIT_HASH_POLICY_VLAN_SRCMAC |
	#BOND_XMIT_HASH_POLICY_UNKNOWN

#values_BondXmitHashPolicy: {
	BOND_XMIT_HASH_POLICY_LAYER2:      #BOND_XMIT_HASH_POLICY_LAYER2
	BOND_XMIT_HASH_POLICY_LAYER3_4:    #BOND_XMIT_HASH_POLICY_LAYER3_4
	BOND_XMIT_HASH_POLICY_LAYER2_3:    #BOND_XMIT_HASH_POLICY_LAYER2_3
	BOND_XMIT_HASH_POLICY_ENCAP2_3:    #BOND_XMIT_HASH_POLICY_ENCAP2_3
	BOND_XMIT_HASH_POLICY_ENCAP3_4:    #BOND_XMIT_HASH_POLICY_ENCAP3_4
	BOND_XMIT_HASH_POLICY_VLAN_SRCMAC: #BOND_XMIT_HASH_POLICY_VLAN_SRCMAC
	BOND_XMIT_HASH_POLICY_UNKNOWN:     #BOND_XMIT_HASH_POLICY_UNKNOWN
}

#BOND_XMIT_HASH_POLICY_LAYER2:      #BondXmitHashPolicy & 0
#BOND_XMIT_HASH_POLICY_LAYER3_4:    #BondXmitHashPolicy & 1
#BOND_XMIT_HASH_POLICY_LAYER2_3:    #BondXmitHashPolicy & 2
#BOND_XMIT_HASH_POLICY_ENCAP2_3:    #BondXmitHashPolicy & 3
#BOND_XMIT_HASH_POLICY_ENCAP3_4:    #BondXmitHashPolicy & 4
#BOND_XMIT_HASH_POLICY_VLAN_SRCMAC: #BondXmitHashPolicy & 5
#BOND_XMIT_HASH_POLICY_UNKNOWN:     #BondXmitHashPolicy & 6

// BondLacpRate type
#BondLacpRate: int // #enumBondLacpRate

#enumBondLacpRate:
	#BOND_LACP_RATE_SLOW |
	#BOND_LACP_RATE_FAST |
	#BOND_LACP_RATE_UNKNOWN

#values_BondLacpRate: {
	BOND_LACP_RATE_SLOW:    #BOND_LACP_RATE_SLOW
	BOND_LACP_RATE_FAST:    #BOND_LACP_RATE_FAST
	BOND_LACP_RATE_UNKNOWN: #BOND_LACP_RATE_UNKNOWN
}

#BOND_LACP_RATE_SLOW:    #BondLacpRate & 0
#BOND_LACP_RATE_FAST:    #BondLacpRate & 1
#BOND_LACP_RATE_UNKNOWN: #BondLacpRate & 2

// BondAdSelect type
#BondAdSelect: int // #enumBondAdSelect

#enumBondAdSelect:
	#BOND_AD_SELECT_STABLE |
	#BOND_AD_SELECT_BANDWIDTH |
	#BOND_AD_SELECT_COUNT

#values_BondAdSelect: {
	BOND_AD_SELECT_STABLE:    #BOND_AD_SELECT_STABLE
	BOND_AD_SELECT_BANDWIDTH: #BOND_AD_SELECT_BANDWIDTH
	BOND_AD_SELECT_COUNT:     #BOND_AD_SELECT_COUNT
}

#BOND_AD_SELECT_STABLE:    #BondAdSelect & 0
#BOND_AD_SELECT_BANDWIDTH: #BondAdSelect & 1
#BOND_AD_SELECT_COUNT:     #BondAdSelect & 2

// BondAdInfo represents ad info for bond
#BondAdInfo: {
	AggregatorId: int
	NumPorts:     int
	ActorKey:     int
	PartnerKey:   int
	PartnerMac:   _ @go(,net.HardwareAddr)
}

// Bond representation
#Bond: {
	LinkAttrs:   #LinkAttrs
	Mode:        #BondMode
	ActiveSlave: int
	Miimon:      int
	UpDelay:     int
	DownDelay:   int
	UseCarrier:  int
	ArpInterval: int
	ArpIpTargets: [...string] @go(,[]net.IP)
	ArpValidate:     #BondArpValidate
	ArpAllTargets:   #BondArpAllTargets
	Primary:         int
	PrimaryReselect: #BondPrimaryReselect
	FailOverMac:     #BondFailOverMac
	XmitHashPolicy:  #BondXmitHashPolicy
	ResendIgmp:      int
	NumPeerNotif:    int
	AllSlavesActive: int
	MinLinks:        int
	LpInterval:      int
	PacketsPerSlave: int
	LacpRate:        #BondLacpRate
	AdSelect:        #BondAdSelect

	// looking at iproute tool AdInfo can only be retrived. It can't be set.
	AdInfo?:        null | #BondAdInfo @go(,*BondAdInfo)
	AdActorSysPrio: int
	AdUserPortKey:  int
	AdActorSystem:  _ @go(,net.HardwareAddr)
	TlbDynamicLb:   int
}

#BOND_MODE_MASK:              uint64 & 2
#BOND_ACTIVE_SLAVE_MASK:      uint64 & 4
#BOND_MIIMON_MASK:            uint64 & 8
#BOND_UPDELAY_MASK:           uint64 & 16
#BOND_DOWNDELAY_MASK:         uint64 & 32
#BOND_USE_CARRIER_MASK:       uint64 & 64
#BOND_ARP_INTERVAL_MASK:      uint64 & 128
#BOND_ARP_VALIDATE_MASK:      uint64 & 256
#BOND_ARP_ALL_TARGETS_MASK:   uint64 & 512
#BOND_PRIMARY_MASK:           uint64 & 1024
#BOND_PRIMARY_RESELECT_MASK:  uint64 & 2048
#BOND_FAIL_OVER_MAC_MASK:     uint64 & 4096
#BOND_XMIT_HASH_POLICY_MASK:  uint64 & 8192
#BOND_RESEND_IGMP_MASK:       uint64 & 16384
#BOND_NUM_PEER_NOTIF_MASK:    uint64 & 32768
#BOND_ALL_SLAVES_ACTIVE_MASK: uint64 & 65536
#BOND_MIN_LINKS_MASK:         uint64 & 131072
#BOND_LP_INTERVAL_MASK:       uint64 & 262144
#BOND_PACKETS_PER_SLAVE_MASK: uint64 & 524288
#BOND_LACP_RATE_MASK:         uint64 & 1048576
#BOND_AD_SELECT_MASK:         uint64 & 2097152

// BondSlaveState represents the values of the IFLA_BOND_SLAVE_STATE bond slave
// attribute, which contains the state of the bond slave.
#BondSlaveState: uint8 // #enumBondSlaveState

#enumBondSlaveState:
	#BondStateActive |
	#BondStateBackup

#values_BondSlaveState: {
	BondStateActive: #BondStateActive
	BondStateBackup: #BondStateBackup
}

//BondStateActive Link is active.
#BondStateActive: #BondSlaveState & 0

//BondStateBackup Link is backup.
#BondStateBackup: #BondSlaveState & 1

// BondSlaveMiiStatus represents the values of the IFLA_BOND_SLAVE_MII_STATUS bond slave
// attribute, which contains the status of MII link monitoring
#BondSlaveMiiStatus: uint8 // #enumBondSlaveMiiStatus

#enumBondSlaveMiiStatus:
	#BondLinkUp |
	#BondLinkFail |
	#BondLinkDown |
	#BondLinkBack

#values_BondSlaveMiiStatus: {
	BondLinkUp:   #BondLinkUp
	BondLinkFail: #BondLinkFail
	BondLinkDown: #BondLinkDown
	BondLinkBack: #BondLinkBack
}

//BondLinkUp link is up and running.
#BondLinkUp: #BondSlaveMiiStatus & 0

//BondLinkFail link has just gone down.
#BondLinkFail: #BondSlaveMiiStatus & 1

//BondLinkDown link has been down for too long time.
#BondLinkDown: #BondSlaveMiiStatus & 2

//BondLinkBack link is going back.
#BondLinkBack: #BondSlaveMiiStatus & 3

#BondSlave: {
	State:                  #BondSlaveState
	MiiStatus:              #BondSlaveMiiStatus
	LinkFailureCount:       uint32
	PermHardwareAddr:       _ @go(,net.HardwareAddr)
	QueueId:                uint16
	AggregatorId:           uint16
	AdActorOperPortState:   uint8
	AdPartnerOperPortState: uint16
}

#VrfSlave: Table: uint32

// Geneve devices must specify RemoteIP and ID (VNI) on create
// https://github.com/torvalds/linux/blob/47ec5303d73ea344e84f46660fff693c57641386/drivers/net/geneve.c#L1209-L1223
#Geneve: {
	LinkAttrs:         #LinkAttrs
	ID:                uint32
	Remote:            string @go(,net.IP)
	Ttl:               uint8
	Tos:               uint8
	Dport:             uint16
	UdpCsum:           uint8
	UdpZeroCsum6Tx:    uint8
	UdpZeroCsum6Rx:    uint8
	Link:              uint32
	FlowBased:         bool
	InnerProtoInherit: bool
	Df:                #GeneveDf
	PortLow:           int
	PortHigh:          int
}

#GeneveDf: uint8 // #enumGeneveDf

#enumGeneveDf:
	#GENEVE_DF_UNSET |
	#GENEVE_DF_SET |
	#GENEVE_DF_INHERIT |
	#GENEVE_DF_MAX

#values_GeneveDf: {
	GENEVE_DF_UNSET:   #GENEVE_DF_UNSET
	GENEVE_DF_SET:     #GENEVE_DF_SET
	GENEVE_DF_INHERIT: #GENEVE_DF_INHERIT
	GENEVE_DF_MAX:     #GENEVE_DF_MAX
}

#GENEVE_DF_UNSET:   #GeneveDf & 0
#GENEVE_DF_SET:     #GeneveDf & 1
#GENEVE_DF_INHERIT: #GeneveDf & 2
#GENEVE_DF_MAX:     #GeneveDf & 3

// Gretap devices must specify LocalIP and RemoteIP on create
#Gretap: {
	LinkAttrs:  #LinkAttrs
	IKey:       uint32
	OKey:       uint32
	EncapSport: uint16
	EncapDport: uint16
	Local:      string @go(,net.IP)
	Remote:     string @go(,net.IP)
	IFlags:     uint16
	OFlags:     uint16
	PMtuDisc:   uint8
	Ttl:        uint8
	Tos:        uint8
	EncapType:  uint16
	EncapFlags: uint16
	Link:       uint32
	FlowBased:  bool
}

#Iptun: {
	LinkAttrs:  #LinkAttrs
	Ttl:        uint8
	Tos:        uint8
	PMtuDisc:   uint8
	Link:       uint32
	Local:      string @go(,net.IP)
	Remote:     string @go(,net.IP)
	EncapSport: uint16
	EncapDport: uint16
	EncapType:  uint16
	EncapFlags: uint16
	FlowBased:  bool
	Proto:      uint8
}

#Ip6tnl: {
	LinkAttrs:  #LinkAttrs
	Link:       uint32
	Local:      string @go(,net.IP)
	Remote:     string @go(,net.IP)
	Ttl:        uint8
	Tos:        uint8
	Flags:      uint32
	Proto:      uint8
	FlowInfo:   uint32
	EncapLimit: uint8
	EncapType:  uint16
	EncapFlags: uint16
	EncapSport: uint16
	EncapDport: uint16
	FlowBased:  bool
}

// from https://elixir.bootlin.com/linux/v5.15.4/source/include/uapi/linux/if_tunnel.h#L84
#TunnelEncapType: uint16 // #enumTunnelEncapType

#enumTunnelEncapType:
	#None |
	#FOU |
	#GUE

#values_TunnelEncapType: {
	None: #None
	FOU:  #FOU
	GUE:  #GUE
}

#None: #TunnelEncapType & 0
#FOU:  #TunnelEncapType & 1
#GUE:  #TunnelEncapType & 2

// from https://elixir.bootlin.com/linux/v5.15.4/source/include/uapi/linux/if_tunnel.h#L91
#TunnelEncapFlag: uint16 // #enumTunnelEncapFlag

#enumTunnelEncapFlag:
	#CSum

#values_TunnelEncapFlag: CSum: #CSum

#CSum:    #TunnelEncapFlag & 1
#CSum6:   2
#RemCSum: 4

// from https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/ip6_tunnel.h#L12
#IP6TunnelFlag: uint16 // #enumIP6TunnelFlag

#enumIP6TunnelFlag:
	#IP6_TNL_F_IGN_ENCAP_LIMIT

#values_IP6TunnelFlag: IP6_TNL_F_IGN_ENCAP_LIMIT: #IP6_TNL_F_IGN_ENCAP_LIMIT

#IP6_TNL_F_IGN_ENCAP_LIMIT:    #IP6TunnelFlag & 1
#IP6_TNL_F_USE_ORIG_TCLASS:    2
#IP6_TNL_F_USE_ORIG_FLOWLABEL: 4
#IP6_TNL_F_MIP6_DEV:           8
#IP6_TNL_F_RCV_DSCP_COPY:      10
#IP6_TNL_F_USE_ORIG_FWMARK:    20
#IP6_TNL_F_ALLOW_LOCAL_REMOTE: 40

#Sittun: {
	LinkAttrs:  #LinkAttrs
	Link:       uint32
	Ttl:        uint8
	Tos:        uint8
	PMtuDisc:   uint8
	Proto:      uint8
	Local:      string @go(,net.IP)
	Remote:     string @go(,net.IP)
	EncapLimit: uint8
	EncapType:  uint16
	EncapFlags: uint16
	EncapSport: uint16
	EncapDport: uint16
}

#Vti: {
	LinkAttrs: #LinkAttrs
	IKey:      uint32
	OKey:      uint32
	Link:      uint32
	Local:     string @go(,net.IP)
	Remote:    string @go(,net.IP)
}

#Gretun: {
	LinkAttrs:  #LinkAttrs
	Link:       uint32
	IFlags:     uint16
	OFlags:     uint16
	IKey:       uint32
	OKey:       uint32
	Local:      string @go(,net.IP)
	Remote:     string @go(,net.IP)
	Ttl:        uint8
	Tos:        uint8
	PMtuDisc:   uint8
	EncapType:  uint16
	EncapFlags: uint16
	EncapSport: uint16
	EncapDport: uint16
	FlowBased:  bool
}

#Vrf: {
	LinkAttrs: #LinkAttrs
	Table:     uint32
}

#GTP: {
	LinkAttrs:   #LinkAttrs
	FD0:         int
	FD1:         int
	Role:        int
	PDPHashsize: int
}

// Virtual XFRM Interfaces
//
//	Named "xfrmi" to prevent confusion with XFRM objects
#Xfrmi: {
	LinkAttrs: #LinkAttrs
	Ifid:      uint32
}

#IPoIBMode: uint16

#IPOIB_MODE_DATAGRAM:  0
#IPOIB_MODE_CONNECTED: 1

#CAN_STATE_ERROR_ACTIVE:  0
#CAN_STATE_ERROR_WARNING: 1
#CAN_STATE_ERROR_PASSIVE: 2
#CAN_STATE_BUS_OFF:       3
#CAN_STATE_STOPPED:       4
#CAN_STATE_SLEEPING:      5

#Can: {
	LinkAttrs:           #LinkAttrs
	BitRate:             uint32
	SamplePoint:         uint32
	TimeQuanta:          uint32
	PropagationSegment:  uint32
	PhaseSegment1:       uint32
	PhaseSegment2:       uint32
	SyncJumpWidth:       uint32
	BitRatePreScaler:    uint32
	Name:                string
	TimeSegment1Min:     uint32
	TimeSegment1Max:     uint32
	TimeSegment2Min:     uint32
	TimeSegment2Max:     uint32
	SyncJumpWidthMax:    uint32
	BitRatePreScalerMin: uint32
	BitRatePreScalerMax: uint32
	BitRatePreScalerInc: uint32
	ClockFrequency:      uint32
	State:               uint32
	Mask:                uint32
	Flags:               uint32
	TxError:             uint16
	RxError:             uint16
	RestartMs:           uint32
}

#IPoIB: {
	LinkAttrs: #LinkAttrs
	Pkey:      uint16
	Mode:      #IPoIBMode
	Umcast:    uint16
}

#BareUDP: {
	LinkAttrs:  #LinkAttrs
	Port:       uint16
	EtherType:  uint16
	SrcPortMin: uint16
	MultiProto: bool
}
