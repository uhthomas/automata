// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/envoyproxy/gateway/api/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"
)

// KindHTTPRouteFilter is the name of the HTTPRouteFilter kind.
#KindHTTPRouteFilter: "HTTPRouteFilter"

// InjectedCredentialKey is the key in the secret where the injected credential is stored.
#InjectedCredentialKey: "credential"

// HTTPRouteFilter is a custom Envoy Gateway HTTPRouteFilter which provides extended
// traffic processing options such as path regex rewrite, direct response and more.
#HTTPRouteFilter: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec defines the desired state of HTTPRouteFilter.
	spec: #HTTPRouteFilterSpec @go(Spec)
}

// HTTPRouteFilterSpec defines the desired state of HTTPRouteFilter.
// +union
#HTTPRouteFilterSpec: {
	// +optional
	urlRewrite?: null | #HTTPURLRewriteFilter @go(URLRewrite,*HTTPURLRewriteFilter)

	// +optional
	directResponse?: null | #HTTPDirectResponseFilter @go(DirectResponse,*HTTPDirectResponseFilter)

	// +optional
	credentialInjection?: null | #HTTPCredentialInjectionFilter @go(CredentialInjection,*HTTPCredentialInjectionFilter)
}

// HTTPURLRewriteFilter define rewrites of HTTP URL components such as path and host
#HTTPURLRewriteFilter: {
	// Hostname is the value to be used to replace the Host header value during
	// forwarding.
	//
	// +optional
	hostname?: null | #HTTPHostnameModifier @go(Hostname,*HTTPHostnameModifier)

	// Path defines a path rewrite.
	//
	// +optional
	path?: null | #HTTPPathModifier @go(Path,*HTTPPathModifier)
}

// HTTPDirectResponseFilter defines the configuration to return a fixed response.
#HTTPDirectResponseFilter: {
	// Content Type of the response. This will be set in the Content-Type header.
	//
	// +optional
	contentType?: null | string @go(ContentType,*string)

	// Body of the Response
	//
	// +optional
	body?: null | #CustomResponseBody @go(Body,*CustomResponseBody)

	// Status Code of the HTTP response
	// If unset, defaults to 200.
	// +optional
	statusCode?: null | int @go(StatusCode,*int)
}

// HTTPPathModifierType defines the type of path redirect or rewrite.
#HTTPPathModifierType: string // #enumHTTPPathModifierType

#enumHTTPPathModifierType:
	#RegexHTTPPathModifier

// RegexHTTPPathModifier This type of modifier indicates that the portions of the path that match the specified
//  regex would be substituted with the specified substitution value
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/type/matcher/v3/regex.proto#type-matcher-v3-regexmatchandsubstitute
#RegexHTTPPathModifier: #HTTPPathModifierType & "ReplaceRegexMatch"

// HTTPPathModifierType defines the type of Hostname rewrite.
#HTTPHostnameModifierType: string // #enumHTTPHostnameModifierType

#enumHTTPHostnameModifierType:
	#HeaderHTTPHostnameModifier |
	#BackendHTTPHostnameModifier

// HeaderHTTPHostnameModifier indicates that the Host header value would be replaced with the value of the header specified in header.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-host-rewrite-header
#HeaderHTTPHostnameModifier: #HTTPHostnameModifierType & "Header"

// BackendHTTPHostnameModifier indicates that the Host header value would be replaced by the DNS name of the backend if it exists.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-auto-host-rewrite
#BackendHTTPHostnameModifier: #HTTPHostnameModifierType & "Backend"

#ReplaceRegexMatch: {
	// Pattern matches a regular expression against the value of the HTTP Path.The regex string must
	// adhere to the syntax documented in https://github.com/google/re2/wiki/Syntax.
	// +kubebuilder:validation:MinLength=1
	pattern: string @go(Pattern)

	// Substitution is an expression that replaces the matched portion.The expression may include numbered
	// capture groups that adhere to syntax documented in https://github.com/google/re2/wiki/Syntax.
	substitution: string @go(Substitution)
}

// +kubebuilder:validation:XValidation:rule="self.type == 'ReplaceRegexMatch' ? has(self.replaceRegexMatch) : !has(self.replaceRegexMatch)",message="If HTTPPathModifier type is ReplaceRegexMatch, replaceRegexMatch field needs to be set."
#HTTPPathModifier: {
	// +kubebuilder:validation:Enum=ReplaceRegexMatch
	// +kubebuilder:validation:Required
	type: #HTTPPathModifierType @go(Type)

	// ReplaceRegexMatch defines a path regex rewrite. The path portions matched by the regex pattern are replaced by the defined substitution.
	// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite
	// Some examples:
	// (1) replaceRegexMatch:
	//       pattern: ^/service/([^/]+)(/.*)$
	//       substitution: \2/instance/\1
	//     Would transform /service/foo/v1/api into /v1/api/instance/foo.
	// (2) replaceRegexMatch:
	//       pattern: one
	//       substitution: two
	//     Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/two/zzz.
	// (3) replaceRegexMatch:
	//       pattern: ^(.*?)one(.*)$
	//       substitution: \1two\2
	//     Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/one/zzz.
	// (3) replaceRegexMatch:
	//       pattern: (?i)/xxx/
	//       substitution: /yyy/
	//     Would transform path /aaa/XxX/bbb into /aaa/yyy/bbb (case-insensitive).
	// +optional
	replaceRegexMatch?: null | #ReplaceRegexMatch @go(ReplaceRegexMatch,*ReplaceRegexMatch)
}

// +kubebuilder:validation:XValidation:message="header must be nil if the type is not Header",rule="!(has(self.header) && self.type != 'Header')"
// +kubebuilder:validation:XValidation:message="header must be specified for Header type",rule="!(!has(self.header) && self.type == 'Header')"
#HTTPHostnameModifier: {
	// +kubebuilder:validation:Enum=Header;Backend
	// +kubebuilder:validation:Required
	type: #HTTPHostnameModifierType @go(Type)

	// Header is the name of the header whose value would be used to rewrite the Host header
	// +optional
	header?: null | string @go(Header,*string)
}

// HTTPCredentialInjectionFilter defines the configuration to inject credentials into the request.
// This is useful when the backend service requires credentials in the request, and the original
// request does not contain them. The filter can inject credentials into the request before forwarding
// it to the backend service.
// +notImplementedHide
#HTTPCredentialInjectionFilter: {
	// Header is the name of the header where the credentials are injected.
	// If not specified, the credentials are injected into the Authorization header.
	// +optional
	header?: null | string @go(Header,*string)

	// Whether to overwrite the value or not if the injected headers already exist.
	// If not specified, the default value is false.
	// +optional
	overwrite?: null | bool @go(Overwrite,*bool)

	// Credential is the credential to be injected.
	credential: #InjectedCredential @go(Credential)
}

// InjectedCredential defines the credential to be injected.
// +notImplementedHide
#InjectedCredential: {
	// ValueRef is a reference to the secret containing the credentials to be injected.
	// This is an Opaque secret. The credential should be stored in the key
	// "credential", and the value should be the credential to be injected.
	// For example, for basic authentication, the value should be "Basic <base64 encoded username:password>".
	// for bearer token, the value should be "Bearer <token>".
	// Note: The secret must be in the same namespace as the HTTPRouteFilter.
	valueRef: gwapiv1.#SecretObjectReference @go(ValueRef)
}

// HTTPRouteFilterList contains a list of HTTPRouteFilter resources.
#HTTPRouteFilterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#HTTPRouteFilter] @go(Items,[]HTTPRouteFilter)
}
