// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/envoyproxy/gateway/api/v1alpha1

package v1alpha1

#ProxyAccessLog: {
	// Disable disables access logging for managed proxies if set to true.
	//
	// +optional
	disable?: null | bool @go(Disable,*bool)

	// Settings defines accesslog settings for managed proxies.
	// If unspecified, will send default format to stdout.
	// +optional
	// +kubebuilder:validation:MinItems=1
	// +kubebuilder:validation:MaxItems=50
	settings?: [...#ProxyAccessLogSetting] @go(Settings,[]ProxyAccessLogSetting)
}

#ProxyAccessLogSetting: {
	// Format defines the format of accesslog.
	// This will be ignored if sink type is ALS.
	// +optional
	format?: null | #ProxyAccessLogFormat @go(Format,*ProxyAccessLogFormat)

	// Matches defines the match conditions for accesslog in CEL expression.
	// An accesslog will be emitted only when one or more match conditions are evaluated to true.
	// Invalid [CEL](https://www.envoyproxy.io/docs/envoy/latest/xds/type/v3/cel.proto.html#common-expression-language-cel-proto) expressions will be ignored.
	// +kubebuilder:validation:MaxItems=10
	matches?: [...string] @go(Matches,[]string)

	// Sinks defines the sinks of accesslog.
	// +kubebuilder:validation:MinItems=1
	// +kubebuilder:validation:MaxItems=50
	sinks: [...#ProxyAccessLogSink] @go(Sinks,[]ProxyAccessLogSink)

	// Type defines the component emitting the accesslog, such as Listener and Route.
	// If type not defined, the setting would apply to:
	// (1) All Routes.
	// (2) Listeners if and only if Envoy does not find a matching route for a request.
	// If type is defined, the accesslog settings would apply to the relevant component (as-is).
	// +kubebuilder:validation:Enum=Listener;Route
	// +optional
	type?: null | #ProxyAccessLogType @go(Type,*ProxyAccessLogType)
}

#ProxyAccessLogType: string // #enumProxyAccessLogType

#enumProxyAccessLogType:
	#ProxyAccessLogTypeListener |
	#ProxyAccessLogTypeRoute

// ProxyAccessLogTypeListener defines the accesslog for Listeners.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#envoy-v3-api-field-config-listener-v3-listener-access-log
#ProxyAccessLogTypeListener: #ProxyAccessLogType & "Listener"

// ProxyAccessLogTypeRoute defines the accesslog for HTTP, GRPC, UDP and TCP Routes.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto#envoy-v3-api-field-extensions-filters-udp-udp-proxy-v3-udpproxyconfig-access-log
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/tcp_proxy/v3/tcp_proxy.proto#envoy-v3-api-field-extensions-filters-network-tcp-proxy-v3-tcpproxy-access-log
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-access-log
#ProxyAccessLogTypeRoute: #ProxyAccessLogType & "Route"

#ProxyAccessLogFormatType: string // #enumProxyAccessLogFormatType

#enumProxyAccessLogFormatType:
	#ProxyAccessLogFormatTypeText |
	#ProxyAccessLogFormatTypeJSON

// ProxyAccessLogFormatTypeText defines the text accesslog format.
#ProxyAccessLogFormatTypeText: #ProxyAccessLogFormatType & "Text"

// ProxyAccessLogFormatTypeJSON defines the JSON accesslog format.
#ProxyAccessLogFormatTypeJSON: #ProxyAccessLogFormatType & "JSON"

// ProxyAccessLogFormat defines the format of accesslog.
// By default accesslogs are written to standard output.
// +union
//
// +kubebuilder:validation:XValidation:rule="self.type == 'Text' ? has(self.text) : !has(self.text)",message="If AccessLogFormat type is Text, text field needs to be set."
// +kubebuilder:validation:XValidation:rule="self.type == 'JSON' ? has(self.json) : !has(self.json)",message="If AccessLogFormat type is JSON, json field needs to be set."
#ProxyAccessLogFormat: {
	// Type defines the type of accesslog format.
	// +kubebuilder:validation:Enum=Text;JSON
	// +unionDiscriminator
	type?: #ProxyAccessLogFormatType @go(Type)

	// Text defines the text accesslog format, following Envoy accesslog formatting,
	// It's required when the format type is "Text".
	// Envoy [command operators](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators) may be used in the format.
	// The [format string documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#config-access-log-format-strings) provides more information.
	// +optional
	text?: null | string @go(Text,*string)

	// JSON is additional attributes that describe the specific event occurrence.
	// Structured format for the envoy access logs. Envoy [command operators](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage#command-operators)
	// can be used as values for fields within the Struct.
	// It's required when the format type is "JSON".
	// +optional
	json?: {[string]: string} @go(JSON,map[string]string)
}

#ProxyAccessLogSinkType: string // #enumProxyAccessLogSinkType

#enumProxyAccessLogSinkType:
	#ProxyAccessLogSinkTypeALS |
	#ProxyAccessLogSinkTypeFile |
	#ProxyAccessLogSinkTypeOpenTelemetry

// ProxyAccessLogSinkTypeALS defines the gRPC Access Log Service (ALS) sink.
// The service must implement the Envoy gRPC Access Log Service streaming API:
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto
#ProxyAccessLogSinkTypeALS: #ProxyAccessLogSinkType & "ALS"

// ProxyAccessLogSinkTypeFile defines the file accesslog sink.
#ProxyAccessLogSinkTypeFile: #ProxyAccessLogSinkType & "File"

// ProxyAccessLogSinkTypeOpenTelemetry defines the OpenTelemetry accesslog sink.
// When the provider is Kubernetes, EnvoyGateway always sends `k8s.namespace.name`
// and `k8s.pod.name` as additional attributes.
#ProxyAccessLogSinkTypeOpenTelemetry: #ProxyAccessLogSinkType & "OpenTelemetry"

// ProxyAccessLogSink defines the sink of accesslog.
// +union
//
// +kubebuilder:validation:XValidation:rule="self.type == 'ALS' ? has(self.als) : !has(self.als)",message="If AccessLogSink type is ALS, als field needs to be set."
// +kubebuilder:validation:XValidation:rule="self.type == 'File' ? has(self.file) : !has(self.file)",message="If AccessLogSink type is File, file field needs to be set."
// +kubebuilder:validation:XValidation:rule="self.type == 'OpenTelemetry' ? has(self.openTelemetry) : !has(self.openTelemetry)",message="If AccessLogSink type is OpenTelemetry, openTelemetry field needs to be set."
#ProxyAccessLogSink: {
	// Type defines the type of accesslog sink.
	// +kubebuilder:validation:Enum=ALS;File;OpenTelemetry
	// +unionDiscriminator
	type?: #ProxyAccessLogSinkType @go(Type)

	// ALS defines the gRPC Access Log Service (ALS) sink.
	// +optional
	als?: null | #ALSEnvoyProxyAccessLog @go(ALS,*ALSEnvoyProxyAccessLog)

	// File defines the file accesslog sink.
	// +optional
	file?: null | #FileEnvoyProxyAccessLog @go(File,*FileEnvoyProxyAccessLog)

	// OpenTelemetry defines the OpenTelemetry accesslog sink.
	// +optional
	openTelemetry?: null | #OpenTelemetryEnvoyProxyAccessLog @go(OpenTelemetry,*OpenTelemetryEnvoyProxyAccessLog)
}

#ALSEnvoyProxyAccessLogType: string // #enumALSEnvoyProxyAccessLogType

#enumALSEnvoyProxyAccessLogType:
	#ALSEnvoyProxyAccessLogTypeHTTP |
	#ALSEnvoyProxyAccessLogTypeTCP

// ALSEnvoyProxyAccessLogTypeHTTP defines the HTTP access log type and will populate StreamAccessLogsMessage.http_logs.
#ALSEnvoyProxyAccessLogTypeHTTP: #ALSEnvoyProxyAccessLogType & "HTTP"

// ALSEnvoyProxyAccessLogTypeTCP defines the TCP access log type and will populate StreamAccessLogsMessage.tcp_logs.
#ALSEnvoyProxyAccessLogTypeTCP: #ALSEnvoyProxyAccessLogType & "TCP"

// ALSEnvoyProxyAccessLog defines the gRPC Access Log Service (ALS) sink.
// The service must implement the Envoy gRPC Access Log Service streaming API:
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/accesslog/v3/als.proto
// Access log format information is passed in the form of gRPC metadata when the
// stream is established.
//
// +kubebuilder:validation:XValidation:rule="self.type == 'HTTP' || !has(self.http)",message="The http field may only be set when type is HTTP."
// +kubebuilder:validation:XValidation:message="BackendRefs must be used, backendRef is not supported.",rule="!has(self.backendRef)"
// +kubebuilder:validation:XValidation:message="must have at least one backend in backendRefs",rule="has(self.backendRefs) && self.backendRefs.size() > 0"
// +kubebuilder:validation:XValidation:message="BackendRefs only support Service and Backend kind.",rule="has(self.backendRefs) ? self.backendRefs.all(f, f.kind == 'Service' || f.kind == 'Backend') : true"
// +kubebuilder:validation:XValidation:message="BackendRefs only support Core and gateway.envoyproxy.io group.",rule="has(self.backendRefs) ? (self.backendRefs.all(f, f.group == \"\" || f.group == 'gateway.envoyproxy.io')) : true"
#ALSEnvoyProxyAccessLog: {
	#BackendCluster

	// LogName defines the friendly name of the access log to be returned in
	// StreamAccessLogsMessage.Identifier. This allows the access log server
	// to differentiate between different access logs coming from the same Envoy.
	// +optional
	// +kubebuilder:validation:MinLength=1
	logName?: null | string @go(LogName,*string)

	// Type defines the type of accesslog. Supported types are "HTTP" and "TCP".
	// +kubebuilder:validation:Enum=HTTP;TCP
	type: #ALSEnvoyProxyAccessLogType @go(Type)

	// HTTP defines additional configuration specific to HTTP access logs.
	// +optional
	http?: null | #ALSEnvoyProxyHTTPAccessLogConfig @go(HTTP,*ALSEnvoyProxyHTTPAccessLogConfig)
}

#ALSEnvoyProxyHTTPAccessLogConfig: {
	// RequestHeaders defines request headers to include in log entries sent to the access log service.
	// +optional
	requestHeaders?: [...string] @go(RequestHeaders,[]string)

	// ResponseHeaders defines response headers to include in log entries sent to the access log service.
	// +optional
	responseHeaders?: [...string] @go(ResponseHeaders,[]string)

	// ResponseTrailers defines response trailers to include in log entries sent to the access log service.
	// +optional
	responseTrailers?: [...string] @go(ResponseTrailers,[]string)
}

#FileEnvoyProxyAccessLog: {
	// Path defines the file path used to expose envoy access log(e.g. /dev/stdout).
	// +kubebuilder:validation:MinLength=1
	path?: string @go(Path)
}

// OpenTelemetryEnvoyProxyAccessLog defines the OpenTelemetry access log sink.
//
// +kubebuilder:validation:XValidation:message="host or backendRefs needs to be set",rule="has(self.host) || self.backendRefs.size() > 0"
// +kubebuilder:validation:XValidation:message="BackendRefs must be used, backendRef is not supported.",rule="!has(self.backendRef)"
// +kubebuilder:validation:XValidation:message="BackendRefs only support Service and Backend kind.",rule="has(self.backendRefs) ? self.backendRefs.all(f, f.kind == 'Service' || f.kind == 'Backend') : true"
// +kubebuilder:validation:XValidation:message="BackendRefs only support Core and gateway.envoyproxy.io group.",rule="has(self.backendRefs) ? (self.backendRefs.all(f, f.group == \"\" || f.group == 'gateway.envoyproxy.io')) : true"
#OpenTelemetryEnvoyProxyAccessLog: {
	#BackendCluster

	// Host define the extension service hostname.
	// Deprecated: Use BackendRefs instead.
	//
	// +optional
	host?: null | string @go(Host,*string)

	// Port defines the port the extension service is exposed on.
	// Deprecated: Use BackendRefs instead.
	//
	// +optional
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:default=4317
	port?: int32 @go(Port)

	// Resources is a set of labels that describe the source of a log entry, including envoy node info.
	// It's recommended to follow [semantic conventions](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/).
	// +optional
	resources?: {[string]: string} @go(Resources,map[string]string)
}
