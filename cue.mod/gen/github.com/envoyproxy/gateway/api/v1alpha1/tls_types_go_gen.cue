// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/envoyproxy/gateway/api/v1alpha1

package v1alpha1

import gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"

#ClientTLSSettings: {
	// ClientValidation specifies the configuration to validate the client
	// initiating the TLS connection to the Gateway listener.
	// +optional
	clientValidation?: null | #ClientValidationContext @go(ClientValidation,*ClientValidationContext)

	#TLSSettings

	// Session defines settings related to TLS session management.
	// +optional
	session?: null | #Session @go(Session,*Session)
}

// +kubebuilder:validation:XValidation:rule="has(self.minVersion) && self.minVersion == '1.3' ? !has(self.ciphers) : true", message="setting ciphers has no effect if the minimum possible TLS version is 1.3"
// +kubebuilder:validation:XValidation:rule="has(self.minVersion) && has(self.maxVersion) ? {\"Auto\":0,\"1.0\":1,\"1.1\":2,\"1.2\":3,\"1.3\":4}[self.minVersion] <= {\"1.0\":1,\"1.1\":2,\"1.2\":3,\"1.3\":4,\"Auto\":5}[self.maxVersion] : !has(self.minVersion) && has(self.maxVersion) ? 3 <= {\"1.0\":1,\"1.1\":2,\"1.2\":3,\"1.3\":4,\"Auto\":5}[self.maxVersion] : true", message="minVersion must be smaller or equal to maxVersion"
#TLSSettings: {
	// Min specifies the minimal TLS protocol version to allow.
	// The default is TLS 1.2 if this is not specified.
	//
	// +optional
	minVersion?: null | #TLSVersion @go(MinVersion,*TLSVersion)

	// Max specifies the maximal TLS protocol version to allow
	// The default is TLS 1.3 if this is not specified.
	//
	// +optional
	maxVersion?: null | #TLSVersion @go(MaxVersion,*TLSVersion)

	// Ciphers specifies the set of cipher suites supported when
	// negotiating TLS 1.0 - 1.2. This setting has no effect for TLS 1.3.
	// In non-FIPS Envoy Proxy builds the default cipher list is:
	// - [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
	// - [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
	// - ECDHE-ECDSA-AES256-GCM-SHA384
	// - ECDHE-RSA-AES256-GCM-SHA384
	// In builds using BoringSSL FIPS the default cipher list is:
	// - ECDHE-ECDSA-AES128-GCM-SHA256
	// - ECDHE-RSA-AES128-GCM-SHA256
	// - ECDHE-ECDSA-AES256-GCM-SHA384
	// - ECDHE-RSA-AES256-GCM-SHA384
	//
	// +optional
	ciphers?: [...string] @go(Ciphers,[]string)

	// ECDHCurves specifies the set of supported ECDH curves.
	// In non-FIPS Envoy Proxy builds the default curves are:
	// - X25519
	// - P-256
	// In builds using BoringSSL FIPS the default curve is:
	// - P-256
	//
	// +optional
	ecdhCurves?: [...string] @go(ECDHCurves,[]string)

	// SignatureAlgorithms specifies which signature algorithms the listener should
	// support.
	//
	// +optional
	signatureAlgorithms?: [...string] @go(SignatureAlgorithms,[]string)

	// ALPNProtocols supplies the list of ALPN protocols that should be
	// exposed by the listener or used by the proxy to connect to the backend.
	// Defaults:
	// 1. HTTPS Routes: h2 and http/1.1 are enabled in listener context.
	// 2. Other Routes: ALPN is disabled.
	// 3. Backends: proxy uses the appropriate ALPN options for the backend protocol.
	// When an empty list is provided, the ALPN TLS extension is disabled.
	// Supported values are:
	// - http/1.0
	// - http/1.1
	// - h2
	//
	// +optional
	alpnProtocols?: [...#ALPNProtocol] @go(ALPNProtocols,[]ALPNProtocol)
}

// ALPNProtocol specifies the protocol to be negotiated using ALPN
// +kubebuilder:validation:Enum=http/1.0;http/1.1;h2
#ALPNProtocol: string // #enumALPNProtocol

#enumALPNProtocol:
	#HTTPProtocolVersion1_0 |
	#HTTPProtocolVersion1_1 |
	#HTTPProtocolVersion2

// HTTPProtocolVersion1_0 specifies that HTTP/1.0 should be negotiable with ALPN
#HTTPProtocolVersion1_0: #ALPNProtocol & "http/1.0"

// HTTPProtocolVersion1_1 specifies that HTTP/1.1 should be negotiable with ALPN
#HTTPProtocolVersion1_1: #ALPNProtocol & "http/1.1"

// HTTPProtocolVersion2 specifies that HTTP/2 should be negotiable with ALPN
#HTTPProtocolVersion2: #ALPNProtocol & "h2"

// TLSVersion specifies the TLS version
// +kubebuilder:validation:Enum=Auto;"1.0";"1.1";"1.2";"1.3"
#TLSVersion: string // #enumTLSVersion

#enumTLSVersion:
	#TLSAuto |
	#TLSv10 |
	#TLSv11 |
	#TLSv12 |
	#TLSv13

// TLSAuto allows Envoy to choose the optimal TLS Version
#TLSAuto: #TLSVersion & "Auto"

// TLS1.0 specifies TLS version 1.0
#TLSv10: #TLSVersion & "1.0"

// TLS1.1 specifies TLS version 1.1
#TLSv11: #TLSVersion & "1.1"

// TLSv1.2 specifies TLS version 1.2
#TLSv12: #TLSVersion & "1.2"

// TLSv1.3 specifies TLS version 1.3
#TLSv13: #TLSVersion & "1.3"

// ClientValidationContext holds configuration that can be used to validate the client initiating the TLS connection
// to the Gateway.
// By default, no client specific configuration is validated.
#ClientValidationContext: {
	// Optional set to true accepts connections even when a client doesn't present a certificate.
	// Defaults to false, which rejects connections without a valid client certificate.
	// +optional
	optional?: bool @go(Optional)

	// CACertificateRefs contains one or more references to
	// Kubernetes objects that contain TLS certificates of
	// the Certificate Authorities that can be used
	// as a trust anchor to validate the certificates presented by the client.
	//
	// A single reference to a Kubernetes ConfigMap or a Kubernetes Secret,
	// with the CA certificate in a key named `ca.crt` is currently supported.
	//
	// References to a resource in different namespace are invalid UNLESS there
	// is a ReferenceGrant in the target namespace that allows the certificate
	// to be attached.
	//
	// +kubebuilder:validation:MaxItems=8
	// +optional
	caCertificateRefs?: [...gwapiv1.#SecretObjectReference] @go(CACertificateRefs,[]gwapiv1.SecretObjectReference)
}

// Session defines settings related to TLS session management.
#Session: {
	// Resumption determines the proxy's supported TLS session resumption option.
	// By default, Envoy Gateway does not enable session resumption. Use sessionResumption to
	// enable stateful and stateless session resumption. Users should consider security impacts
	// of different resumption methods. Performance gains from resumption are diminished when
	// Envoy proxy is deployed with more than one replica.
	// +optional
	resumption?: null | #SessionResumption @go(Resumption,*SessionResumption)
}

// SessionResumption defines supported tls session resumption methods and their associated configuration.
#SessionResumption: {
	// Stateless defines setting for stateless (session-ticket based) session resumption
	// +optional
	stateless?: null | #StatelessTLSSessionResumption @go(Stateless,*StatelessTLSSessionResumption)

	// Stateful defines setting for stateful (session-id based) session resumption
	// +optional
	stateful?: null | #StatefulTLSSessionResumption @go(Stateful,*StatefulTLSSessionResumption)
}

// StatefulTLSSessionResumption defines the stateful (session-id based) type of TLS session resumption.
// Note: When Envoy Proxy is deployed with more than one replica, session caches are not synchronized
// between instances, possibly leading to resumption failures.
// Envoy does not re-validate client certificates upon session resumption.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#config-route-v3-routematch-tlscontextmatchoptions
#StatefulTLSSessionResumption: {}

// StatelessTLSSessionResumption defines the stateless (session-ticket based) type of TLS session resumption.
// Note: When Envoy Proxy is deployed with more than one replica, session ticket encryption keys are not
// synchronized between instances, possibly leading to resumption failures.
// In-memory session ticket encryption keys are rotated every 48 hours.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/transport_sockets/tls/v3/common.proto#extensions-transport-sockets-tls-v3-tlssessionticketkeys
// https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Session-tickets
#StatelessTLSSessionResumption: {}
