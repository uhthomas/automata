// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/envoyproxy/gateway/api/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gwapiv1a2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// KindEnvoyExtensionPolicy is the name of the EnvoyExtensionPolicy kind.
#KindEnvoyExtensionPolicy: "EnvoyExtensionPolicy"

// EnvoyExtensionPolicy allows the user to configure various envoy extensibility options for the Gateway.
#EnvoyExtensionPolicy: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)

	// Spec defines the desired state of EnvoyExtensionPolicy.
	spec: #EnvoyExtensionPolicySpec @go(Spec)

	// Status defines the current status of EnvoyExtensionPolicy.
	status?: gwapiv1a2.#PolicyStatus @go(Status)
}

// EnvoyExtensionPolicySpec defines the desired state of EnvoyExtensionPolicy.
//
// +kubebuilder:validation:XValidation:rule="(has(self.targetRef) && !has(self.targetRefs)) || (!has(self.targetRef) && has(self.targetRefs)) || (has(self.targetSelectors) && self.targetSelectors.size() > 0) ", message="either targetRef or targetRefs must be used"
// +kubebuilder:validation:XValidation:rule="has(self.targetRef) ? self.targetRef.group == 'gateway.networking.k8s.io' : true", message="this policy can only have a targetRef.group of gateway.networking.k8s.io"
// +kubebuilder:validation:XValidation:rule="has(self.targetRef) ? self.targetRef.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute', 'UDPRoute', 'TCPRoute', 'TLSRoute'] : true", message="this policy can only have a targetRef.kind of Gateway/HTTPRoute/GRPCRoute/TCPRoute/UDPRoute/TLSRoute"
// +kubebuilder:validation:XValidation:rule="has(self.targetRef) ? !has(self.targetRef.sectionName) : true",message="this policy does not yet support the sectionName field"
// +kubebuilder:validation:XValidation:rule="has(self.targetRefs) ? self.targetRefs.all(ref, ref.group == 'gateway.networking.k8s.io') : true ", message="this policy can only have a targetRefs[*].group of gateway.networking.k8s.io"
// +kubebuilder:validation:XValidation:rule="has(self.targetRefs) ? self.targetRefs.all(ref, ref.kind in ['Gateway', 'HTTPRoute', 'GRPCRoute', 'UDPRoute', 'TCPRoute', 'TLSRoute']) : true ", message="this policy can only have a targetRefs[*].kind of Gateway/HTTPRoute/GRPCRoute/TCPRoute/UDPRoute/TLSRoute"
// +kubebuilder:validation:XValidation:rule="has(self.targetRefs) ? self.targetRefs.all(ref, !has(ref.sectionName)) : true",message="this policy does not yet support the sectionName field"
#EnvoyExtensionPolicySpec: {
	#PolicyTargetReferences

	// Wasm is a list of Wasm extensions to be loaded by the Gateway.
	// Order matters, as the extensions will be loaded in the order they are
	// defined in this list.
	//
	// +kubebuilder:validation:MaxItems=16
	// +optional
	wasm?: [...#Wasm] @go(Wasm,[]Wasm)

	// ExtProc is an ordered list of external processing filters
	// that should be added to the envoy filter chain
	//
	// +kubebuilder:validation:MaxItems=16
	// +optional
	extProc?: [...#ExtProc] @go(ExtProc,[]ExtProc)

	// Lua is an ordered list of Lua filters
	// that should be added to the envoy filter chain
	//
	// +kubebuilder:validation:MaxItems=16
	// +optional
	lua?: [...#Lua] @go(Lua,[]Lua)
}

// EnvoyExtensionPolicyList contains a list of EnvoyExtensionPolicy resources.
#EnvoyExtensionPolicyList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#EnvoyExtensionPolicy] @go(Items,[]EnvoyExtensionPolicy)
}
