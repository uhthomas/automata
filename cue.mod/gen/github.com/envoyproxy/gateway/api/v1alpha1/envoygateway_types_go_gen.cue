// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/envoyproxy/gateway/api/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"
	"k8s.io/apimachinery/pkg/api/resource"
)

// KindEnvoyGateway is the name of the EnvoyGateway kind.
#KindEnvoyGateway: "EnvoyGateway"

// GatewayControllerName is the name of the GatewayClass controller.
#GatewayControllerName: "gateway.envoyproxy.io/gatewayclass-controller"

// GatewayAdminPort is the port which envoy gateway admin server is listening on.
#GatewayAdminPort: 19000

// GatewayAdminHost is the host of envoy gateway admin server.
#GatewayAdminHost: "127.0.0.1"

// GatewayMetricsPort is the port which envoy gateway metrics server is listening on.
#GatewayMetricsPort: 19001

// GatewayMetricsHost is the host of envoy gateway metrics server.
#GatewayMetricsHost: "0.0.0.0"

// DefaultKubernetesClientQPS defines the default QPS limit for the Kubernetes client.
#DefaultKubernetesClientQPS: int32 & 50

// DefaultKubernetesClientBurst defines the default Burst limit for the Kubernetes client.
#DefaultKubernetesClientBurst: int32 & 100

// EnvoyGateway is the schema for the envoygateways API.
#EnvoyGateway: {
	metav1.#TypeMeta

	#EnvoyGatewaySpec
}

// EnvoyGatewaySpec defines the desired state of Envoy Gateway.
#EnvoyGatewaySpec: {
	// Gateway defines desired Gateway API specific configuration. If unset,
	// default configuration parameters will apply.
	//
	// +optional
	gateway?: null | #Gateway @go(Gateway,*Gateway)

	// Provider defines the desired provider and provider-specific configuration.
	// If unspecified, the Kubernetes provider is used with default configuration
	// parameters.
	//
	// +optional
	provider?: null | #EnvoyGatewayProvider @go(Provider,*EnvoyGatewayProvider)

	// Logging defines logging parameters for Envoy Gateway.
	//
	// +optional
	// +kubebuilder:default={default: info}
	logging?: null | #EnvoyGatewayLogging @go(Logging,*EnvoyGatewayLogging)

	// Admin defines the desired admin related abilities.
	// If unspecified, the Admin is used with default configuration
	// parameters.
	//
	// +optional
	admin?: null | #EnvoyGatewayAdmin @go(Admin,*EnvoyGatewayAdmin)

	// Telemetry defines the desired control plane telemetry related abilities.
	// If unspecified, the telemetry is used with default configuration.
	//
	// +optional
	telemetry?: null | #EnvoyGatewayTelemetry @go(Telemetry,*EnvoyGatewayTelemetry)

	// RateLimit defines the configuration associated with the Rate Limit service
	// deployed by Envoy Gateway required to implement the Global Rate limiting
	// functionality. The specific rate limit service used here is the reference
	// implementation in Envoy. For more details visit https://github.com/envoyproxy/ratelimit.
	// This configuration is unneeded for "Local" rate limiting.
	//
	// +optional
	rateLimit?: null | #RateLimit @go(RateLimit,*RateLimit)

	// ExtensionManager defines an extension manager to register for the Envoy Gateway Control Plane.
	//
	// +optional
	extensionManager?: null | #ExtensionManager @go(ExtensionManager,*ExtensionManager)

	// ExtensionAPIs defines the settings related to specific Gateway API Extensions
	// implemented by Envoy Gateway
	//
	// +optional
	extensionApis?: null | #ExtensionAPISettings @go(ExtensionAPIs,*ExtensionAPISettings)
}

#KubernetesClient: {
	// RateLimit defines the rate limit settings for the Kubernetes client.
	rateLimit?: null | #KubernetesClientRateLimit @go(RateLimit,*KubernetesClientRateLimit)
}

// KubernetesClientRateLimit defines the rate limit settings for the Kubernetes client.
#KubernetesClientRateLimit: {
	// QPS defines the queries per second limit for the Kubernetes client.
	// +optional
	// +kubebuilder:validation:Minimum=1
	// +kubebuilder:default=50
	qps?: null | int32 @go(QPS,*int32)

	// Burst defines the maximum burst of requests allowed when tokens have accumulated.
	// +optional
	// +kubebuilder:validation:Minimum=1
	// +kubebuilder:default=100
	burst?: null | int32 @go(Burst,*int32)
}

// LeaderElection defines the desired leader election settings.
#LeaderElection: {
	// LeaseDuration defines the time non-leader contenders will wait before attempting to claim leadership.
	// It's based on the timestamp of the last acknowledged signal. The default setting is 15 seconds.
	leaseDuration?: null | gwapiv1.#Duration @go(LeaseDuration,*gwapiv1.Duration)

	// RenewDeadline represents the time frame within which the current leader will attempt to renew its leadership
	// status before relinquishing its position. The default setting is 10 seconds.
	renewDeadline?: null | gwapiv1.#Duration @go(RenewDeadline,*gwapiv1.Duration)

	// RetryPeriod denotes the interval at which LeaderElector clients should perform action retries.
	// The default setting is 2 seconds.
	retryPeriod?: null | gwapiv1.#Duration @go(RetryPeriod,*gwapiv1.Duration)

	// Disable provides the option to turn off leader election, which is enabled by default.
	disable?: null | bool @go(Disable,*bool)
}

// EnvoyGatewayTelemetry defines telemetry configurations for envoy gateway control plane.
// Control plane will focus on metrics observability telemetry and tracing telemetry later.
#EnvoyGatewayTelemetry: {
	// Metrics defines metrics configuration for envoy gateway.
	metrics?: null | #EnvoyGatewayMetrics @go(Metrics,*EnvoyGatewayMetrics)
}

// EnvoyGatewayLogging defines logging for Envoy Gateway.
#EnvoyGatewayLogging: {
	// Level is the logging level. If unspecified, defaults to "info".
	// EnvoyGatewayLogComponent options: default/provider/gateway-api/xds-translator/xds-server/infrastructure/global-ratelimit.
	// LogLevel options: debug/info/error/warn.
	//
	// +kubebuilder:default={default: info}
	level?: {[string]: #LogLevel} @go(Level,map[EnvoyGatewayLogComponent]LogLevel)
}

// EnvoyGatewayLogComponent defines a component that supports a configured logging level.
// +kubebuilder:validation:Enum=default;provider;gateway-api;xds-translator;xds-server;infrastructure;global-ratelimit
#EnvoyGatewayLogComponent: string // #enumEnvoyGatewayLogComponent

#enumEnvoyGatewayLogComponent:
	#LogComponentGatewayDefault |
	#LogComponentProviderRunner |
	#LogComponentGatewayAPIRunner |
	#LogComponentXdsTranslatorRunner |
	#LogComponentXdsServerRunner |
	#LogComponentInfrastructureRunner |
	#LogComponentGlobalRateLimitRunner

// LogComponentGatewayDefault defines the "default"-wide logging component. When specified,
// all other logging components are ignored.
#LogComponentGatewayDefault: #EnvoyGatewayLogComponent & "default"

// LogComponentProviderRunner defines the "provider" runner component.
#LogComponentProviderRunner: #EnvoyGatewayLogComponent & "provider"

// LogComponentGatewayAPIRunner defines the "gateway-api" runner component.
#LogComponentGatewayAPIRunner: #EnvoyGatewayLogComponent & "gateway-api"

// LogComponentXdsTranslatorRunner defines the "xds-translator" runner component.
#LogComponentXdsTranslatorRunner: #EnvoyGatewayLogComponent & "xds-translator"

// LogComponentXdsServerRunner defines the "xds-server" runner component.
#LogComponentXdsServerRunner: #EnvoyGatewayLogComponent & "xds-server"

// LogComponentInfrastructureRunner defines the "infrastructure" runner component.
#LogComponentInfrastructureRunner: #EnvoyGatewayLogComponent & "infrastructure"

// LogComponentGlobalRateLimitRunner defines the "global-ratelimit" runner component.
#LogComponentGlobalRateLimitRunner: #EnvoyGatewayLogComponent & "global-ratelimit"

// Gateway defines the desired Gateway API configuration of Envoy Gateway.
#Gateway: {
	// ControllerName defines the name of the Gateway API controller. If unspecified,
	// defaults to "gateway.envoyproxy.io/gatewayclass-controller". See the following
	// for additional details:
	//   https://gateway-api.sigs.k8s.io/reference/spec/#gateway.networking.k8s.io/v1.GatewayClass
	//
	// +optional
	controllerName?: string @go(ControllerName)
}

// ExtensionAPISettings defines the settings specific to Gateway API Extensions.
#ExtensionAPISettings: {
	// EnableEnvoyPatchPolicy enables Envoy Gateway to
	// reconcile and implement the EnvoyPatchPolicy resources.
	enableEnvoyPatchPolicy: bool @go(EnableEnvoyPatchPolicy)

	// EnableBackend enables Envoy Gateway to
	// reconcile and implement the Backend resources.
	enableBackend: bool @go(EnableBackend)
}

// EnvoyGatewayProvider defines the desired configuration of a provider.
// +union
#EnvoyGatewayProvider: {
	// Type is the type of provider to use. Supported types are "Kubernetes", "Custom".
	//
	// +unionDiscriminator
	type: #ProviderType @go(Type)

	// Kubernetes defines the configuration of the Kubernetes provider. Kubernetes
	// provides runtime configuration via the Kubernetes API.
	//
	// +optional
	kubernetes?: null | #EnvoyGatewayKubernetesProvider @go(Kubernetes,*EnvoyGatewayKubernetesProvider)

	// Custom defines the configuration for the Custom provider. This provider
	// allows you to define a specific resource provider and an infrastructure
	// provider.
	//
	// +optional
	custom?: null | #EnvoyGatewayCustomProvider @go(Custom,*EnvoyGatewayCustomProvider)
}

// EnvoyGatewayKubernetesProvider defines configuration for the Kubernetes provider.
#EnvoyGatewayKubernetesProvider: {
	// RateLimitDeployment defines the desired state of the Envoy ratelimit deployment resource.
	// If unspecified, default settings for the managed Envoy ratelimit deployment resource
	// are applied.
	//
	// +optional
	rateLimitDeployment?: null | #KubernetesDeploymentSpec @go(RateLimitDeployment,*KubernetesDeploymentSpec)

	// RateLimitHpa defines the Horizontal Pod Autoscaler settings for Envoy ratelimit Deployment.
	// If the HPA is set, Replicas field from RateLimitDeployment will be ignored.
	//
	// +optional
	rateLimitHpa?: null | #KubernetesHorizontalPodAutoscalerSpec @go(RateLimitHpa,*KubernetesHorizontalPodAutoscalerSpec)

	// Watch holds configuration of which input resources should be watched and reconciled.
	// +optional
	watch?: null | #KubernetesWatchMode @go(Watch,*KubernetesWatchMode)

	// Deploy holds configuration of how output managed resources such as the Envoy Proxy data plane
	// should be deployed
	// +optional
	// +notImplementedHide
	deploy?: null | #KubernetesDeployMode @go(Deploy,*KubernetesDeployMode)

	// LeaderElection specifies the configuration for leader election.
	// If it's not set up, leader election will be active by default, using Kubernetes' standard settings.
	// +optional
	leaderElection?: null | #LeaderElection @go(LeaderElection,*LeaderElection)

	// ShutdownManager defines the configuration for the shutdown manager.
	// +optional
	shutdownManager?: null | #ShutdownManager @go(ShutdownManager,*ShutdownManager)

	// Client holds the configuration for the Kubernetes client.
	client?: null | #KubernetesClient @go(Client,*KubernetesClient)

	// TopologyInjector defines the configuration for topology injector MutatatingWebhookConfiguration
	// +optional
	proxyTopologyInjector?: null | #EnvoyGatewayTopologyInjector @go(TopologyInjector,*EnvoyGatewayTopologyInjector)
}

// KubernetesWatchModeTypeNamespaces indicates that the namespace watch mode is used.
#KubernetesWatchModeTypeNamespaces: "Namespaces"

// KubernetesWatchModeTypeNamespaceSelector indicates that namespaceSelector watch
// mode is used.
#KubernetesWatchModeTypeNamespaceSelector: "NamespaceSelector"

// KubernetesWatchModeType defines the type of KubernetesWatchMode
#KubernetesWatchModeType: string

// KubernetesWatchMode holds the configuration for which input resources to watch and reconcile.
#KubernetesWatchMode: {
	// Type indicates what watch mode to use. KubernetesWatchModeTypeNamespaces and
	// KubernetesWatchModeTypeNamespaceSelector are currently supported
	// By default, when this field is unset or empty, Envoy Gateway will watch for input namespaced resources
	// from all namespaces.
	type?: #KubernetesWatchModeType @go(Type)

	// Namespaces holds the list of namespaces that Envoy Gateway will watch for namespaced scoped
	// resources such as Gateway, HTTPRoute and Service.
	// Note that Envoy Gateway will continue to reconcile relevant cluster scoped resources such as
	// GatewayClass that it is linked to. Precisely one of Namespaces and NamespaceSelector must be set.
	namespaces?: [...string] @go(Namespaces,[]string)

	// NamespaceSelector holds the label selector used to dynamically select namespaces.
	// Envoy Gateway will watch for namespaces matching the specified label selector.
	// Precisely one of Namespaces and NamespaceSelector must be set.
	namespaceSelector?: null | metav1.#LabelSelector @go(NamespaceSelector,*metav1.LabelSelector)
}

// KubernetesDeployModeTypeControllerNamespace indicates that the controller namespace is used for the infra proxy deployments.
#KubernetesDeployModeTypeControllerNamespace: "ControllerNamespace"

// KubernetesDeployModeTypeGatewayNamespace indicates that the gateway namespace is used for the infra proxy deployments.
#KubernetesDeployModeTypeGatewayNamespace: "GatewayNamespace"

// KubernetesDeployModeType defines the type of KubernetesDeployMode
#KubernetesDeployModeType: string

// KubernetesDeployMode holds configuration for how to deploy managed resources such as the Envoy Proxy
// data plane fleet.
#KubernetesDeployMode: {
	// Type indicates what deployment mode to use. "ControllerNamespace" and
	// "GatewayNamespace" are currently supported.
	// By default, when this field is unset or empty, Envoy Gateway will deploy Envoy Proxy fleet in the Controller namespace.
	// +optional
	// +kubebuilder:default=ControllerNamespace
	// +kubebuilder:validation:Enum=ControllerNamespace;GatewayNamespace
	type?: null | #KubernetesDeployModeType @go(Type,*KubernetesDeployModeType)
}

// EnvoyGatewayCustomProvider defines configuration for the Custom provider.
#EnvoyGatewayCustomProvider: {
	// Resource defines the desired resource provider.
	// This provider is used to specify the provider to be used
	// to retrieve the resource configurations such as Gateway API
	// resources
	resource: #EnvoyGatewayResourceProvider @go(Resource)

	// Infrastructure defines the desired infrastructure provider.
	// This provider is used to specify the provider to be used
	// to provide an environment to deploy the out resources like
	// the Envoy Proxy data plane.
	//
	// Infrastructure is optional, if provider is not specified,
	// No infrastructure provider is available.
	// +optional
	infrastructure?: null | #EnvoyGatewayInfrastructureProvider @go(Infrastructure,*EnvoyGatewayInfrastructureProvider)
}

// ResourceProviderType defines the types of custom resource providers supported by Envoy Gateway.
//
// +kubebuilder:validation:Enum=File
#ResourceProviderType: string // #enumResourceProviderType

#enumResourceProviderType:
	#ResourceProviderTypeFile

// ResourceProviderTypeFile defines the "File" provider.
#ResourceProviderTypeFile: #ResourceProviderType & "File"

// EnvoyGatewayResourceProvider defines configuration for the Custom Resource provider.
#EnvoyGatewayResourceProvider: {
	// Type is the type of resource provider to use. Supported types are "File".
	//
	// +unionDiscriminator
	type: #ResourceProviderType @go(Type)

	// File defines the configuration of the File provider. File provides runtime
	// configuration defined by one or more files.
	//
	// +optional
	file?: null | #EnvoyGatewayFileResourceProvider @go(File,*EnvoyGatewayFileResourceProvider)
}

// EnvoyGatewayFileResourceProvider defines configuration for the File Resource provider.
#EnvoyGatewayFileResourceProvider: {
	// Paths are the paths to a directory or file containing the resource configuration.
	// Recursive subdirectories are not currently supported.
	paths: [...string] @go(Paths,[]string)
}

// InfrastructureProviderType defines the types of custom infrastructure providers supported by Envoy Gateway.
//
// +kubebuilder:validation:Enum=Host
#InfrastructureProviderType: string // #enumInfrastructureProviderType

#enumInfrastructureProviderType:
	#InfrastructureProviderTypeHost

// InfrastructureProviderTypeHost defines the "Host" provider.
#InfrastructureProviderTypeHost: #InfrastructureProviderType & "Host"

// EnvoyGatewayInfrastructureProvider defines configuration for the Custom Infrastructure provider.
#EnvoyGatewayInfrastructureProvider: {
	// Type is the type of infrastructure providers to use. Supported types are "Host".
	//
	// +unionDiscriminator
	type: #InfrastructureProviderType @go(Type)

	// Host defines the configuration of the Host provider. Host provides runtime
	// deployment of the data plane as a child process on the host environment.
	//
	// +optional
	host?: null | #EnvoyGatewayHostInfrastructureProvider @go(Host,*EnvoyGatewayHostInfrastructureProvider)
}

// EnvoyGatewayHostInfrastructureProvider defines configuration for the Host Infrastructure provider.
#EnvoyGatewayHostInfrastructureProvider: {}

// RateLimit defines the configuration associated with the Rate Limit Service
// used for Global Rate Limiting.
#RateLimit: {
	// Backend holds the configuration associated with the
	// database backend used by the rate limit service to store
	// state associated with global ratelimiting.
	backend: #RateLimitDatabaseBackend @go(Backend)

	// Timeout specifies the timeout period for the proxy to access the ratelimit server
	// If not set, timeout is 20ms.
	// +optional
	// +kubebuilder:validation:Format=duration
	timeout?: null | metav1.#Duration @go(Timeout,*metav1.Duration)

	// FailClosed is a switch used to control the flow of traffic
	// when the response from the ratelimit server cannot be obtained.
	// If FailClosed is false, let the traffic pass,
	// otherwise, don't let the traffic pass and return 500.
	// If not set, FailClosed is False.
	failClosed: bool @go(FailClosed)

	// Telemetry defines telemetry configuration for RateLimit.
	// +optional
	telemetry?: null | #RateLimitTelemetry @go(Telemetry,*RateLimitTelemetry)
}

#RateLimitTelemetry: {
	// Metrics defines metrics configuration for RateLimit.
	metrics?: null | #RateLimitMetrics @go(Metrics,*RateLimitMetrics)

	// Tracing defines traces configuration for RateLimit.
	tracing?: null | #RateLimitTracing @go(Tracing,*RateLimitTracing)
}

#RateLimitMetrics: {
	// Prometheus defines the configuration for prometheus endpoint.
	prometheus?: null | #RateLimitMetricsPrometheusProvider @go(Prometheus,*RateLimitMetricsPrometheusProvider)
}

#RateLimitMetricsPrometheusProvider: {
	// Disable the Prometheus endpoint.
	disable?: bool @go(Disable)
}

#RateLimitTracing: {
	// SamplingRate controls the rate at which traffic will be
	// selected for tracing if no prior sampling decision has been made.
	// Defaults to 100, valid values [0-100]. 100 indicates 100% sampling.
	// +optional
	samplingRate?: null | uint32 @go(SamplingRate,*uint32)

	// Provider defines the rateLimit tracing provider.
	// Only OpenTelemetry is supported currently.
	provider?: null | #RateLimitTracingProvider @go(Provider,*RateLimitTracingProvider)
}

#RateLimitTracingProviderType: string

#RateLimitTracingProviderTypeOpenTelemetry: #TracingProviderType & "OpenTelemetry"

// RateLimitTracingProvider defines the tracing provider configuration of RateLimit
#RateLimitTracingProvider: {
	// Type defines the tracing provider type.
	// Since to RateLimit Exporter currently using OpenTelemetry, only OpenTelemetry is supported
	type?: null | #RateLimitTracingProviderType @go(Type,*RateLimitTracingProviderType)

	// URL is the endpoint of the trace collector that supports the OTLP protocol
	url: string @go(URL)
}

// RateLimitDatabaseBackend defines the configuration associated with
// the database backend used by the rate limit service.
// +union
#RateLimitDatabaseBackend: {
	// Type is the type of database backend to use. Supported types are:
	//	* Redis: Connects to a Redis database.
	//
	// +unionDiscriminator
	type: #RateLimitDatabaseBackendType @go(Type)

	// Redis defines the settings needed to connect to a Redis database.
	//
	// +optional
	redis?: null | #RateLimitRedisSettings @go(Redis,*RateLimitRedisSettings)
}

// RateLimitDatabaseBackendType specifies the types of database backend
// to be used by the rate limit service.
// +kubebuilder:validation:Enum=Redis
#RateLimitDatabaseBackendType: string // #enumRateLimitDatabaseBackendType

#enumRateLimitDatabaseBackendType:
	#RedisBackendType

// RedisBackendType uses a redis database for the rate limit service.
#RedisBackendType: #RateLimitDatabaseBackendType & "Redis"

// RedisTLSSettings defines the TLS configuration for connecting to redis database.
#RedisTLSSettings: {
	// CertificateRef defines the client certificate reference for TLS connections.
	// Currently only a Kubernetes Secret of type TLS is supported.
	// +optional
	certificateRef?: null | gwapiv1.#SecretObjectReference @go(CertificateRef,*gwapiv1.SecretObjectReference)
}

// RateLimitRedisSettings defines the configuration for connecting to redis database.
#RateLimitRedisSettings: {
	// URL of the Redis Database.
	url: string @go(URL)

	// TLS defines TLS configuration for connecting to redis database.
	//
	// +optional
	tls?: null | #RedisTLSSettings @go(TLS,*RedisTLSSettings)
}

// ExtensionManager defines the configuration for registering an extension manager to
// the Envoy Gateway control plane.
#ExtensionManager: {
	// Resources defines the set of K8s resources the extension will handle as route
	// filter resources
	//
	// +optional
	resources?: [...#GroupVersionKind] @go(Resources,[]GroupVersionKind)

	// PolicyResources defines the set of K8S resources the extension server will handle
	// as directly attached GatewayAPI policies
	//
	// +optional
	policyResources?: [...#GroupVersionKind] @go(PolicyResources,[]GroupVersionKind)

	// Hooks defines the set of hooks the extension supports
	//
	// +kubebuilder:validation:Required
	hooks?: null | #ExtensionHooks @go(Hooks,*ExtensionHooks)

	// Service defines the configuration of the extension service that the Envoy
	// Gateway Control Plane will call through extension hooks.
	//
	// +kubebuilder:validation:Required
	service?: null | #ExtensionService @go(Service,*ExtensionService)

	// FailOpen defines if Envoy Gateway should ignore errors returned from the Extension Service hooks.
	//
	// When set to false, Envoy Gateway does not ignore extension Service hook errors. As a result,
	// xDS updates are skipped for the relevant envoy proxy fleet and the previous state is preserved.
	//
	// When set to true, if the Extension Service hooks return an error, no changes will be applied to the
	// source of the configuration which was sent to the extension server. The errors are ignored and the resulting
	// xDS configuration is updated in the xDS snapshot.
	//
	// Default: false
	//
	// +optional
	failOpen?: bool @go(FailOpen)

	// MaxMessageSize defines the maximum message size in bytes that can be
	// sent to or received from the Extension Service.
	// Default: 4M
	//
	// +kubebuilder:validation:XIntOrString
	// +kubebuilder:validation:Pattern="^[1-9]+[0-9]*([EPTGMK]i|[EPTGMk])?$"
	// +optional
	maxMessageSize?: null | resource.#Quantity @go(MaxMessageSize,*resource.Quantity)
}

// ExtensionHooks defines extension hooks across all supported runners
#ExtensionHooks: {
	// XDSTranslator defines all the supported extension hooks for the xds-translator runner
	xdsTranslator?: null | #XDSTranslatorHooks @go(XDSTranslator,*XDSTranslatorHooks)
}

// XDSTranslatorHooks contains all the pre and post hooks for the xds-translator runner.
#XDSTranslatorHooks: {
	pre?: [...#XDSTranslatorHook] @go(Pre,[]XDSTranslatorHook)
	post?: [...#XDSTranslatorHook] @go(Post,[]XDSTranslatorHook)
}

// ExtensionService defines the configuration for connecting to a registered extension service.
#ExtensionService: {
	#BackendEndpoint

	// Host define the extension service hostname.
	// Deprecated: use the appropriate transport attribute instead (FQDN,IP,Unix)
	//
	// +optional
	host?: string @go(Host)

	// Port defines the port the extension service is exposed on.
	// Deprecated: use the appropriate transport attribute instead (FQDN,IP,Unix)
	//
	// +optional
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:default=80
	port?: int32 @go(Port)

	// TLS defines TLS configuration for communication between Envoy Gateway and
	// the extension service.
	//
	// +optional
	tls?: null | #ExtensionTLS @go(TLS,*ExtensionTLS)

	// Retry defines the retry policy for to use when errors are encountered in communication with
	// the extension service.
	//
	// +optional
	retry?: null | #ExtensionServiceRetry @go(Retry,*ExtensionServiceRetry)
}

// ExtensionTLS defines the TLS configuration when connecting to an extension service.
#ExtensionTLS: {
	// CertificateRef is a reference to a Kubernetes Secret with a CA certificate in a key named "tls.crt".
	//
	// The CA certificate is used by Envoy Gateway the verify the server certificate presented by the extension server.
	// At this time, Envoy Gateway does not support Client Certificate authentication of Envoy Gateway towards the extension server (mTLS).
	//
	// +kubebuilder:validation:Required
	certificateRef: gwapiv1.#SecretObjectReference @go(CertificateRef)
}

// GRPCStatus defines grpc status codes as defined in https://github.com/grpc/grpc/blob/master/doc/statuscodes.md.
// +kubebuilder:validation:Enum=CANCELLED;UNKNOWN;INVALID_ARGUMENT;DEADLINE_EXCEEDED;NOT_FOUND;ALREADY_EXISTS;PERMISSION_DENIED;RESOURCE_EXHAUSTED;FAILED_PRECONDITION;ABORTED;OUT_OF_RANGE;UNIMPLEMENTED;INTERNAL;UNAVAILABLE;DATA_LOSS;UNAUTHENTICATED
#RetryableGRPCStatusCode: string

// ExtensionServiceRetry defines the retry policy for to use when errors are encountered in communication with the extension service.
#ExtensionServiceRetry: {
	// MaxAttempts defines the maximum number of retry attempts.
	// Default: 4
	//
	// +optional
	maxAttempts?: null | int @go(MaxAttempts,*int)

	// InitialBackoff defines the initial backoff in seconds for retries, details: https://github.com/grpc/proposal/blob/master/A6-client-retries.md#integration-with-service-config.
	// Default: 0.1s
	//
	// +optional
	initialBackoff?: null | gwapiv1.#Duration @go(InitialBackoff,*gwapiv1.Duration)

	// MaxBackoff defines the maximum backoff in seconds for retries.
	// Default: 1s
	//
	// +optional
	maxBackoff?: null | gwapiv1.#Duration @go(MaxBackoff,*gwapiv1.Duration)

	// BackoffMultiplier defines the multiplier to use for exponential backoff for retries.
	// Default: 2.0
	//
	// +optional
	backoffMultiplier?: null | gwapiv1.#Fraction @go(BackoffMultiplier,*gwapiv1.Fraction)

	// RetryableStatusCodes defines the grpc status code for which retries will be attempted.
	// Default: [ "UNAVAILABLE" ]
	//
	// +optional
	RetryableStatusCodes?: [...#RetryableGRPCStatusCode] @go(,[]RetryableGRPCStatusCode)
}

// EnvoyGatewayAdmin defines the Envoy Gateway Admin configuration.
#EnvoyGatewayAdmin: {
	// Address defines the address of Envoy Gateway Admin Server.
	//
	// +optional
	address?: null | #EnvoyGatewayAdminAddress @go(Address,*EnvoyGatewayAdminAddress)

	// EnableDumpConfig defines if enable dump config in Envoy Gateway logs.
	//
	// +optional
	enableDumpConfig?: bool @go(EnableDumpConfig)

	// EnablePprof defines if enable pprof in Envoy Gateway Admin Server.
	//
	// +optional
	enablePprof?: bool @go(EnablePprof)
}

// EnvoyGatewayAdminAddress defines the Envoy Gateway Admin Address configuration.
#EnvoyGatewayAdminAddress: {
	// Port defines the port the admin server is exposed on.
	//
	// +optional
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:default=19000
	port?: int @go(Port)

	// Host defines the admin server hostname.
	//
	// +optional
	// +kubebuilder:default="127.0.0.1"
	host?: string @go(Host)
}

// ShutdownManager defines the configuration for the shutdown manager.
#ShutdownManager: {
	// Image specifies the ShutdownManager container image to be used, instead of the default image.
	image?: null | string @go(Image,*string)
}

// EnvoyGatewayTopologyInjector defines the configuration for topology injector MutatatingWebhookConfiguration
#EnvoyGatewayTopologyInjector: {
	// +optional
	disabled?: null | bool @go(Disable,*bool)
}
