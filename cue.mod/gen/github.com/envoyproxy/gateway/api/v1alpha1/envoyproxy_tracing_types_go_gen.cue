// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/envoyproxy/gateway/api/v1alpha1

package v1alpha1

import gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"

// ProxyTracing defines the tracing configuration for a proxy.
// +kubebuilder:validation:XValidation:message="only one of SamplingRate or SamplingFraction can be specified",rule="!(has(self.samplingRate) && has(self.samplingFraction))"
#ProxyTracing: {
	// SamplingRate controls the rate at which traffic will be
	// selected for tracing if no prior sampling decision has been made.
	// Defaults to 100, valid values [0-100]. 100 indicates 100% sampling.
	//
	// Only one of SamplingRate or SamplingFraction may be specified.
	// If neither field is specified, all requests will be sampled.
	//
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:validation:Maximum=100
	// +optional
	samplingRate?: null | uint32 @go(SamplingRate,*uint32)

	// SamplingFraction represents the fraction of requests that should be
	// selected for tracing if no prior sampling decision has been made.
	//
	// Only one of SamplingRate or SamplingFraction may be specified.
	// If neither field is specified, all requests will be sampled.
	//
	// +optional
	samplingFraction?: null | gwapiv1.#Fraction @go(SamplingFraction,*gwapiv1.Fraction)

	// CustomTags defines the custom tags to add to each span.
	// If provider is kubernetes, pod name and namespace are added by default.
	//
	// +optional
	customTags?: {[string]: #CustomTag} @go(CustomTags,map[string]CustomTag)

	// Provider defines the tracing provider.
	provider: #TracingProvider @go(Provider)
}

#TracingProviderType: string // #enumTracingProviderType

#enumTracingProviderType:
	#RateLimitTracingProviderTypeOpenTelemetry |
	#TracingProviderTypeOpenTelemetry |
	#TracingProviderTypeZipkin |
	#TracingProviderTypeDatadog

#TracingProviderTypeOpenTelemetry: #TracingProviderType & "OpenTelemetry"
#TracingProviderTypeZipkin:        #TracingProviderType & "Zipkin"
#TracingProviderTypeDatadog:       #TracingProviderType & "Datadog"

// TracingProvider defines the tracing provider configuration.
//
// +kubebuilder:validation:XValidation:message="host or backendRefs needs to be set",rule="has(self.host) || self.backendRefs.size() > 0"
// +kubebuilder:validation:XValidation:message="BackendRefs must be used, backendRef is not supported.",rule="!has(self.backendRef)"
// +kubebuilder:validation:XValidation:message="BackendRefs only support Service and Backend kind.",rule="has(self.backendRefs) ? self.backendRefs.all(f, f.kind == 'Service' || f.kind == 'Backend') : true"
// +kubebuilder:validation:XValidation:message="BackendRefs only support Core and gateway.envoyproxy.io group.",rule="has(self.backendRefs) ? (self.backendRefs.all(f, f.group == \"\" || f.group == 'gateway.envoyproxy.io')) : true"
#TracingProvider: {
	#BackendCluster

	// Type defines the tracing provider type.
	// +kubebuilder:validation:Enum=OpenTelemetry;Zipkin;Datadog
	// +kubebuilder:default=OpenTelemetry
	type: #TracingProviderType @go(Type)

	// Host define the provider service hostname.
	// Deprecated: Use BackendRefs instead.
	//
	// +optional
	host?: null | string @go(Host,*string)

	// Port defines the port the provider service is exposed on.
	// Deprecated: Use BackendRefs instead.
	//
	// +optional
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:default=4317
	port?: int32 @go(Port)

	// Zipkin defines the Zipkin tracing provider configuration
	// +optional
	zipkin?: null | #ZipkinTracingProvider @go(Zipkin,*ZipkinTracingProvider)
}

#CustomTagType: string // #enumCustomTagType

#enumCustomTagType:
	#CustomTagTypeLiteral |
	#CustomTagTypeEnvironment |
	#CustomTagTypeRequestHeader

// CustomTagTypeLiteral adds hard-coded value to each span.
#CustomTagTypeLiteral: #CustomTagType & "Literal"

// CustomTagTypeEnvironment adds value from environment variable to each span.
#CustomTagTypeEnvironment: #CustomTagType & "Environment"

// CustomTagTypeRequestHeader adds value from request header to each span.
#CustomTagTypeRequestHeader: #CustomTagType & "RequestHeader"

#CustomTag: {
	// Type defines the type of custom tag.
	// +kubebuilder:validation:Enum=Literal;Environment;RequestHeader
	// +unionDiscriminator
	// +kubebuilder:default=Literal
	type: #CustomTagType @go(Type)

	// Literal adds hard-coded value to each span.
	// It's required when the type is "Literal".
	literal?: null | #LiteralCustomTag @go(Literal,*LiteralCustomTag)

	// Environment adds value from environment variable to each span.
	// It's required when the type is "Environment".
	environment?: null | #EnvironmentCustomTag @go(Environment,*EnvironmentCustomTag)

	// RequestHeader adds value from request header to each span.
	// It's required when the type is "RequestHeader".
	requestHeader?: null | #RequestHeaderCustomTag @go(RequestHeader,*RequestHeaderCustomTag)
}

// LiteralCustomTag adds hard-coded value to each span.
#LiteralCustomTag: {
	// Value defines the hard-coded value to add to each span.
	value: string @go(Value)
}

// EnvironmentCustomTag adds value from environment variable to each span.
#EnvironmentCustomTag: {
	// Name defines the name of the environment variable which to extract the value from.
	name: string @go(Name)

	// DefaultValue defines the default value to use if the environment variable is not set.
	// +optional
	defaultValue?: null | string @go(DefaultValue,*string)
}

// RequestHeaderCustomTag adds value from request header to each span.
#RequestHeaderCustomTag: {
	// Name defines the name of the request header which to extract the value from.
	name: string @go(Name)

	// DefaultValue defines the default value to use if the request header is not set.
	// +optional
	defaultValue?: null | string @go(DefaultValue,*string)
}

// ZipkinTracingProvider defines the Zipkin tracing provider configuration.
#ZipkinTracingProvider: {
	// Enable128BitTraceID determines whether a 128bit trace id will be used
	// when creating a new trace instance. If set to false, a 64bit trace
	// id will be used.
	// +optional
	enable128BitTraceId?: null | bool @go(Enable128BitTraceID,*bool)

	// DisableSharedSpanContext determines whether the default Envoy behaviour of
	// client and server spans sharing the same span context should be disabled.
	// +optional
	disableSharedSpanContext?: null | bool @go(DisableSharedSpanContext,*bool)
}
