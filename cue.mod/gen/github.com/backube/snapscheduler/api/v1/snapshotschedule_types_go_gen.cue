// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/backube/snapscheduler/api/v1

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conditionsv1 "github.com/openshift/custom-resource-status/conditions/v1"
)

// SnapshotRetentionSpec defines how long snapshots should be kept.
#SnapshotRetentionSpec: {
	// Expires is the length of time (time.Duration) after which a given
	// Snapshot will be deleted.
	//+kubebuilder:validation:Pattern=^\d+(h|m|s)$
	//+optional
	expires?: string @go(Expires)

	//+kubebuilder:validation:Minimum=1
	//+optional
	maxCount?: null | int32 @go(MaxCount,*int32)
}

// SnapshotTemplateSpec defines the template for Snapshot objects
#SnapshotTemplateSpec: {
	// Labels is a list of labels that should be added to each Snapshot
	// created by this schedule.
	//+optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// SnapshotClassName is the name of the VSC to be used when creating
	// Snapshots.
	//+optional
	snapshotClassName?: null | string @go(SnapshotClassName,*string)
}

// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
#SnapshotScheduleSpec: {
	// ClaimSelector selects which PVCs will be snapshotted according to
	// this schedule.
	//+optional
	claimSelector?: metav1.#LabelSelector @go(ClaimSelector)

	// Retention determines how long this schedule's snapshots will be kept.
	//+optional
	retention?: #SnapshotRetentionSpec @go(Retention)

	// Schedule is a Cronspec specifying when snapshots should be taken. See
	// https://en.wikipedia.org/wiki/Cron for a description of the format.
	//+kubebuilder:validation:Pattern=`^((\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}|@(hourly|daily|weekly|monthly|yearly))$`
	schedule?: string @go(Schedule)

	// Disabled determines whether this schedule is currently disabled.
	//+optional
	disabled?: bool @go(Disabled)

	// SnapshotTemplate is a template description of the Snapshots to be created.
	snapshotTemplate?: null | #SnapshotTemplateSpec @go(SnapshotTemplate,*SnapshotTemplateSpec)
}

// SnapshotScheduleStatus defines the observed state of SnapshotSchedule
#SnapshotScheduleStatus: {
	// Conditions is a list of conditions related to operator reconciliation.
	//+optional
	conditions?: [...conditionsv1.#Condition] @go(Conditions,[]conditionsv1.Condition)

	// LastSnapshotTime is the time of the most recent set of snapshots
	// generated by this schedule.
	//+optional
	lastSnapshotTime?: null | metav1.#Time @go(LastSnapshotTime,*metav1.Time)

	// NextSnapshotTime is the time when this schedule should create the
	// next set of snapshots.
	//+optional
	nextSnapshotTime?: null | metav1.#Time @go(NextSnapshotTime,*metav1.Time)
}

// ConditionReconciled is a Condition indicating whether the object is fully
// reconciled.
#ConditionReconciled: conditionsv1.#ConditionType & "Reconciled"

// ReconciledReasonError indicates there was an error while attempting to reconcile.
#ReconciledReasonError: "ReconcileError"

// ReconciledReasonComplete indicates reconcile was successful
#ReconciledReasonComplete: "ReconcileComplete"

// SnapshotSchedule is the Schema for the snapshotschedules API
#SnapshotSchedule: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta      @go(ObjectMeta)
	spec?:     #SnapshotScheduleSpec   @go(Spec)
	status?:   #SnapshotScheduleStatus @go(Status)
}

// SnapshotScheduleList contains a list of SnapshotSchedule
#SnapshotScheduleList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#SnapshotSchedule] @go(Items,[]SnapshotSchedule)
}
