// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/client-go/rest

package rest

import (
	clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
	"k8s.io/client-go/util/flowcontrol"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

#DefaultQPS:   float32 & 5.0
#DefaultBurst: int & 10

// Config holds the common attributes that can be passed to a Kubernetes client on
// initialization.
#Config: {
	// Host must be a host string, a host:port pair, or a URL to the base of the apiserver.
	// If a URL is given then the (optional) Path of that URL represents a prefix that must
	// be appended to all request URIs used to access the apiserver. This allows a frontend
	// proxy to easily relocate all of the apiserver endpoints.
	Host: string

	// APIPath is a sub-path that points to an API root.
	APIPath: string

	// ContentConfig contains settings that affect how objects are transformed when
	// sent to the server.
	ContentConfig: #ContentConfig

	// Server requires Basic authentication
	Username: string
	Password: string

	// Server requires Bearer authentication. This client will not attempt to use
	// refresh tokens for an OAuth2 flow.
	// TODO: demonstrate an OAuth2 compatible client.
	BearerToken: string

	// Path to a file containing a BearerToken.
	// If set, the contents are periodically read.
	// The last successfully read value takes precedence over BearerToken.
	BearerTokenFile: string

	// Impersonate is the configuration that RESTClient will use for impersonation.
	Impersonate: #ImpersonationConfig

	// Server requires plugin-specified authentication.
	AuthProvider?: null | clientcmdapi.#AuthProviderConfig @go(,*clientcmdapi.AuthProviderConfig)

	// Callback to persist config for AuthProvider.
	AuthConfigPersister: #AuthProviderConfigPersister

	// Exec-based authentication provider.
	ExecProvider?: null | clientcmdapi.#ExecConfig @go(,*clientcmdapi.ExecConfig)

	// TLSClientConfig contains settings to enable transport layer security
	TLSClientConfig: #TLSClientConfig

	// UserAgent is an optional field that specifies the caller of this request.
	UserAgent: string

	// DisableCompression bypasses automatic GZip compression requests to the
	// server.
	DisableCompression: bool

	// Transport may be used for custom HTTP behavior. This attribute may not
	// be specified with the TLS client certificate options. Use WrapTransport
	// to provide additional per-server middleware behavior.
	Transport: _ @go(,http.RoundTripper)

	// QPS indicates the maximum QPS to the master from this client.
	// If it's zero, the created RESTClient will use DefaultQPS: 5
	QPS: float32

	// Maximum burst for throttle.
	// If it's zero, the created RESTClient will use DefaultBurst: 10.
	Burst: int

	// Rate limiter for limiting connections to the master from this client. If present overwrites QPS/Burst
	RateLimiter: flowcontrol.#RateLimiter

	// WarningHandler handles warnings in server responses.
	// If not set, the default warning handler is used.
	// See documentation for SetDefaultWarningHandler() for details.
	WarningHandler: #WarningHandler

	// The maximum length of time to wait before giving up on a server request. A value of zero means no timeout.
	Timeout: int @go(,time.Duration)
}

_#sanitizedConfig: null | #Config

_#sanitizedAuthConfigPersister: AuthProviderConfigPersister: #AuthProviderConfigPersister

_#sanitizedObject: {
	Object: runtime.#Object @go(,gruntime.Object)
}

// ImpersonationConfig has all the available impersonation options
#ImpersonationConfig: {
	// UserName is the username to impersonate on each request.
	UserName: string

	// UID is a unique value that identifies the user.
	UID: string

	// Groups are the groups to impersonate on each request.
	Groups: [...string] @go(,[]string)

	// Extra is a free-form field which can be used to link some authentication information
	// to authorization information.  This field allows you to impersonate it.
	Extra: {[string]: [...string]} @go(,map[string][]string)
}

// +k8s:deepcopy-gen=true
// TLSClientConfig contains settings to enable transport layer security
#TLSClientConfig: {
	// Server should be accessed without verifying the TLS certificate. For testing only.
	Insecure: bool

	// ServerName is passed to the server for SNI and is used in the client to check server
	// certificates against. If ServerName is empty, the hostname used to contact the
	// server is used.
	ServerName: string

	// Server requires TLS client certificate authentication
	CertFile: string

	// Server requires TLS client certificate authentication
	KeyFile: string

	// Trusted root certificates for server
	CAFile: string

	// CertData holds PEM-encoded bytes (typically read from a client certificate file).
	// CertData takes precedence over CertFile
	CertData: bytes @go(,[]byte)

	// KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
	// KeyData takes precedence over KeyFile
	KeyData: bytes @go(,[]byte)

	// CAData holds PEM-encoded bytes (typically read from a root certificates bundle).
	// CAData takes precedence over CAFile
	CAData: bytes @go(,[]byte)

	// NextProtos is a list of supported application level protocols, in order of preference.
	// Used to populate tls.Config.NextProtos.
	// To indicate to the server http/1.1 is preferred over http/2, set to ["http/1.1", "h2"] (though the server is free to ignore that preference).
	// To use only http/1.1, set to ["http/1.1"].
	NextProtos: [...string] @go(,[]string)
}

_#sanitizedTLSClientConfig: #TLSClientConfig

#ContentConfig: {
	// AcceptContentTypes specifies the types the client will accept and is optional.
	// If not set, ContentType will be used to define the Accept header
	AcceptContentTypes: string

	// ContentType specifies the wire format used to communicate with the server.
	// This value will be set as the Accept header on requests made to the server, and
	// as the default content type on any object sent to the server. If not set,
	// "application/json" is used.
	ContentType: string

	// GroupVersion is the API version to talk to. Must be provided when initializing
	// a RESTClient directly. When initializing a Client, will be set with the default
	// code version.
	GroupVersion?: null | schema.#GroupVersion @go(,*schema.GroupVersion)

	// NegotiatedSerializer is used for obtaining encoders and decoders for multiple
	// supported media types.
	//
	// TODO: NegotiatedSerializer will be phased out as internal clients are removed
	//   from Kubernetes.
	NegotiatedSerializer: runtime.#NegotiatedSerializer @go(,gruntime.NegotiatedSerializer)
}
