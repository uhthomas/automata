// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/client-go/tools/leaderelection/resourcelock

package resourcelock

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

#LeaderElectionRecordAnnotationKey: "control-plane.alpha.kubernetes.io/leader"
_#endpointsResourceLock:            "endpoints"
_#configMapsResourceLock:           "configmaps"
#LeasesResourceLock:                "leases"

// When using endpointsLeasesResourceLock, you need to ensure that
// API Priority & Fairness is configured with non-default flow-schema
// that will catch the necessary operations on leader-election related
// endpoint objects.
//
// The example of such flow scheme could look like this:
//   apiVersion: flowcontrol.apiserver.k8s.io/v1beta2
//   kind: FlowSchema
//   metadata:
//     name: my-leader-election
//   spec:
//     distinguisherMethod:
//       type: ByUser
//     matchingPrecedence: 200
//     priorityLevelConfiguration:
//       name: leader-election   # reference the <leader-election> PL
//     rules:
//     - resourceRules:
//       - apiGroups:
//         - ""
//         namespaces:
//         - '*'
//         resources:
//         - endpoints
//         verbs:
//         - get
//         - create
//         - update
//       subjects:
//       - kind: ServiceAccount
//         serviceAccount:
//           name: '*'
//           namespace: kube-system
_#endpointsLeasesResourceLock: "endpointsleases"

// When using configMapsLeasesResourceLock, you need to ensure that
// API Priority & Fairness is configured with non-default flow-schema
// that will catch the necessary operations on leader-election related
// configmap objects.
//
// The example of such flow scheme could look like this:
//   apiVersion: flowcontrol.apiserver.k8s.io/v1beta2
//   kind: FlowSchema
//   metadata:
//     name: my-leader-election
//   spec:
//     distinguisherMethod:
//       type: ByUser
//     matchingPrecedence: 200
//     priorityLevelConfiguration:
//       name: leader-election   # reference the <leader-election> PL
//     rules:
//     - resourceRules:
//       - apiGroups:
//         - ""
//         namespaces:
//         - '*'
//         resources:
//         - configmaps
//         verbs:
//         - get
//         - create
//         - update
//       subjects:
//       - kind: ServiceAccount
//         serviceAccount:
//           name: '*'
//           namespace: kube-system
_#configMapsLeasesResourceLock: "configmapsleases"

// LeaderElectionRecord is the record that is stored in the leader election annotation.
// This information should be used for observational purposes only and could be replaced
// with a random string (e.g. UUID) with only slight modification of this code.
// TODO(mikedanese): this should potentially be versioned
#LeaderElectionRecord: {
	// HolderIdentity is the ID that owns the lease. If empty, no one owns this lease and
	// all callers may acquire. Versions of this library prior to Kubernetes 1.14 will not
	// attempt to acquire leases with empty identities and will wait for the full lease
	// interval to expire before attempting to reacquire. This value is set to empty when
	// a client voluntarily steps down.
	holderIdentity:       string       @go(HolderIdentity)
	leaseDurationSeconds: int          @go(LeaseDurationSeconds)
	acquireTime:          metav1.#Time @go(AcquireTime)
	renewTime:            metav1.#Time @go(RenewTime)
	leaderTransitions:    int          @go(LeaderTransitions)
}

// EventRecorder records a change in the ResourceLock.
#EventRecorder: _

// ResourceLockConfig common data that exists across different
// resource locks
#ResourceLockConfig: {
	// Identity is the unique string identifying a lease holder across
	// all participants in an election.
	Identity: string

	// EventRecorder is optional.
	EventRecorder: #EventRecorder
}

// Interface offers a common interface for locking on arbitrary
// resources used in leader election.  The Interface is used
// to hide the details on specific implementations in order to allow
// them to change over time.  This interface is strictly for use
// by the leaderelection code.
#Interface: _
