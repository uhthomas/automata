// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/client-go/tools/cache

package cache

import (
	"k8s.io/utils/clock"
	"time"
)

// ExpirationPolicy dictates when an object expires. Currently only abstracted out
// so unittests don't rely on the system clock.
#ExpirationPolicy: _

// TTLPolicy implements a ttl based ExpirationPolicy.
#TTLPolicy: {
	//	 >0: Expire entries with an age > ttl
	//	<=0: Don't expire any entry
	TTL: int @go(,time.Duration)

	// Clock used to calculate ttl expiration
	Clock: clock.#Clock
}

// TimestampedEntry is the only type allowed in a ExpirationCache.
// Keep in mind that it is not safe to share timestamps between computers.
// Behavior may be inconsistent if you get a timestamp from the API Server and
// use it on the client machine as part of your ExpirationCache.
#TimestampedEntry: {
	Obj:       _ @go(,interface{})
	Timestamp: time.Time
}
