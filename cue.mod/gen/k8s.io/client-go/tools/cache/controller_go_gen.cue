// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/client-go/tools/cache

package cache

import "k8s.io/apimachinery/pkg/runtime"

// Config contains all the settings for one of these low-level controllers.
#Config: {
	// The queue for your objects - has to be a DeltaFIFO due to
	// assumptions in the implementation. Your Process() function
	// should accept the output of this Queue's Pop() method.
	Queue: #Queue

	// Something that can list and watch your objects.
	ListerWatcher: #ListerWatcher

	// ObjectType is an example object of the type this controller is
	// expected to handle.
	ObjectType: runtime.#Object

	// ObjectDescription is the description to use when logging type-specific information about this controller.
	ObjectDescription: string

	// FullResyncPeriod is the period at which ShouldResync is considered.
	FullResyncPeriod: int @go(,time.Duration)

	// If true, when Process() returns an error, re-enqueue the object.
	// TODO: add interface to let you inject a delay/backoff or drop
	//       the object completely if desired. Pass the object in
	//       question to this interface as a parameter.  This is probably moot
	//       now that this functionality appears at a higher level.
	RetryOnError: bool

	// WatchListPageSize is the requested chunk size of initial and relist watch lists.
	WatchListPageSize: int64
}

// Controller is a low-level controller that is parameterized by a
// Config and used in sharedIndexInformer.
#Controller: _

// ResourceEventHandler can handle notifications for events that
// happen to a resource. The events are informational only, so you
// can't return an error.  The handlers MUST NOT modify the objects
// received; this concerns not only the top level of structure but all
// the data structures reachable from it.
//   - OnAdd is called when an object is added.
//   - OnUpdate is called when an object is modified. Note that oldObj is the
//     last known state of the object-- it is possible that several changes
//     were combined together, so you can't use this to see every single
//     change. OnUpdate is also called when a re-list happens, and it will
//     get called even if nothing changed. This is useful for periodically
//     evaluating or syncing something.
//   - OnDelete will get the final state of the item if it is known, otherwise
//     it will get an object of type DeletedFinalStateUnknown. This can
//     happen if the watch is closed and misses the delete event and we don't
//     notice the deletion until the subsequent re-list.
#ResourceEventHandler: _

// FilteringResourceEventHandler applies the provided filter to all events coming
// in, ensuring the appropriate nested handler method is invoked. An object
// that starts passing the filter after an update is considered an add, and an
// object that stops passing the filter after an update is considered a delete.
// Like the handlers, the filter MUST NOT modify the objects it is given.
#FilteringResourceEventHandler: {
	Handler: #ResourceEventHandler
}
